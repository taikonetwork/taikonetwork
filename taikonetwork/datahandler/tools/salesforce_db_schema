Patched socket to IPv4 only
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines if you wish to allow Django to create and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [appname]'
# into your database.
from __future__ import unicode_literals

from salesforce import models

class Apxtconga4CongaComposerSettingsC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey('Organization', db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='apxtconga4congacomposersettingsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='apxtconga4congacomposersettingsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    apxtconga4_comments_c = models.TextField(db_column='APXTConga4__Comments__c', verbose_name='Comments', blank=True)
    apxtconga4_production_org_id_c = models.CharField(db_column='APXTConga4__Production_Org_Id__c', max_length=18, verbose_name='Production Org Id', help_text="The Org ID of the company's production instance of Salesforce.  This is used when Sandbox editions are created from the production. Conga applies organizational settings to sandbox accounts.", blank=True)
    apxtconga4_server_override_c = models.CharField(db_column='APXTConga4__Server_Override__c', max_length=255, verbose_name='Server Endpoint URL', help_text='Overrides the ServerURL parameter in Composer and Mail Merge interactions with Salesforce.\nhttps://na14.salesforce.com/services/Soap/u/8.0/00Dd0000000dy26\nThe override value would replace na14.salesforce.com', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'APXTConga4__Conga_Composer_Settings__c'
        verbose_name = 'Conga Composer Settings'
        verbose_name_plural = 'Conga Composer Settings'
        # keyPrefix = 'a0X'

class Apxtconga4CongaEmailStagingC(models.Model):
    owner = models.ForeignKey('Group', db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Conga Email Staging Name', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='apxtconga4congaemailstagingc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='apxtconga4congaemailstagingc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    apxtconga4_htmlbody_c = models.TextField(db_column='APXTConga4__HTMLBody__c', verbose_name='HTML Body', blank=True)
    apxtconga4_subject_c = models.TextField(db_column='APXTConga4__Subject__c', verbose_name='Subject', blank=True)
    apxtconga4_textbody_c = models.TextField(db_column='APXTConga4__TextBody__c', verbose_name='Text Body', blank=True)
    apxtconga4_whatid_c = models.CharField(db_column='APXTConga4__WhatId__c', max_length=18, verbose_name='WhatId', blank=True)
    apxtconga4_whoid_c = models.CharField(db_column='APXTConga4__WhoId__c', max_length=18, verbose_name='WhoId', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'APXTConga4__Conga_Email_Staging__c'
        verbose_name = 'Conga Email Staging'
        verbose_name_plural = 'Conga Email Staging'
        # keyPrefix = 'a0Y'

class Apxtconga4CongaEmailTemplateC(models.Model):
    owner = models.ForeignKey('Group', db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Email Template Name', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='apxtconga4congaemailtemplatec_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='apxtconga4congaemailtemplatec_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    apxtconga4_description_c = models.TextField(db_column='APXTConga4__Description__c', verbose_name='Description', blank=True)
    apxtconga4_htmlbody_c = models.TextField(db_column='APXTConga4__HTMLBody__c', verbose_name='HTML Body', blank=True)
    apxtconga4_name_c = models.CharField(db_column='APXTConga4__Name__c', max_length=80, verbose_name='Name', blank=True)
    apxtconga4_subject_c = models.CharField(db_column='APXTConga4__Subject__c', max_length=255, verbose_name='Subject', blank=True)
    apxtconga4_template_group_c = models.CharField(db_column='APXTConga4__Template_Group__c', max_length=80, verbose_name='Template Group', blank=True)
    apxtconga4_textbody_c = models.TextField(db_column='APXTConga4__TextBody__c', verbose_name='Text Body', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'APXTConga4__Conga_Email_Template__c'
        verbose_name = 'Conga Email Template'
        verbose_name_plural = 'Conga Email Templates'
        # keyPrefix = 'a0Z'

class Apxtconga4CongaTemplateC(models.Model):
    owner = models.ForeignKey('Group', db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Template Name', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='apxtconga4congatemplatec_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='apxtconga4congatemplatec_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    apxtconga4_description_c = models.TextField(db_column='APXTConga4__Description__c', verbose_name='Description', blank=True)
    apxtconga4_label_template_use_detail_data_c = models.BooleanField(db_column='APXTConga4__Label_Template_Use_Detail_Data__c', verbose_name='Label Template: Use Detail Data', help_text='For MassMerge Label Templates: This setting indicates to use ReportData (or QueryData) as the data source for Labels')
    apxtconga4_master_field_to_set_1_c = models.CharField(db_column='APXTConga4__Master_Field_to_Set_1__c', max_length=255, verbose_name='Master Field to Set 1', help_text='Enter the API field name, an equals sign, and the value to set (with spaces replaced with plus signs). \n\nExamples: \nStatus__c=Completed \nStatus_Date__c=Today \nStage__c=In+Progress', blank=True)
    apxtconga4_master_field_to_set_2_c = models.CharField(db_column='APXTConga4__Master_Field_to_Set_2__c', max_length=255, verbose_name='Master Field to Set 2', blank=True)
    apxtconga4_master_field_to_set_3_c = models.CharField(db_column='APXTConga4__Master_Field_to_Set_3__c', max_length=255, verbose_name='Master Field to Set 3', blank=True)
    apxtconga4_name_c = models.CharField(db_column='APXTConga4__Name__c', max_length=80, verbose_name='Name', blank=True)
    apxtconga4_template_group_c = models.CharField(db_column='APXTConga4__Template_Group__c', max_length=80, verbose_name='Template Group', help_text='Identify the group name to which this template belongs. Used in conjunction with the "&TemplateGroup=" parameter in PointMerge.', blank=True)
    apxtconga4_template_type_c = models.CharField(db_column='APXTConga4__Template_Type__c', max_length=255, verbose_name='Template Type', choices=[('Document', 'Document'), ('Label', 'Label'), ('Envelope', 'Envelope')], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'APXTConga4__Conga_Template__c'
        verbose_name = 'Conga Template'
        verbose_name_plural = 'Conga Templates (v5)'
        # keyPrefix = 'a0a'

class Acceptedeventrelation(models.Model):
    relation = models.ForeignKey('Contact', sf_read_only=models.READ_ONLY, db_column='RelationId', blank=True, null=True)
    event = models.ForeignKey('Event', sf_read_only=models.READ_ONLY, db_column='EventId', blank=True, null=True)
    respondeddate = models.DateTimeField(db_column='RespondedDate', verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(db_column='Response', max_length=255, verbose_name='Response', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='acceptedeventrelation_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='acceptedeventrelation_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    type = models.CharField(db_column='Type', max_length=50, verbose_name='Type', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AcceptedEventRelation'
        verbose_name = 'Accepted Event Relation'
        verbose_name_plural = 'Accepted Event Relations'
        # keyPrefix = 'None'

class Account(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    masterrecord = models.ForeignKey('self', related_name='account_masterrecord_set', db_column='MasterRecordId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Account Name')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Account Type', choices=[('Individual', 'Individual'), ('Taiko Group', 'Taiko Group'), ('Business', 'Business'), ('Foundation', 'Foundation'), ('Organization', 'Organization'), ('Government', 'Government'), ('Other', 'Other')], blank=True)
    parent = models.ForeignKey('self', related_name='account_parent_set', db_column='ParentId', blank=True, null=True)
    billingstreet = models.TextField(db_column='BillingStreet', verbose_name='Billing Street', blank=True)
    billingcity = models.CharField(db_column='BillingCity', max_length=40, verbose_name='Billing City', blank=True)
    billingstate = models.CharField(db_column='BillingState', max_length=80, verbose_name='Billing State/Province', blank=True)
    billingpostalcode = models.CharField(db_column='BillingPostalCode', max_length=20, verbose_name='Billing Zip/Postal Code', blank=True)
    billingcountry = models.CharField(db_column='BillingCountry', max_length=80, verbose_name='Billing Country', blank=True)
    billinglatitude = models.DecimalField(db_column='BillingLatitude', max_digits=18, decimal_places=15, verbose_name='Billing Latitude', blank=True, null=True)
    billinglongitude = models.DecimalField(db_column='BillingLongitude', max_digits=18, decimal_places=15, verbose_name='Billing Longitude', blank=True, null=True)
    shippingstreet = models.TextField(db_column='ShippingStreet', verbose_name='Shipping Street', blank=True)
    shippingcity = models.CharField(db_column='ShippingCity', max_length=40, verbose_name='Shipping City', blank=True)
    shippingstate = models.CharField(db_column='ShippingState', max_length=80, verbose_name='Shipping State/Province', blank=True)
    shippingpostalcode = models.CharField(db_column='ShippingPostalCode', max_length=20, verbose_name='Shipping Zip/Postal Code', blank=True)
    shippingcountry = models.CharField(db_column='ShippingCountry', max_length=80, verbose_name='Shipping Country', blank=True)
    shippinglatitude = models.DecimalField(db_column='ShippingLatitude', max_digits=18, decimal_places=15, verbose_name='Shipping Latitude', blank=True, null=True)
    shippinglongitude = models.DecimalField(db_column='ShippingLongitude', max_digits=18, decimal_places=15, verbose_name='Shipping Longitude', blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Account Phone', blank=True)
    fax = models.CharField(db_column='Fax', max_length=40, verbose_name='Account Fax', blank=True)
    accountnumber = models.CharField(db_column='AccountNumber', max_length=40, verbose_name='Account Number', blank=True)
    website = models.URLField(db_column='Website', verbose_name='Website', blank=True, null=True)
    sic = models.CharField(db_column='Sic', max_length=20, verbose_name='SIC Code', blank=True)
    industry = models.CharField(db_column='Industry', max_length=40, verbose_name='Industry', choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Other', 'Other')], blank=True)
    annualrevenue = models.DecimalField(db_column='AnnualRevenue', max_digits=18, decimal_places=0, verbose_name='Annual Revenue', blank=True, null=True)
    numberofemployees = models.IntegerField(db_column='NumberOfEmployees', verbose_name='Employees', blank=True, null=True)
    ownership = models.CharField(db_column='Ownership', max_length=40, verbose_name='Ownership', choices=[('Public', 'Public'), ('Private', 'Private'), ('Subsidiary', 'Subsidiary'), ('Other', 'Other')], blank=True)
    tickersymbol = models.CharField(db_column='TickerSymbol', max_length=20, verbose_name='Ticker Symbol', blank=True)
    description = models.TextField(db_column='Description', verbose_name='Account Description', blank=True)
    rating = models.CharField(db_column='Rating', max_length=40, verbose_name='Account Rating', choices=[('Hot', 'Hot'), ('Warm', 'Warm'), ('Cold', 'Cold')], blank=True)
    site = models.CharField(db_column='Site', max_length=80, verbose_name='Account Site', blank=True)
    owner = models.ForeignKey('User', related_name='account_owner_set', db_column='OwnerId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='account_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='account_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(db_column='Jigsaw', max_length=20, verbose_name='Data.com Key', blank=True)
    jigsawcompanyid = models.CharField(db_column='JigsawCompanyId', max_length=20, verbose_name='Jigsaw Company ID', sf_read_only=models.READ_ONLY, blank=True)
    accountsource = models.CharField(db_column='AccountSource', max_length=40, verbose_name='Account Source', choices=[('Web', 'Web'), ('NATC List', 'NATC List')], blank=True)
    sicdesc = models.CharField(db_column='SicDesc', max_length=80, verbose_name='SIC Description', blank=True)
    npe01_one2onecontact_c = models.ForeignKey('Contact', related_name='account_npe01one2onecontactc_set', db_column='npe01__One2OneContact__c', blank=True, null=True)
    npe01_systemisindividual_c = models.BooleanField(db_column='npe01__SYSTEMIsIndividual__c', verbose_name='_SYSTEM: IsIndividual')
    npe01_firstdonationdate_c = models.DateField(db_column='npe01__FirstDonationDate__c', verbose_name='First Donation Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_lastdonationdate_c = models.DateField(db_column='npe01__LastDonationDate__c', verbose_name='Last Donation Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_lifetimedonationhistory_amount_c = models.DecimalField(db_column='npe01__LifetimeDonationHistory_Amount__c', max_digits=18, decimal_places=2, verbose_name='Lifetime Donation History (Amount)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_lifetimedonationhistory_number_c = models.DecimalField(db_column='npe01__LifetimeDonationHistory_Number__c', max_digits=18, decimal_places=0, verbose_name='Lifetime Donation History (Number)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_system_accounttype_c = models.CharField(db_column='npe01__SYSTEM_AccountType__c', max_length=100, verbose_name='_SYSTEM: AccountType', help_text='System field: do not use or change.', blank=True)
    npo02_averageamount_c = models.DecimalField(db_column='npo02__AverageAmount__c', max_digits=16, decimal_places=2, verbose_name='Average Gift', blank=True, null=True)
    npo02_firstclosedate_c = models.DateField(db_column='npo02__FirstCloseDate__c', verbose_name='First Gift Date', blank=True, null=True)
    npo02_largestamount_c = models.DecimalField(db_column='npo02__LargestAmount__c', max_digits=16, decimal_places=2, verbose_name='Largest Gift', blank=True, null=True)
    npo02_lastclosedate_c = models.DateField(db_column='npo02__LastCloseDate__c', verbose_name='Last Gift Date', blank=True, null=True)
    npo02_lastmembershipamount_c = models.DecimalField(db_column='npo02__LastMembershipAmount__c', max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', blank=True, null=True)
    npo02_lastmembershipdate_c = models.DateField(db_column='npo02__LastMembershipDate__c', verbose_name='Last Membership Date', blank=True, null=True)
    npo02_lastmembershiplevel_c = models.CharField(db_column='npo02__LastMembershipLevel__c', max_length=255, verbose_name='Last Membership Level', blank=True)
    npo02_lastmembershiporigin_c = models.CharField(db_column='npo02__LastMembershipOrigin__c', max_length=255, verbose_name='Last Membership Origin', blank=True)
    npo02_lastoppamount_c = models.DecimalField(db_column='npo02__LastOppAmount__c', max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', blank=True, null=True)
    npo02_membershipenddate_c = models.DateField(db_column='npo02__MembershipEndDate__c', verbose_name='Membership End Date', blank=True, null=True)
    npo02_membershipjoindate_c = models.DateField(db_column='npo02__MembershipJoinDate__c', verbose_name='Membership Join Date', blank=True, null=True)
    npo02_numberofclosedopps_c = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', blank=True, null=True)
    npo02_numberofmembershipopps_c = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', max_digits=18, decimal_places=0, verbose_name='Number of Memberships', blank=True, null=True)
    npo02_oppamount2yearsago_c = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', blank=True, null=True)
    npo02_oppamountlastndays_c = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', blank=True, null=True)
    npo02_oppamountlastyear_c = models.DecimalField(db_column='npo02__OppAmountLastYear__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', blank=True, null=True)
    npo02_oppamountthisyear_c = models.DecimalField(db_column='npo02__OppAmountThisYear__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', blank=True, null=True)
    npo02_oppsclosed2yearsago_c = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', blank=True, null=True)
    npo02_oppsclosedlastndays_c = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', blank=True, null=True)
    npo02_oppsclosedlastyear_c = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', blank=True, null=True)
    npo02_oppsclosedthisyear_c = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', blank=True, null=True)
    npo02_smallestamount_c = models.DecimalField(db_column='npo02__SmallestAmount__c', max_digits=16, decimal_places=2, verbose_name='Smallest Gift', blank=True, null=True)
    npo02_totalmembershipoppamount_c = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', blank=True, null=True)
    npo02_totaloppamount_c = models.DecimalField(db_column='npo02__TotalOppAmount__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts', blank=True, null=True)
    bde_batch_c = models.ForeignKey('BdeBatchC', db_column='bde__Batch__c', blank=True, null=True)
    npo02_best_gift_year_total_c = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', blank=True, null=True)
    npo02_best_gift_year_c = models.CharField(db_column='npo02__Best_Gift_Year__c', max_length=4, verbose_name='Best Gift Year', blank=True)
    founding_date_c = models.DateField(db_column='Founding_Date__c', verbose_name='Founding Date', blank=True, null=True)
    category_c = models.CharField(db_column='Category__c', max_length=4099, verbose_name='Category', choices=[('Professional', 'Professional'), ('Community', 'Community'), ('Collegiate/University', 'Collegiate/University'), ('Youth', 'Youth'), ('Buddhist', 'Buddhist'), ('Classes', 'Classes'), ('Post-Collegiate', 'Post-Collegiate'), ('All Women', 'All Women')], blank=True)
    active_c = models.BooleanField(db_column='Active__c', verbose_name='Active')
    ending_date_c = models.DateField(db_column='Ending_Date__c', verbose_name='Ending Date', blank=True, null=True)
    email_c = models.EmailField(db_column='Email__c', verbose_name='Email', blank=True, null=True)
    non_us_country_c = models.CharField(db_column='Non_US_Country__c', max_length=1300, verbose_name='Non-US Country', sf_read_only=models.READ_ONLY, blank=True)
    charter_rollup_c = models.DecimalField(db_column='Charter_Rollup__c', max_digits=18, decimal_places=2, verbose_name='Charter Rollup', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Account'
        verbose_name = 'Account'
        verbose_name_plural = 'Accounts'
        # keyPrefix = '001'

class Accountcontactrole(models.Model):
    account = models.ForeignKey(Account, sf_read_only=models.NOT_UPDATEABLE, db_column='AccountId')
    contact = models.ForeignKey('Contact', db_column='ContactId')
    role = models.CharField(db_column='Role', max_length=40, verbose_name='Role', choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True)
    isprimary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='accountcontactrole_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='accountcontactrole_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AccountContactRole'
        verbose_name = 'Account Contact Role'
        verbose_name_plural = 'Account Contact Role'
        # keyPrefix = '02Z'

class Accountfeed(models.Model):
    parent = models.ForeignKey(Account, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='accountfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey('Contentversion', sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='accountfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AccountFeed'
        verbose_name = 'Account Feed'
        verbose_name_plural = 'Account Feed'
        # keyPrefix = 'None'

class Accounthistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    account = models.ForeignKey(Account, sf_read_only=models.READ_ONLY, db_column='AccountId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('accountMerged', 'Account Merged'), ('AccountNumber', None), ('AccountSource', None), ('Active__c', None), ('AnnualRevenue', None), ('bde__Batch__c', None), ('BillingAddress', None), ('BillingCity', None), ('BillingCountry', None), ('BillingLatitude', None), ('BillingLongitude', None), ('BillingPostalCode', None), ('BillingState', None), ('BillingStreet', None), ('Category__c', None), ('created', 'Created.'), ('accountCreatedFromLead', 'Created by lead convert'), ('Description', None), ('Email__c', None), ('Ending_Date__c', None), ('Fax', None), ('feedEvent', 'Feed event'), ('Founding_Date__c', None), ('Industry', None), ('Jigsaw', None), ('accountUpdatedByLead', 'Lead converted to Account'), ('personAccountUpdatedByLead', 'Lead converted to Person Account'), ('Name', None), ('npe01__One2OneContact__c', None), ('npe01__SYSTEM_AccountType__c', None), ('npe01__SYSTEMIsIndividual__c', None), ('npo02__AverageAmount__c', None), ('npo02__Best_Gift_Year__c', None), ('npo02__Best_Gift_Year_Total__c', None), ('npo02__FirstCloseDate__c', None), ('npo02__LargestAmount__c', None), ('npo02__LastCloseDate__c', None), ('npo02__LastMembershipAmount__c', None), ('npo02__LastMembershipDate__c', None), ('npo02__LastMembershipLevel__c', None), ('npo02__LastMembershipOrigin__c', None), ('npo02__LastOppAmount__c', None), ('npo02__MembershipEndDate__c', None), ('npo02__MembershipJoinDate__c', None), ('npo02__NumberOfClosedOpps__c', None), ('npo02__NumberOfMembershipOpps__c', None), ('npo02__OppAmount2YearsAgo__c', None), ('npo02__OppAmountLastNDays__c', None), ('npo02__OppAmountLastYear__c', None), ('npo02__OppAmountThisYear__c', None), ('npo02__OppsClosed2YearsAgo__c', None), ('npo02__OppsClosedLastNDays__c', None), ('npo02__OppsClosedLastYear__c', None), ('npo02__OppsClosedThisYear__c', None), ('npo02__SmallestAmount__c', None), ('npo02__TotalMembershipOppAmount__c', None), ('npo02__TotalOppAmount__c', None), ('NumberOfEmployees', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Ownership', None), ('Parent', None), ('Phone', None), ('Rating', None), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', None), ('ShippingCity', None), ('ShippingCountry', None), ('ShippingLatitude', None), ('ShippingLongitude', None), ('ShippingPostalCode', None), ('ShippingState', None), ('ShippingStreet', None), ('Sic', None), ('SicDesc', None), ('Site', None), ('TextName', None), ('TickerSymbol', None), ('Type', None), ('Website', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AccountHistory'
        verbose_name = 'Account History'
        verbose_name_plural = 'Account History'
        # keyPrefix = 'None'

class Accountpartner(models.Model):
    accountfrom = models.ForeignKey(Account, related_name='accountpartner_accountfrom_set', db_column='AccountFromId', sf_read_only=models.READ_ONLY)
    accountto = models.ForeignKey(Account, related_name='accountpartner_accountto_set', db_column='AccountToId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    opportunity = models.ForeignKey('Opportunity', sf_read_only=models.READ_ONLY, db_column='OpportunityId', blank=True, null=True)
    role = models.CharField(db_column='Role', max_length=40, verbose_name='Role', sf_read_only=models.READ_ONLY, choices=[('System Integrator', 'System Integrator'), ('Agency', 'Agency'), ('Advertiser', 'Advertiser'), ('VAR/Reseller', 'VAR/Reseller'), ('Distributor', 'Distributor'), ('Developer', 'Developer'), ('Broker', 'Broker'), ('Lender', 'Lender'), ('Supplier', 'Supplier'), ('Institution', 'Institution'), ('Contractor', 'Contractor'), ('Dealer', 'Dealer'), ('Consultant', 'Consultant')], blank=True)
    isprimary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='accountpartner_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='accountpartner_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    reversepartnerid = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='ReversePartnerId', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AccountPartner'
        verbose_name = 'Account Partner'
        verbose_name_plural = 'Account Partner'
        # keyPrefix = 'None'

class Accountshare(models.Model):
    account = models.ForeignKey(Account, sf_read_only=models.READ_ONLY, db_column='AccountId')
    userorgroupid = models.ForeignKey('Group', sf_read_only=models.READ_ONLY, db_column='UserOrGroupId')
    accountaccesslevel = models.CharField(db_column='AccountAccessLevel', max_length=40, verbose_name='Account Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    opportunityaccesslevel = models.CharField(db_column='OpportunityAccessLevel', max_length=40, verbose_name='Opportunity Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    caseaccesslevel = models.CharField(db_column='CaseAccessLevel', max_length=40, verbose_name='Case Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    contactaccesslevel = models.CharField(db_column='ContactAccessLevel', max_length=40, verbose_name='Contact Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True)
    rowcause = models.CharField(db_column='RowCause', max_length=40, verbose_name='Row Cause', sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule')])
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='LastModifiedById')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AccountShare'
        verbose_name = 'Account Share'
        verbose_name_plural = 'Account Share'
        # keyPrefix = '00r'

class Activityhistory(models.Model):
    account = models.ForeignKey(Account, sf_read_only=models.READ_ONLY, db_column='AccountId', blank=True, null=True)
    who = models.ForeignKey('Contact', sf_read_only=models.READ_ONLY, db_column='WhoId', blank=True, null=True)
    what = models.ForeignKey(Apxtconga4CongaEmailStagingC, sf_read_only=models.READ_ONLY, db_column='WhatId', blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=80, verbose_name='Subject', sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Email', 'Email'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True)
    istask = models.BooleanField(db_column='IsTask', verbose_name='Task', sf_read_only=models.READ_ONLY)
    activitydate = models.DateField(db_column='ActivityDate', verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', related_name='activityhistory_owner_set', db_column='OwnerId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Waiting on someone else', 'Waiting on someone else'), ('Deferred', 'Deferred')], blank=True)
    priority = models.CharField(db_column='Priority', max_length=40, verbose_name='Priority', sf_read_only=models.READ_ONLY, choices=[('High', 'High'), ('Normal', 'Normal'), ('Low', 'Low')], blank=True)
    activitytype = models.CharField(db_column='ActivityType', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True)
    isclosed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY)
    isalldayevent = models.BooleanField(db_column='IsAllDayEvent', verbose_name='All-Day Event', sf_read_only=models.READ_ONLY)
    durationinminutes = models.IntegerField(db_column='DurationInMinutes', verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(db_column='Location', max_length=80, verbose_name='Location', sf_read_only=models.READ_ONLY, blank=True)
    description = models.TextField(db_column='Description', verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='activityhistory_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='activityhistory_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    calldurationinseconds = models.IntegerField(db_column='CallDurationInSeconds', verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    calltype = models.CharField(db_column='CallType', max_length=40, verbose_name='Call Type', sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True)
    calldisposition = models.CharField(db_column='CallDisposition', max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True)
    callobject = models.CharField(db_column='CallObject', max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True)
    reminderdatetime = models.DateTimeField(db_column='ReminderDateTime', verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isreminderset = models.BooleanField(db_column='IsReminderSet', verbose_name='Reminder Set', sf_read_only=models.READ_ONLY)
    enddatetime = models.DateTimeField(db_column='EndDateTime', verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    startdatetime = models.DateTimeField(db_column='StartDateTime', verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ActivityHistory'
        verbose_name = 'Activity History'
        verbose_name_plural = 'Activity History'
        # keyPrefix = 'None'

class Additionalnumber(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    callcenterid = models.ForeignKey('Callcenter', db_column='CallCenterId', blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name')
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', blank=True)
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Phone', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='additionalnumber_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='additionalnumber_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AdditionalNumber'
        verbose_name = 'Additional Directory Number'
        verbose_name_plural = 'Additional Directory Numbers'
        # keyPrefix = '04m'

class Aggregateresult(models.Model):
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AggregateResult'
        verbose_name = 'Aggregate Result'
        verbose_name_plural = 'Aggregate Result'
        # keyPrefix = 'None'

class Apexclass(models.Model):
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Name')
    apiversion = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1, verbose_name='Api Version')
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Deleted', 'Deleted')])
    isvalid = models.BooleanField(db_column='IsValid', verbose_name='Is Valid')
    bodycrc = models.DecimalField(db_column='BodyCrc', max_digits=18, decimal_places=0, verbose_name='Body CRC', blank=True, null=True)
    body = models.TextField(db_column='Body', verbose_name='Body', blank=True)
    lengthwithoutcomments = models.IntegerField(db_column='LengthWithoutComments', verbose_name='Size Without Comments')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='apexclass_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='apexclass_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ApexClass'
        verbose_name = 'Apex Class'
        verbose_name_plural = 'Apex Classes'
        # keyPrefix = '01p'

class Apexcomponent(models.Model):
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name')
    apiversion = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1, verbose_name='Api Version')
    masterlabel = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    controllertype = models.CharField(db_column='ControllerType', max_length=40, verbose_name='Controller Type', choices=[('0', 'Not Specified'), ('1', 'Standard'), ('4', 'Standard Set'), ('2', 'Custom'), ('3', 'Java'), ('5', 'Spring')])
    controllerkey = models.CharField(db_column='ControllerKey', max_length=255, verbose_name='Controller Key', blank=True)
    markup = models.TextField(db_column='Markup', verbose_name='Markup')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='apexcomponent_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='apexcomponent_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ApexComponent'
        verbose_name = 'Visualforce Component'
        verbose_name_plural = 'Visualforce Components'
        # keyPrefix = '099'

class Apexlog(models.Model):
    loguser = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='LogUserId', blank=True, null=True)
    loglength = models.IntegerField(db_column='LogLength', verbose_name='Log Size (bytes)', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Date', sf_read_only=models.READ_ONLY)
    request = models.CharField(db_column='Request', max_length=16, verbose_name='Request Type', sf_read_only=models.READ_ONLY)
    operation = models.CharField(db_column='Operation', max_length=128, verbose_name='Operation', sf_read_only=models.READ_ONLY)
    application = models.CharField(db_column='Application', max_length=64, verbose_name='Application', sf_read_only=models.READ_ONLY)
    status = models.CharField(db_column='Status', max_length=255, verbose_name='Status', sf_read_only=models.READ_ONLY)
    durationmilliseconds = models.IntegerField(db_column='DurationMilliseconds', verbose_name='Duration (ms)', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    starttime = models.DateTimeField(db_column='StartTime', verbose_name='Start Time', sf_read_only=models.READ_ONLY)
    location = models.CharField(db_column='Location', max_length=40, verbose_name='Location', sf_read_only=models.READ_ONLY, choices=[('Monitoring', None), ('SystemLog', None), ('HeapDump', None), ('Preserved', None)], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ApexLog'
        verbose_name = 'Apex Debug Log'
        verbose_name_plural = 'Apex Debug Log'
        # keyPrefix = '07L'

class Apexpage(models.Model):
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name')
    apiversion = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1, verbose_name='Api Version')
    masterlabel = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    controllertype = models.CharField(db_column='ControllerType', max_length=40, verbose_name='Controller Type', choices=[('0', 'Not Specified'), ('1', 'Standard'), ('4', 'Standard Set'), ('2', 'Custom'), ('3', 'Java'), ('5', 'Spring')])
    controllerkey = models.CharField(db_column='ControllerKey', max_length=255, verbose_name='Controller Key', blank=True)
    isavailableintouch = models.BooleanField(db_column='IsAvailableInTouch', verbose_name='Available for Salesforce mobile apps')
    isconfirmationtokenrequired = models.BooleanField(db_column='IsConfirmationTokenRequired', verbose_name='Require CSRF protection on GET requests')
    markup = models.TextField(db_column='Markup', verbose_name='Markup')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='apexpage_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='apexpage_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ApexPage'
        verbose_name = 'Visualforce Page'
        verbose_name_plural = 'Visualforce Pages'
        # keyPrefix = '066'

class Apextestqueueitem(models.Model):
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    apexclass = models.ForeignKey(Apexclass, sf_read_only=models.NOT_UPDATEABLE, db_column='ApexClassId')
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', sf_read_only=models.NOT_CREATEABLE, choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    extendedstatus = models.CharField(db_column='ExtendedStatus', max_length=1000, verbose_name='Status Detail', sf_read_only=models.READ_ONLY, blank=True)
    parentjobid = models.ForeignKey('Asyncapexjob', sf_read_only=models.READ_ONLY, db_column='ParentJobId', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ApexTestQueueItem'
        verbose_name = 'Apex Test Queue Item'
        verbose_name_plural = 'Apex Test Queue Items'
        # keyPrefix = '709'

class Apextestresult(models.Model):
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    testtimestamp = models.DateTimeField(db_column='TestTimestamp', verbose_name='Time Started', sf_read_only=models.READ_ONLY)
    outcome = models.CharField(db_column='Outcome', max_length=40, verbose_name='Pass/Fail', sf_read_only=models.READ_ONLY, choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('CompileFail', 'CompileFail'), ('Skip', 'Skip')])
    apexclass = models.ForeignKey(Apexclass, sf_read_only=models.READ_ONLY, db_column='ApexClassId')
    methodname = models.CharField(db_column='MethodName', max_length=255, verbose_name='Method Name', sf_read_only=models.READ_ONLY, blank=True)
    message = models.CharField(db_column='Message', max_length=4000, verbose_name='Error Message', sf_read_only=models.READ_ONLY, blank=True)
    stacktrace = models.CharField(db_column='StackTrace', max_length=4000, verbose_name='Stack Trace', sf_read_only=models.READ_ONLY, blank=True)
    asyncapexjob = models.ForeignKey('Asyncapexjob', sf_read_only=models.READ_ONLY, db_column='AsyncApexJobId', blank=True, null=True)
    queueitem = models.ForeignKey(Apextestqueueitem, sf_read_only=models.READ_ONLY, db_column='QueueItemId', blank=True, null=True)
    apexlog = models.ForeignKey(Apexlog, sf_read_only=models.READ_ONLY, db_column='ApexLogId', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ApexTestResult'
        verbose_name = 'Apex Test Result'
        verbose_name_plural = 'Apex Test Results'
        # keyPrefix = '07M'

class Apextrigger(models.Model):
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Name')
    tableenumorid = models.CharField(db_column='TableEnumOrId', max_length=40, verbose_name='Custom Object Definition ID', choices=[('Account', None), ('Asset', None), ('Attachment', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('CaseComment', None), ('CollaborationGroup', None), ('CollaborationGroupMember', None), ('Contact', None), ('ContentDocument', None), ('ContentVersion', None), ('Contract', None), ('Event', None), ('FeedComment', None), ('FeedItem', None), ('Idea', None), ('IdeaComment', None), ('Lead', None), ('Note', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Partner', None), ('Pricebook2', None), ('Product2', None), ('SocialPersona', None), ('Solution', None), ('Task', None), ('Topic', None), ('TopicAssignment', None), ('User', None)], blank=True)
    usagebeforeinsert = models.BooleanField(db_column='UsageBeforeInsert', verbose_name='BeforeInsert')
    usageafterinsert = models.BooleanField(db_column='UsageAfterInsert', verbose_name='AfterInsert')
    usagebeforeupdate = models.BooleanField(db_column='UsageBeforeUpdate', verbose_name='BeforeUpdate')
    usageafterupdate = models.BooleanField(db_column='UsageAfterUpdate', verbose_name='AfterUpdate')
    usagebeforedelete = models.BooleanField(db_column='UsageBeforeDelete', verbose_name='BeforeDelete')
    usageafterdelete = models.BooleanField(db_column='UsageAfterDelete', verbose_name='AfterDelete')
    usageisbulk = models.BooleanField(db_column='UsageIsBulk', verbose_name='IsBulk')
    usageafterundelete = models.BooleanField(db_column='UsageAfterUndelete', verbose_name='AfterUndelete')
    apiversion = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1, verbose_name='Api Version')
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('Inactive', 'Inactive'), ('Active', 'Active'), ('Deleted', 'Deleted')])
    isvalid = models.BooleanField(db_column='IsValid', verbose_name='Is Valid')
    bodycrc = models.DecimalField(db_column='BodyCrc', max_digits=18, decimal_places=0, verbose_name='Body CRC', blank=True, null=True)
    body = models.TextField(db_column='Body', verbose_name='Body', blank=True)
    lengthwithoutcomments = models.IntegerField(db_column='LengthWithoutComments', verbose_name='Size Without Comments')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='apextrigger_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='apextrigger_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ApexTrigger'
        verbose_name = 'Apex Trigger'
        verbose_name_plural = 'Apex Triggers'
        # keyPrefix = '01q'

class Appmenuitem(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='appmenuitem_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='appmenuitem_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Developer Name', sf_read_only=models.READ_ONLY, blank=True)
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=80, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    label = models.CharField(db_column='Label', max_length=250, verbose_name='Label', sf_read_only=models.READ_ONLY, blank=True)
    description = models.CharField(db_column='Description', max_length=250, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True)
    starturl = models.URLField(db_column='StartUrl', verbose_name='Start Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobilestarturl = models.URLField(db_column='MobileStartUrl', verbose_name='Mobile Start Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    logourl = models.URLField(db_column='LogoUrl', verbose_name='Logo Image URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    iconurl = models.URLField(db_column='IconUrl', verbose_name='Icon Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    infourl = models.URLField(db_column='InfoUrl', verbose_name='Info URL', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isusingadminauthorization = models.BooleanField(db_column='IsUsingAdminAuthorization', verbose_name='IsUsingAdminAuthorization', sf_read_only=models.READ_ONLY)
    mobileplatform = models.CharField(db_column='MobilePlatform', max_length=255, verbose_name='Mobile device OS platform', sf_read_only=models.READ_ONLY, choices=[('ios', 'iOS'), ('android', 'Android')], blank=True)
    mobileminosver = models.CharField(db_column='MobileMinOsVer', max_length=255, verbose_name='Minimum required mobile device OS version', sf_read_only=models.READ_ONLY, blank=True)
    mobiledevicetype = models.CharField(db_column='MobileDeviceType', max_length=255, verbose_name='Type of mobile device', sf_read_only=models.READ_ONLY, blank=True)
    isregistereddeviceonly = models.BooleanField(db_column='IsRegisteredDeviceOnly', verbose_name='App requires a registered mobile device', sf_read_only=models.READ_ONLY)
    mobileappver = models.CharField(db_column='MobileAppVer', max_length=255, verbose_name='Version of the mobile app', sf_read_only=models.READ_ONLY, blank=True)
    mobileappinstalleddate = models.DateTimeField(db_column='MobileAppInstalledDate', verbose_name='Date the mobile app was most recently installed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mobileappinstalledversion = models.CharField(db_column='MobileAppInstalledVersion', max_length=255, verbose_name='Most recently installed version of the mobile app', sf_read_only=models.READ_ONLY, blank=True)
    mobileappbinaryid = models.CharField(db_column='MobileAppBinaryId', max_length=255, verbose_name='ID for the related mobile app binary', sf_read_only=models.READ_ONLY, blank=True)
    mobileappinstallurl = models.URLField(db_column='MobileAppInstallUrl', verbose_name='URL to install the mobile app', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=255, verbose_name='App Type', sf_read_only=models.READ_ONLY, choices=[('ConnectedApplication', None), ('ServiceProvider', None), ('TabSet', None)], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AppMenuItem'
        verbose_name = 'AppMenuItem'
        verbose_name_plural = 'AppMenuItems'
        # keyPrefix = '0DS'

class Approval(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('Contract', sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    owner = models.ForeignKey('User', related_name='approval_owner_set', db_column='OwnerId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='approval_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='approval_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')])
    requestcomment = models.CharField(db_column='RequestComment', max_length=4000, verbose_name='Request Comment', blank=True)
    approvecomment = models.CharField(db_column='ApproveComment', max_length=4000, verbose_name='Approve/Reject Comment', blank=True)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Approval'
        verbose_name = 'Approval'
        verbose_name_plural = 'Approval'
        # keyPrefix = '806'

class Asset(models.Model):
    contact = models.ForeignKey('Contact', db_column='ContactId', blank=True, null=True)
    account = models.ForeignKey(Account, db_column='AccountId', blank=True, null=True)
    product2 = models.ForeignKey('Product2', db_column='Product2Id', blank=True, null=True)
    iscompetitorproduct = models.BooleanField(db_column='IsCompetitorProduct', verbose_name='Competitor Asset')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='asset_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='asset_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Asset Name')
    serialnumber = models.CharField(db_column='SerialNumber', max_length=80, verbose_name='Serial Number', blank=True)
    installdate = models.DateField(db_column='InstallDate', verbose_name='Install Date', blank=True, null=True)
    purchasedate = models.DateField(db_column='PurchaseDate', verbose_name='Purchase Date', blank=True, null=True)
    usageenddate = models.DateField(db_column='UsageEndDate', verbose_name='Usage End Date', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('Shipped', 'Shipped'), ('Installed', 'Installed'), ('Registered', 'Registered'), ('Obsolete', 'Obsolete'), ('Purchased', 'Purchased')], blank=True)
    price = models.DecimalField(db_column='Price', max_digits=18, decimal_places=0, verbose_name='Price', blank=True, null=True)
    quantity = models.DecimalField(db_column='Quantity', max_digits=12, decimal_places=2, verbose_name='Quantity', blank=True, null=True)
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Asset'
        verbose_name = 'Asset'
        verbose_name_plural = 'Assets'
        # keyPrefix = '02i'

class Assetfeed(models.Model):
    parent = models.ForeignKey(Asset, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='assetfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey('Contentversion', sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='assetfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AssetFeed'
        verbose_name = 'Asset Feed'
        verbose_name_plural = 'Asset Feed'
        # keyPrefix = 'None'

class Assignmentrule(models.Model):
    name = models.CharField(db_column='Name', max_length=120, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True)
    sobjecttype = models.CharField(db_column='SobjectType', max_length=40, verbose_name='SObject Type', sf_read_only=models.READ_ONLY, choices=[('Case', None), ('Lead', None)], blank=True)
    active = models.BooleanField(db_column='Active', verbose_name='Active', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='assignmentrule_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='assignmentrule_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AssignmentRule'
        verbose_name = 'Assignment Rule'
        verbose_name_plural = 'Assignment Rules'
        # keyPrefix = '01Q'

class Asyncapexjob(models.Model):
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    jobtype = models.CharField(db_column='JobType', max_length=40, verbose_name='Job Type', sf_read_only=models.READ_ONLY, choices=[('Future', 'Future'), ('SharingRecalculation', 'Sharing Recalculation'), ('ScheduledApex', 'Scheduled Apex'), ('BatchApex', 'Batch Apex'), ('BatchApexWorker', 'Batch Apex Worker'), ('TestRequest', 'Test Request'), ('TestWorker', 'Test Worker'), ('ApexToken', 'Apex Token')])
    apexclass = models.ForeignKey(Apexclass, sf_read_only=models.READ_ONLY, db_column='ApexClassId', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Queued', 'Queued'), ('Processing', 'Processing'), ('Aborted', 'Aborted'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Preparing', 'Preparing'), ('Holding', 'Holding')])
    jobitemsprocessed = models.IntegerField(db_column='JobItemsProcessed', verbose_name='Batches Processed', sf_read_only=models.READ_ONLY)
    totaljobitems = models.IntegerField(db_column='TotalJobItems', verbose_name='Total Batches', sf_read_only=models.READ_ONLY, blank=True, null=True)
    numberoferrors = models.IntegerField(db_column='NumberOfErrors', verbose_name='Failures', sf_read_only=models.READ_ONLY, blank=True, null=True)
    completeddate = models.DateTimeField(db_column='CompletedDate', verbose_name='Completion Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    methodname = models.CharField(db_column='MethodName', max_length=255, verbose_name='Apex Method', sf_read_only=models.READ_ONLY, blank=True)
    extendedstatus = models.CharField(db_column='ExtendedStatus', max_length=255, verbose_name='Status Detail', sf_read_only=models.READ_ONLY, blank=True)
    parentjobid = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='ParentJobId', blank=True, null=True)
    lastprocessed = models.CharField(db_column='LastProcessed', max_length=15, verbose_name='Last ID processed and committed', sf_read_only=models.READ_ONLY, blank=True)
    lastprocessedoffset = models.IntegerField(db_column='LastProcessedOffset', verbose_name='Offset of last ID processed and committed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AsyncApexJob'
        verbose_name = 'Apex Job'
        verbose_name_plural = 'Apex Jobs'
        # keyPrefix = '707'

class Attachedcontentdocument(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    linkedentity = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.READ_ONLY, db_column='LinkedEntityId')
    contentdocument = models.ForeignKey('Contentdocument', sf_read_only=models.READ_ONLY, db_column='ContentDocumentId', blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='attachedcontentdocument_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='attachedcontentdocument_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AttachedContentDocument'
        verbose_name = 'Attached Content Document'
        verbose_name_plural = 'Attached Content Documents'
        # keyPrefix = 'None'

class Attachment(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(Apxtconga4CongaEmailStagingC, sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    name = models.CharField(db_column='Name', max_length=255, verbose_name='File Name')
    isprivate = models.BooleanField(db_column='IsPrivate', verbose_name='Private')
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content Type', blank=True)
    bodylength = models.IntegerField(db_column='BodyLength', verbose_name='Body Length', sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', verbose_name='Body')
    owner = models.ForeignKey('User', db_column='OwnerId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('Selfserviceuser', related_name='attachment_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('Selfserviceuser', related_name='attachment_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Attachment'
        verbose_name = 'Attachment'
        verbose_name_plural = 'Attachments'
        # keyPrefix = '00P'

class Authprovider(models.Model):
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    providertype = models.CharField(db_column='ProviderType', max_length=40, verbose_name='Provider Type', choices=[('Facebook', 'Facebook'), ('Janrain', 'Janrain'), ('Salesforce', 'Salesforce'), ('OpenIdConnect', 'Open ID Connect')])
    friendlyname = models.CharField(db_column='FriendlyName', max_length=32, verbose_name='Name')
    developername = models.CharField(db_column='DeveloperName', max_length=32, verbose_name='URL Suffix')
    registrationhandlerid = models.ForeignKey(Apexclass, db_column='RegistrationHandlerId', blank=True, null=True)
    executionuserid = models.ForeignKey('User', db_column='ExecutionUserId', blank=True, null=True)
    consumerkey = models.CharField(db_column='ConsumerKey', max_length=256, verbose_name='Consumer Key', blank=True)
    consumersecret = models.CharField(db_column='ConsumerSecret', max_length=100, verbose_name='Consumer Secret', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    errorurl = models.CharField(db_column='ErrorUrl', max_length=500, verbose_name='Custom Error URL', blank=True)
    authorizeurl = models.URLField(db_column='AuthorizeUrl', verbose_name='Authorize Endpoint URL', blank=True, null=True)
    tokenurl = models.URLField(db_column='TokenUrl', verbose_name='Token Endpoint URL', blank=True, null=True)
    userinfourl = models.URLField(db_column='UserInfoUrl', verbose_name='User Info Endpoint URL', blank=True, null=True)
    defaultscopes = models.CharField(db_column='DefaultScopes', max_length=256, verbose_name='Default Scopes', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AuthProvider'
        verbose_name = 'Auth. Provider'
        verbose_name_plural = 'Auth. Providers'
        # keyPrefix = '0SO'

class Authsession(models.Model):
    users = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='UsersId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Updated', sf_read_only=models.READ_ONLY)
    numsecondsvalid = models.IntegerField(db_column='NumSecondsValid', verbose_name='Valid For', sf_read_only=models.READ_ONLY)
    usertype = models.CharField(db_column='UserType', max_length=40, verbose_name='User Type', sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')])
    sourceip = models.CharField(db_column='SourceIp', max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY)
    logintype = models.CharField(db_column='LoginType', max_length=1, verbose_name='Login', sf_read_only=models.READ_ONLY, blank=True)
    sessiontype = models.CharField(db_column='SessionType', max_length=40, verbose_name='Session Type', sf_read_only=models.READ_ONLY, blank=True)
    sessionsecuritylevel = models.CharField(db_column='SessionSecurityLevel', max_length=40, verbose_name='Session Security Level', sf_read_only=models.READ_ONLY, choices=[('LOW', None), ('STANDARD', None), ('HIGH_ASSURANCE', None)], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'AuthSession'
        verbose_name = 'Auth Session'
        verbose_name_plural = 'Auth Sessions'
        # keyPrefix = '0Ak'

class Brandtemplate(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Brand Template Name')
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Letterhead Unique Name')
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active')
    description = models.CharField(db_column='Description', max_length=1000, verbose_name='Description', blank=True)
    value = models.TextField(db_column='Value', verbose_name='Value')
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='brandtemplate_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='brandtemplate_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'BrandTemplate'
        verbose_name = 'Letterhead'
        verbose_name_plural = 'Letterheads'
        # keyPrefix = '016'

class Businesshours(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Business Hours Name')
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active')
    isdefault = models.BooleanField(db_column='IsDefault', verbose_name='Default Business Hours')
    sundaystarttime = models.TimeField(db_column='SundayStartTime', verbose_name='Sunday Start', blank=True, null=True)
    sundayendtime = models.TimeField(db_column='SundayEndTime', verbose_name='Sunday End', blank=True, null=True)
    mondaystarttime = models.TimeField(db_column='MondayStartTime', verbose_name='Monday Start', blank=True, null=True)
    mondayendtime = models.TimeField(db_column='MondayEndTime', verbose_name='Monday End', blank=True, null=True)
    tuesdaystarttime = models.TimeField(db_column='TuesdayStartTime', verbose_name='Tuesday Start', blank=True, null=True)
    tuesdayendtime = models.TimeField(db_column='TuesdayEndTime', verbose_name='Tuesday End', blank=True, null=True)
    wednesdaystarttime = models.TimeField(db_column='WednesdayStartTime', verbose_name='Wednesday Start', blank=True, null=True)
    wednesdayendtime = models.TimeField(db_column='WednesdayEndTime', verbose_name='Wednesday End', blank=True, null=True)
    thursdaystarttime = models.TimeField(db_column='ThursdayStartTime', verbose_name='Thursday Start', blank=True, null=True)
    thursdayendtime = models.TimeField(db_column='ThursdayEndTime', verbose_name='Thursday End', blank=True, null=True)
    fridaystarttime = models.TimeField(db_column='FridayStartTime', verbose_name='Friday Start', blank=True, null=True)
    fridayendtime = models.TimeField(db_column='FridayEndTime', verbose_name='Friday End', blank=True, null=True)
    saturdaystarttime = models.TimeField(db_column='SaturdayStartTime', verbose_name='Saturday Start', blank=True, null=True)
    saturdayendtime = models.TimeField(db_column='SaturdayEndTime', verbose_name='Saturday End', blank=True, null=True)
    timezonesidkey = models.CharField(db_column='TimeZoneSidKey', max_length=40, verbose_name='Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Magadan Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Norfolk', '(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Yekaterinburg', '(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Baku', '(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Europe/Moscow', '(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Time (America/Santiago)'), ('America/Caracas', '(GMT-04:30) Venezuela Time (America/Caracas)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='businesshours_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='businesshours_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'BusinessHours'
        verbose_name = 'Business Hours'
        verbose_name_plural = 'Business Hours'
        # keyPrefix = '01m'

class Businessprocess(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name')
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', blank=True)
    tableenumorid = models.CharField(db_column='TableEnumOrId', max_length=40, verbose_name='Entity Enumeration Or ID', sf_read_only=models.NOT_UPDATEABLE, choices=[('Case', None), ('Lead', None), ('Opportunity', None), ('Solution', None)])
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.NOT_CREATEABLE)
    createdby = models.ForeignKey('User', related_name='businessprocess_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='businessprocess_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'BusinessProcess'
        verbose_name = 'Business Process'
        verbose_name_plural = 'Business Process'
        # keyPrefix = '019'

class Callcenter(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Name', sf_read_only=models.NOT_UPDATEABLE)
    internalname = models.CharField(db_column='InternalName', max_length=240, verbose_name='Internal Name', sf_read_only=models.NOT_UPDATEABLE)
    version = models.DecimalField(db_column='Version', max_digits=18, decimal_places=3, verbose_name='Version', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    adapterurl = models.CharField(db_column='AdapterUrl', max_length=2000, verbose_name='CTI Adapter URL', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    customsettings = models.CharField(db_column='CustomSettings', max_length=3000, verbose_name='Custom Settings', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='callcenter_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='callcenter_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CallCenter'
        verbose_name = 'Call Center'
        verbose_name_plural = 'Call Centers'
        # keyPrefix = '04v'

class Campaign(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='ParentId', blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Conference', 'Conference'), ('Webinar', 'Webinar'), ('Trade Show', 'Trade Show'), ('Public Relations', 'Public Relations'), ('Partners', 'Partners'), ('Referral Program', 'Referral Program'), ('Advertisement', 'Advertisement'), ('Banner Ads', 'Banner Ads'), ('Direct Mail', 'Direct Mail'), ('Email', 'Email'), ('Telemarketing', 'Telemarketing'), ('Other', 'Other')], blank=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Planned', 'Planned'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Aborted', 'Aborted')], blank=True)
    startdate = models.DateField(db_column='StartDate', verbose_name='Start Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    enddate = models.DateField(db_column='EndDate', verbose_name='End Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    expectedrevenue = models.DecimalField(db_column='ExpectedRevenue', max_digits=18, decimal_places=0, verbose_name='Expected Revenue', sf_read_only=models.READ_ONLY, blank=True, null=True)
    budgetedcost = models.DecimalField(db_column='BudgetedCost', max_digits=18, decimal_places=0, verbose_name='Budgeted Cost', sf_read_only=models.READ_ONLY, blank=True, null=True)
    actualcost = models.DecimalField(db_column='ActualCost', max_digits=18, decimal_places=0, verbose_name='Actual Cost', sf_read_only=models.READ_ONLY, blank=True, null=True)
    expectedresponse = models.DecimalField(db_column='ExpectedResponse', max_digits=10, decimal_places=2, verbose_name='Expected Response (%)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    numbersent = models.DecimalField(db_column='NumberSent', max_digits=18, decimal_places=0, verbose_name='Num Sent', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True)
    numberofleads = models.IntegerField(db_column='NumberOfLeads', verbose_name='Total Leads', sf_read_only=models.READ_ONLY)
    numberofconvertedleads = models.IntegerField(db_column='NumberOfConvertedLeads', verbose_name='Converted Leads', sf_read_only=models.READ_ONLY)
    numberofcontacts = models.IntegerField(db_column='NumberOfContacts', verbose_name='Total Contacts', sf_read_only=models.READ_ONLY)
    numberofresponses = models.IntegerField(db_column='NumberOfResponses', verbose_name='Total Responses', sf_read_only=models.READ_ONLY)
    numberofopportunities = models.IntegerField(db_column='NumberOfOpportunities', verbose_name='Num Total Opportunities', sf_read_only=models.READ_ONLY)
    numberofwonopportunities = models.IntegerField(db_column='NumberOfWonOpportunities', verbose_name='Num Won Opportunities', sf_read_only=models.READ_ONLY)
    amountallopportunities = models.DecimalField(db_column='AmountAllOpportunities', max_digits=18, decimal_places=0, verbose_name='Total Value Opportunities', sf_read_only=models.READ_ONLY)
    amountwonopportunities = models.DecimalField(db_column='AmountWonOpportunities', max_digits=18, decimal_places=0, verbose_name='Total Value Won Opportunities', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', related_name='campaign_owner_set', db_column='OwnerId', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='campaign_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='campaign_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    campaignmemberrecordtypeid = models.ForeignKey('Recordtype', sf_read_only=models.READ_ONLY, db_column='CampaignMemberRecordTypeId', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Campaign'
        verbose_name = 'Campaign'
        verbose_name_plural = 'Campaigns'
        # keyPrefix = '701'

class Campaignfeed(models.Model):
    parent = models.ForeignKey(Campaign, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='campaignfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey('Contentversion', sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='campaignfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CampaignFeed'
        verbose_name = 'Campaign Feed'
        verbose_name_plural = 'Campaign Feed'
        # keyPrefix = 'None'

class Campaignmember(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    campaign = models.ForeignKey(Campaign, sf_read_only=models.NOT_UPDATEABLE, db_column='CampaignId')
    lead = models.ForeignKey('Lead', sf_read_only=models.NOT_UPDATEABLE, db_column='LeadId', blank=True, null=True)
    contact = models.ForeignKey('Contact', sf_read_only=models.NOT_UPDATEABLE, db_column='ContactId', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('Planned', 'Planned'), ('Received', 'Received'), ('Responded', 'Responded'), ('Sent', 'Sent')], blank=True)
    hasresponded = models.BooleanField(db_column='HasResponded', verbose_name='Responded', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='campaignmember_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='campaignmember_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    firstrespondeddate = models.DateField(db_column='FirstRespondedDate', verbose_name='First Responded Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CampaignMember'
        verbose_name = 'Campaign Member'
        verbose_name_plural = 'Campaign Members'
        # keyPrefix = '00v'

class Campaignmemberstatus(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    campaignid = models.ForeignKey(Campaign, sf_read_only=models.READ_ONLY, db_column='CampaignId')
    label = models.CharField(db_column='Label', max_length=765, verbose_name='Label', sf_read_only=models.READ_ONLY)
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY)
    isdefault = models.BooleanField(db_column='IsDefault', verbose_name='Is Default', sf_read_only=models.READ_ONLY)
    hasresponded = models.BooleanField(db_column='HasResponded', verbose_name='Responded', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='campaignmemberstatus_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='campaignmemberstatus_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CampaignMemberStatus'
        verbose_name = 'Campaign Member Status'
        verbose_name_plural = 'Campaign Member Status'
        # keyPrefix = '01Y'

class Campaignshare(models.Model):
    campaign = models.ForeignKey(Campaign, sf_read_only=models.READ_ONLY, db_column='CampaignId')
    userorgroupid = models.ForeignKey('Group', sf_read_only=models.READ_ONLY, db_column='UserOrGroupId')
    campaignaccesslevel = models.CharField(db_column='CampaignAccessLevel', max_length=40, verbose_name='Campaign Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    rowcause = models.CharField(db_column='RowCause', max_length=40, verbose_name='Row Cause', sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule')])
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='LastModifiedById')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CampaignShare'
        verbose_name = 'Campaign Share'
        verbose_name_plural = 'Campaign Share'
        # keyPrefix = '08s'

class Case(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    casenumber = models.CharField(db_column='CaseNumber', max_length=30, verbose_name='Case Number', sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey('Contact', db_column='ContactId', blank=True, null=True)
    account = models.ForeignKey(Account, db_column='AccountId', blank=True, null=True)
    asset = models.ForeignKey(Asset, db_column='AssetId', blank=True, null=True)
    parent = models.ForeignKey('self', db_column='ParentId', blank=True, null=True)
    suppliedname = models.CharField(db_column='SuppliedName', max_length=80, verbose_name='Name', blank=True)
    suppliedemail = models.EmailField(db_column='SuppliedEmail', verbose_name='Email Address', blank=True, null=True)
    suppliedphone = models.CharField(db_column='SuppliedPhone', max_length=40, verbose_name='Phone', blank=True)
    suppliedcompany = models.CharField(db_column='SuppliedCompany', max_length=80, verbose_name='Company', blank=True)
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Case Type', choices=[('Mechanical', 'Mechanical'), ('Electrical', 'Electrical'), ('Electronic', 'Electronic'), ('Structural', 'Structural'), ('Other', 'Other')], blank=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('New', 'New'), ('Working', 'Working'), ('Escalated', 'Escalated'), ('Closed', 'Closed')], blank=True)
    reason = models.CharField(db_column='Reason', max_length=40, verbose_name='Case Reason', choices=[('Installation', 'Installation'), ('Equipment Complexity', 'Equipment Complexity'), ('Performance', 'Performance'), ('Breakdown', 'Breakdown'), ('Equipment Design', 'Equipment Design'), ('Feedback', 'Feedback'), ('Other', 'Other')], blank=True)
    origin = models.CharField(db_column='Origin', max_length=40, verbose_name='Case Origin', choices=[('Phone', 'Phone'), ('Email', 'Email'), ('Web', 'Web')], blank=True)
    subject = models.CharField(db_column='Subject', max_length=255, verbose_name='Subject', blank=True)
    priority = models.CharField(db_column='Priority', max_length=40, verbose_name='Priority', choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], blank=True)
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    isclosed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY)
    closeddate = models.DateTimeField(db_column='ClosedDate', verbose_name='Closed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isescalated = models.BooleanField(db_column='IsEscalated', verbose_name='Escalated')
    hascommentsunreadbyowner = models.BooleanField(db_column='HasCommentsUnreadByOwner', verbose_name='New Self-Service Comment', sf_read_only=models.READ_ONLY)
    hasselfservicecomments = models.BooleanField(db_column='HasSelfServiceComments', verbose_name='Self-Service Commented', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('Group', db_column='OwnerId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='case_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='case_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Case'
        verbose_name = 'Case'
        verbose_name_plural = 'Cases'
        # keyPrefix = '500'

class Casecomment(models.Model):
    parent = models.ForeignKey(Case, sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    ispublished = models.BooleanField(db_column='IsPublished', verbose_name='Published')
    commentbody = models.TextField(db_column='CommentBody', verbose_name='Body', blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='casecomment_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('Selfserviceuser', related_name='casecomment_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseComment'
        verbose_name = 'Case Comment'
        verbose_name_plural = 'Case Comments'
        # keyPrefix = '00a'

class Casecontactrole(models.Model):
    cases = models.ForeignKey(Case, sf_read_only=models.NOT_UPDATEABLE, db_column='CasesId')
    contact = models.ForeignKey('Contact', db_column='ContactId')
    role = models.CharField(db_column='Role', max_length=40, verbose_name='Role', choices=[('Technical Contact', 'Technical Contact'), ('Business Contact', 'Business Contact'), ('Decision Maker', 'Decision Maker'), ('Other', 'Other')], blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='casecontactrole_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='casecontactrole_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseContactRole'
        verbose_name = 'Case Contact Role'
        verbose_name_plural = 'Case Contact Role'
        # keyPrefix = '03j'

class Casefeed(models.Model):
    parent = models.ForeignKey(Case, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='casefeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey('Contentversion', sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='casefeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseFeed'
        verbose_name = 'Case Feed'
        verbose_name_plural = 'Case Feed'
        # keyPrefix = 'None'

class Casehistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    case = models.ForeignKey(Case, sf_read_only=models.READ_ONLY, db_column='CaseId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Asset', None), ('BusinessHours', None), ('closed', 'Closed.'), ('Contact', None), ('created', 'Created.'), ('Description', None), ('feedEvent', 'Feed event'), ('IsClosedOnCreate', None), ('IsEscalated', None), ('IsSelfServiceClosed', None), ('IsVisibleInSelfService', None), ('Origin', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('ownerEscalated', 'Owner (Escalation)'), ('Parent', None), ('Priority', None), ('Reason', None), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Status', None), ('Subject', None), ('Type', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseHistory'
        verbose_name = 'Case History'
        verbose_name_plural = 'Case History'
        # keyPrefix = 'None'

class Caseshare(models.Model):
    case = models.ForeignKey(Case, sf_read_only=models.READ_ONLY, db_column='CaseId')
    userorgroupid = models.ForeignKey('Group', sf_read_only=models.READ_ONLY, db_column='UserOrGroupId')
    caseaccesslevel = models.CharField(db_column='CaseAccessLevel', max_length=40, verbose_name='Case Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    rowcause = models.CharField(db_column='RowCause', max_length=40, verbose_name='Row Cause', sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule')])
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='LastModifiedById')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseShare'
        verbose_name = 'Case Share'
        verbose_name_plural = 'Case Share'
        # keyPrefix = '01n'

class Casesolution(models.Model):
    case = models.ForeignKey(Case, sf_read_only=models.NOT_UPDATEABLE, db_column='CaseId')
    solution = models.ForeignKey('Solution', sf_read_only=models.NOT_UPDATEABLE, db_column='SolutionId')
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseSolution'
        verbose_name = 'Case Solution'
        verbose_name_plural = 'Case Solution'
        # keyPrefix = '010'

class Casestatus(models.Model):
    masterlabel = models.CharField(db_column='MasterLabel', max_length=255, verbose_name='Master Label', sf_read_only=models.READ_ONLY, blank=True)
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isdefault = models.BooleanField(db_column='IsDefault', verbose_name='Is Default', sf_read_only=models.READ_ONLY)
    isclosed = models.BooleanField(db_column='IsClosed', verbose_name='Is Closed', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='casestatus_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='casestatus_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseStatus'
        verbose_name = 'Case Status Value'
        verbose_name_plural = 'Case Status Value'
        # keyPrefix = 'None'

class Caseteammember(models.Model):
    parent = models.ForeignKey(Case, sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    member = models.ForeignKey('Contact', sf_read_only=models.NOT_UPDATEABLE, db_column='MemberId')
    teamtemplatemember = models.ForeignKey('Caseteamtemplatemember', sf_read_only=models.READ_ONLY, db_column='TeamTemplateMemberId', blank=True, null=True)
    teamrole = models.ForeignKey('Caseteamrole', db_column='TeamRoleId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='caseteammember_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='caseteammember_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseTeamMember'
        verbose_name = 'Case Team Member'
        verbose_name_plural = 'Case Team Member'
        # keyPrefix = 'None'

class Caseteamrole(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name')
    accesslevel = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Access Level', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    preferencesvisibleincsp = models.BooleanField(db_column='PreferencesVisibleInCSP', verbose_name='Visible in Customer Portal')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='caseteamrole_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='caseteamrole_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseTeamRole'
        verbose_name = 'Case Team Member Role'
        verbose_name_plural = 'Case Team Member Role'
        # keyPrefix = 'None'

class Caseteamtemplate(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name')
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='caseteamtemplate_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='caseteamtemplate_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseTeamTemplate'
        verbose_name = 'Predefined Case Team'
        verbose_name_plural = 'Predefined Case Team'
        # keyPrefix = 'None'

class Caseteamtemplatemember(models.Model):
    teamtemplateid = models.ForeignKey(Caseteamtemplate, sf_read_only=models.NOT_UPDATEABLE, db_column='TeamTemplateId')
    memberid = models.ForeignKey('Contact', sf_read_only=models.NOT_UPDATEABLE, db_column='MemberId')
    teamroleid = models.ForeignKey(Caseteamrole, db_column='TeamRoleId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='caseteamtemplatemember_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='caseteamtemplatemember_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseTeamTemplateMember'
        verbose_name = 'Predefined Case Team Member'
        verbose_name_plural = 'Predefined Case Team Member'
        # keyPrefix = 'None'

class Caseteamtemplaterecord(models.Model):
    parent = models.ForeignKey(Case, sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    teamtemplate = models.ForeignKey(Caseteamtemplate, sf_read_only=models.NOT_UPDATEABLE, db_column='TeamTemplateId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CaseTeamTemplateRecord'
        verbose_name = 'Predefined Case Team Record'
        verbose_name_plural = 'Predefined Case Team Record'
        # keyPrefix = 'None'

class Categorydata(models.Model):
    categorynodeid = models.ForeignKey('Categorynode', db_column='CategoryNodeId')
    relatedsobjectid = models.ForeignKey('Solution', db_column='RelatedSobjectId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='categorydata_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='categorydata_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CategoryData'
        verbose_name = 'Category Data'
        verbose_name_plural = 'Category Data'
        # keyPrefix = '02o'

class Categorynode(models.Model):
    parentid = models.ForeignKey('self', db_column='ParentId', blank=True, null=True)
    masterlabel = models.CharField(db_column='MasterLabel', max_length=40, verbose_name='Name')
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', blank=True, null=True)
    sortstyle = models.CharField(db_column='SortStyle', max_length=40, verbose_name='Subcategory Sort Style', choices=[('custom', 'Custom Order'), ('alphabetical', 'Alphabetical Order')])
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='categorynode_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='categorynode_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CategoryNode'
        verbose_name = 'Category Node'
        verbose_name_plural = 'Category Nodes'
        # keyPrefix = '02n'

class Chatteractivity(models.Model):
    parentid = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='ParentId', blank=True, null=True)
    postcount = models.IntegerField(db_column='PostCount', verbose_name='Post Count', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    commentreceivedcount = models.IntegerField(db_column='CommentReceivedCount', verbose_name='Comment Received Count', sf_read_only=models.READ_ONLY)
    likereceivedcount = models.IntegerField(db_column='LikeReceivedCount', verbose_name='Like Received Count', sf_read_only=models.READ_ONLY)
    influencerawrank = models.IntegerField(db_column='InfluenceRawRank', verbose_name='Influence Raw Rank', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ChatterActivity'
        verbose_name = 'Chatter Activity'
        verbose_name_plural = 'Chatter Activity'
        # keyPrefix = '0ca'

class Clientbrowser(models.Model):
    users = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='UsersId')
    fulluseragent = models.CharField(db_column='FullUserAgent', max_length=1024, verbose_name='Full User Agent', sf_read_only=models.READ_ONLY, blank=True)
    proxyinfo = models.CharField(db_column='ProxyInfo', max_length=1024, verbose_name='Proxy Info', sf_read_only=models.READ_ONLY, blank=True)
    lastupdate = models.DateTimeField(db_column='LastUpdate', verbose_name='Last Update', sf_read_only=models.READ_ONLY, blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ClientBrowser'
        verbose_name = 'Client Browser'
        verbose_name_plural = 'Client Browser'
        # keyPrefix = '713'

class Collaborationgroup(models.Model):
    name = models.CharField(db_column='Name', max_length=40, verbose_name='Name')
    membercount = models.IntegerField(db_column='MemberCount', verbose_name='Member Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', related_name='collaborationgroup_owner_set', db_column='OwnerId')
    collaborationtype = models.CharField(db_column='CollaborationType', max_length=40, verbose_name='Access Type', choices=[('Public', 'Public'), ('Private', 'Private')])
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='collaborationgroup_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='collaborationgroup_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    fullphotourl = models.URLField(db_column='FullPhotoUrl', verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    smallphotourl = models.URLField(db_column='SmallPhotoUrl', verbose_name='Url for Thumbnail sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastfeedmodifieddate = models.DateTimeField(db_column='LastFeedModifiedDate', verbose_name='Last Feed Modified Date', sf_read_only=models.READ_ONLY)
    informationtitle = models.CharField(db_column='InformationTitle', max_length=30, verbose_name='Information Title', blank=True)
    informationbody = models.TextField(db_column='InformationBody', verbose_name='Information', blank=True)
    hasprivatefieldsaccess = models.BooleanField(db_column='HasPrivateFieldsAccess', verbose_name='Has Private Fields Access', sf_read_only=models.READ_ONLY)
    canhaveguests = models.BooleanField(db_column='CanHaveGuests', verbose_name='Allow Customers')
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isarchived = models.BooleanField(db_column='IsArchived', verbose_name='Is Archived')
    isautoarchivedisabled = models.BooleanField(db_column='IsAutoArchiveDisabled', verbose_name='Is Auto Archive Disabled')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CollaborationGroup'
        verbose_name = 'Group'
        verbose_name_plural = 'Groups'
        # keyPrefix = '0F9'

class Collaborationgroupfeed(models.Model):
    parent = models.ForeignKey(Collaborationgroup, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='collaborationgroupfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey('Contentversion', sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='collaborationgroupfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CollaborationGroupFeed'
        verbose_name = 'Group Feed'
        verbose_name_plural = 'Group Feed'
        # keyPrefix = 'None'

class Collaborationgroupmember(models.Model):
    collaborationgroup = models.ForeignKey(Collaborationgroup, sf_read_only=models.NOT_UPDATEABLE, db_column='CollaborationGroupId')
    member = models.ForeignKey('User', related_name='collaborationgroupmember_member_set', db_column='MemberId', sf_read_only=models.NOT_UPDATEABLE)
    collaborationrole = models.CharField(db_column='CollaborationRole', max_length=40, verbose_name='Chatter Role', choices=[('Admin', 'Manager'), ('Standard', 'Member')], blank=True)
    notificationfrequency = models.CharField(db_column='NotificationFrequency', max_length=40, verbose_name='Notification Frequency', choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')], blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='collaborationgroupmember_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='collaborationgroupmember_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CollaborationGroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Members'
        # keyPrefix = '0FB'

class Collaborationgroupmemberrequest(models.Model):
    collaborationgroup = models.ForeignKey(Collaborationgroup, sf_read_only=models.NOT_UPDATEABLE, db_column='CollaborationGroupId')
    requesterid = models.ForeignKey('User', related_name='collaborationgroupmemberrequest_requesterid_set', db_column='RequesterId', sf_read_only=models.NOT_UPDATEABLE)
    responsemessage = models.CharField(db_column='ResponseMessage', max_length=255, verbose_name='Response Message', sf_read_only=models.NOT_CREATEABLE, blank=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', sf_read_only=models.NOT_CREATEABLE, choices=[('Pending', None), ('Accepted', None), ('Declined', None)])
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='collaborationgroupmemberrequest_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='collaborationgroupmemberrequest_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CollaborationGroupMemberRequest'
        verbose_name = 'Group Member Request'
        verbose_name_plural = 'Group Member Requests'
        # keyPrefix = '0I5'

class Collaborationinvitation(models.Model):
    parentid = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='ParentId', blank=True, null=True)
    sharedentityid = models.ForeignKey(Collaborationgroup, sf_read_only=models.NOT_UPDATEABLE, db_column='SharedEntityId')
    inviterid = models.ForeignKey('User', related_name='collaborationinvitation_inviterid_set', db_column='InviterId', sf_read_only=models.READ_ONLY)
    inviteduseremail = models.CharField(db_column='InvitedUserEmail', max_length=240, verbose_name='Invited Email', sf_read_only=models.NOT_UPDATEABLE)
    inviteduseremailnormalized = models.EmailField(db_column='InvitedUserEmailNormalized', verbose_name='Invited Email (Normalized)', sf_read_only=models.READ_ONLY)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Invitation Status', sf_read_only=models.READ_ONLY, choices=[('Sent', None), ('Accepted', None), ('Canceled', None)])
    optionalmessage = models.CharField(db_column='OptionalMessage', max_length=255, verbose_name='Optional Message', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='collaborationinvitation_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='collaborationinvitation_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CollaborationInvitation'
        verbose_name = 'Chatter Invitation'
        verbose_name_plural = 'Chatter Invitations'
        # keyPrefix = '0H1'

class Combinedattachment(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.READ_ONLY, db_column='ParentId')
    recordtype = models.CharField(db_column='RecordType', max_length=30, verbose_name='Type', sf_read_only=models.READ_ONLY, blank=True)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='combinedattachment_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='combinedattachment_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CombinedAttachment'
        verbose_name = 'Note, Attachment, Google Doc And File'
        verbose_name_plural = 'Notes, Attachments, Google Docs And Files'
        # keyPrefix = 'None'

class Community(models.Model):
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='community_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='community_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True)
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Community'
        verbose_name = 'Zone'
        verbose_name_plural = 'Zones'
        # keyPrefix = '09a'

class Contact(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    masterrecord = models.ForeignKey('self', related_name='contact_masterrecord_set', db_column='MasterRecordId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    account = models.ForeignKey(Account, related_name='contact_account_set', db_column='AccountId', blank=True, null=True)
    lastname = models.CharField(db_column='LastName', max_length=80, verbose_name='Last Name')
    firstname = models.CharField(db_column='FirstName', max_length=40, verbose_name='First Name', blank=True)
    salutation = models.CharField(db_column='Salutation', max_length=40, verbose_name='Salutation', choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True)
    name = models.CharField(db_column='Name', max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    otherstreet = models.TextField(db_column='OtherStreet', verbose_name='Other Street', blank=True)
    othercity = models.CharField(db_column='OtherCity', max_length=40, verbose_name='Other City', blank=True)
    otherstate = models.CharField(db_column='OtherState', max_length=80, verbose_name='Other State/Province', blank=True)
    otherpostalcode = models.CharField(db_column='OtherPostalCode', max_length=20, verbose_name='Other Zip/Postal Code', blank=True)
    othercountry = models.CharField(db_column='OtherCountry', max_length=80, verbose_name='Other Country', blank=True)
    otherlatitude = models.DecimalField(db_column='OtherLatitude', max_digits=18, decimal_places=15, verbose_name='Other Latitude', blank=True, null=True)
    otherlongitude = models.DecimalField(db_column='OtherLongitude', max_digits=18, decimal_places=15, verbose_name='Other Longitude', blank=True, null=True)
    mailingstreet = models.TextField(db_column='MailingStreet', verbose_name='Mailing Street', blank=True)
    mailingcity = models.CharField(db_column='MailingCity', max_length=40, verbose_name='Mailing City', blank=True)
    mailingstate = models.CharField(db_column='MailingState', max_length=80, verbose_name='Mailing State/Province', blank=True)
    mailingpostalcode = models.CharField(db_column='MailingPostalCode', max_length=20, verbose_name='Mailing Zip/Postal Code', blank=True)
    mailingcountry = models.CharField(db_column='MailingCountry', max_length=80, verbose_name='Mailing Country', blank=True)
    mailinglatitude = models.DecimalField(db_column='MailingLatitude', max_digits=18, decimal_places=15, verbose_name='Mailing Latitude', blank=True, null=True)
    mailinglongitude = models.DecimalField(db_column='MailingLongitude', max_digits=18, decimal_places=15, verbose_name='Mailing Longitude', blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Business Phone', help_text="The Nonprofit Starter Pack fills this field from the other phone fields on Contact. You shouldn't edit this field directly if you have the Preferred Phone workflow rules enabled.", blank=True)
    fax = models.CharField(db_column='Fax', max_length=40, verbose_name='Business Fax', blank=True)
    mobilephone = models.CharField(db_column='MobilePhone', max_length=40, verbose_name='Mobile Phone', blank=True)
    homephone = models.CharField(db_column='HomePhone', max_length=40, verbose_name='Home Phone', blank=True)
    otherphone = models.CharField(db_column='OtherPhone', max_length=40, verbose_name='Other Phone', blank=True)
    assistantphone = models.CharField(db_column='AssistantPhone', max_length=40, verbose_name='Asst. Phone', blank=True)
    reportsto = models.ForeignKey('self', related_name='contact_reportsto_set', db_column='ReportsToId', blank=True, null=True)
    email = models.EmailField(db_column='Email', verbose_name='Email', help_text="The Nonprofit Starter Pack fills this field from the other email fields on Contact. You shouldn't edit this field directly if you have the Preferred Email workflow rules enabled.", blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=128, verbose_name='Title', blank=True)
    department = models.CharField(db_column='Department', max_length=80, verbose_name='Department', blank=True)
    assistantname = models.CharField(db_column='AssistantName', max_length=40, verbose_name="Assistant's Name", blank=True)
    leadsource = models.CharField(db_column='LeadSource', max_length=40, verbose_name='Lead Source', choices=[('Web', 'Web'), ('NATC List', 'NATC List')], blank=True)
    birthdate = models.DateField(db_column='Birthdate', verbose_name='Birthdate', blank=True, null=True)
    description = models.TextField(db_column='Description', verbose_name='Contact Description', blank=True)
    owner = models.ForeignKey('User', related_name='contact_owner_set', db_column='OwnerId')
    hasoptedoutofemail = models.BooleanField(db_column='HasOptedOutOfEmail', verbose_name='Email Opt Out')
    donotcall = models.BooleanField(db_column='DoNotCall', verbose_name='Do Not Call')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='contact_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='contact_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastcurequestdate = models.DateTimeField(db_column='LastCURequestDate', verbose_name='Last Stay-in-Touch Request Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastcuupdatedate = models.DateTimeField(db_column='LastCUUpdateDate', verbose_name='Last Stay-in-Touch Save Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    emailbouncedreason = models.CharField(db_column='EmailBouncedReason', max_length=255, verbose_name='Email Bounced Reason', blank=True)
    emailbounceddate = models.DateTimeField(db_column='EmailBouncedDate', verbose_name='Email Bounced Date', blank=True, null=True)
    isemailbounced = models.BooleanField(db_column='IsEmailBounced', verbose_name='Is Email Bounced', sf_read_only=models.READ_ONLY)
    jigsaw = models.CharField(db_column='Jigsaw', max_length=20, verbose_name='Data.com Key', blank=True)
    jigsawcontactid = models.CharField(db_column='JigsawContactId', max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True)
    npe01_alternateemail_c = models.EmailField(db_column='npe01__AlternateEmail__c', verbose_name='Alternate Email', blank=True, null=True)
    npe01_homeemail_c = models.EmailField(db_column='npe01__HomeEmail__c', verbose_name='Personal Email', blank=True, null=True)
    npe01_home_address_c = models.CharField(db_column='npe01__Home_Address__c', max_length=1300, verbose_name='Home Address', sf_read_only=models.READ_ONLY, blank=True)
    npe01_last_donation_date_c = models.DateField(db_column='npe01__Last_Donation_Date__c', verbose_name='Last Transaction Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_lifetime_giving_history_amount_c = models.DecimalField(db_column='npe01__Lifetime_Giving_History_Amount__c', max_digits=18, decimal_places=2, verbose_name='Lifetime Transaction Total', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_organization_type_c = models.CharField(db_column='npe01__Organization_Type__c', max_length=1300, verbose_name='Organization Type', sf_read_only=models.READ_ONLY, blank=True)
    npe01_other_address_c = models.CharField(db_column='npe01__Other_Address__c', max_length=1300, verbose_name='Other Address', sf_read_only=models.READ_ONLY, blank=True)
    npe01_preferredphone_c = models.CharField(db_column='npe01__PreferredPhone__c', max_length=255, verbose_name='Preferred Phone', choices=[('Work', 'Work'), ('Household', 'Household'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True)
    npe01_preferred_email_c = models.CharField(db_column='npe01__Preferred_Email__c', max_length=255, verbose_name='Preferred Email', choices=[('Work', 'Work'), ('Alternate', 'Alternate'), ('Personal', 'Personal')], blank=True)
    npe01_primary_address_type_c = models.CharField(db_column='npe01__Primary_Address_Type__c', max_length=255, verbose_name='Primary Address Type', choices=[('Work', 'Work'), ('Other', 'Other'), ('Home', 'Home')], blank=True)
    npe01_private_c = models.BooleanField(db_column='npe01__Private__c', verbose_name='Private')
    npe01_secondary_address_type_c = models.CharField(db_column='npe01__Secondary_Address_Type__c', max_length=255, verbose_name='Secondary Address Type', choices=[('Work', 'Work'), ('Other', 'Other'), ('Home', 'Home')], blank=True)
    npe01_systemaccountprocessor_c = models.CharField(db_column='npe01__SystemAccountProcessor__c', max_length=255, verbose_name='_SYSTEM: ACCOUNT PROCESSOR', choices=[('One-to-One', 'One-to-One'), ('Individual', 'Individual')], blank=True)
    npe01_workemail_c = models.EmailField(db_column='npe01__WorkEmail__c', verbose_name='Work Email', blank=True, null=True)
    npe01_workphone_c = models.CharField(db_column='npe01__WorkPhone__c', max_length=40, verbose_name='Work Phone', blank=True)
    npe01_work_address_c = models.CharField(db_column='npe01__Work_Address__c', max_length=1300, verbose_name='Work Address', sf_read_only=models.READ_ONLY, blank=True)
    npo02_formula_householdmailingaddress_c = models.CharField(db_column='npo02__Formula_HouseholdMailingAddress__c', max_length=1300, verbose_name='Household Mailing Address', sf_read_only=models.READ_ONLY, blank=True)
    npo02_formula_householdphone_c = models.CharField(db_column='npo02__Formula_HouseholdPhone__c', max_length=1300, verbose_name='Household Phone', sf_read_only=models.READ_ONLY, blank=True)
    npo02_household_c = models.ForeignKey('Npo02HouseholdC', db_column='npo02__Household__c', blank=True, null=True)
    npo02_systemhouseholdprocessor_c = models.CharField(db_column='npo02__SystemHouseholdProcessor__c', max_length=255, verbose_name='_SYSTEM: HOUSEHOLD PROCESSOR', choices=[('All Individual Contacts', 'All Individual Contacts'), ('All New or Edited Contacts', 'All New or Edited Contacts'), ('No Contacts', 'No Contacts')], blank=True)
    npo02_averageamount_c = models.DecimalField(db_column='npo02__AverageAmount__c', max_digits=16, decimal_places=2, verbose_name='Average Gift', blank=True, null=True)
    npe01_type_of_account_c = models.CharField(db_column='npe01__Type_of_Account__c', max_length=1300, verbose_name='Type of Account', sf_read_only=models.READ_ONLY, help_text='Shows the type of Account this Contact is connected to.', blank=True)
    npo02_firstclosedate_c = models.DateField(db_column='npo02__FirstCloseDate__c', verbose_name='First Gift Date', blank=True, null=True)
    npo02_largestamount_c = models.DecimalField(db_column='npo02__LargestAmount__c', max_digits=16, decimal_places=2, verbose_name='Largest Gift', blank=True, null=True)
    npo02_lastclosedatehh_c = models.DateField(db_column='npo02__LastCloseDateHH__c', verbose_name='Last Household Gift Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_lastclosedate_c = models.DateField(db_column='npo02__LastCloseDate__c', verbose_name='Last Gift Date', blank=True, null=True)
    npo02_lastmembershipamount_c = models.DecimalField(db_column='npo02__LastMembershipAmount__c', max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', blank=True, null=True)
    npo02_lastmembershipdate_c = models.DateField(db_column='npo02__LastMembershipDate__c', verbose_name='Last Membership Date', blank=True, null=True)
    npo02_lastmembershiplevel_c = models.CharField(db_column='npo02__LastMembershipLevel__c', max_length=255, verbose_name='Last Membership Level', blank=True)
    npo02_lastmembershiporigin_c = models.CharField(db_column='npo02__LastMembershipOrigin__c', max_length=255, verbose_name='Last Membership Origin', blank=True)
    npo02_lastoppamount_c = models.DecimalField(db_column='npo02__LastOppAmount__c', max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', blank=True, null=True)
    npo02_membershipenddate_c = models.DateField(db_column='npo02__MembershipEndDate__c', verbose_name='Membership End Date', blank=True, null=True)
    npo02_membershipjoindate_c = models.DateField(db_column='npo02__MembershipJoinDate__c', verbose_name='Membership Join Date', blank=True, null=True)
    npo02_numberofclosedopps_c = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', blank=True, null=True)
    npo02_numberofmembershipopps_c = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', max_digits=18, decimal_places=0, verbose_name='Number of Memberships', blank=True, null=True)
    npo02_oppamount2yearsago_c = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', blank=True, null=True)
    npo02_oppamountlastndays_c = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', blank=True, null=True)
    npo02_oppamountlastyearhh_c = models.DecimalField(db_column='npo02__OppAmountLastYearHH__c', max_digits=18, decimal_places=2, verbose_name='Total Household Gifts Last Year', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_oppamountlastyear_c = models.DecimalField(db_column='npo02__OppAmountLastYear__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', blank=True, null=True)
    npo02_oppamountthisyearhh_c = models.DecimalField(db_column='npo02__OppAmountThisYearHH__c', max_digits=18, decimal_places=2, verbose_name='Total Household Gifts This Year', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_oppamountthisyear_c = models.DecimalField(db_column='npo02__OppAmountThisYear__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', blank=True, null=True)
    npo02_oppsclosed2yearsago_c = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', blank=True, null=True)
    npo02_oppsclosedlastndays_c = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', blank=True, null=True)
    npo02_oppsclosedlastyear_c = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', blank=True, null=True)
    npo02_oppsclosedthisyear_c = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', blank=True, null=True)
    npo02_smallestamount_c = models.DecimalField(db_column='npo02__SmallestAmount__c', max_digits=16, decimal_places=2, verbose_name='Smallest Gift', blank=True, null=True)
    npo02_totalmembershipoppamount_c = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', blank=True, null=True)
    npo02_totaloppamount_c = models.DecimalField(db_column='npo02__TotalOppAmount__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts', blank=True, null=True)
    npo02_total_household_gifts_c = models.DecimalField(db_column='npo02__Total_Household_Gifts__c', max_digits=18, decimal_places=2, verbose_name='Total Household Gifts', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_naming_exclusions_c = models.CharField(db_column='npo02__Naming_Exclusions__c', max_length=4099, verbose_name='Naming Exclusions', help_text='Determines which household names this contact is NOT included as part of.', choices=[('Household__c.Name', 'Household__c.Name'), ('Household__c.Formal_Greeting__c', 'Household__c.Formal_Greeting__c'), ('Household__c.Informal_Greeting__c', 'Household__c.Informal_Greeting__c')], blank=True)
    bde_batch_c = models.ForeignKey('BdeBatchC', db_column='bde__Batch__c', blank=True, null=True)
    npo02_best_gift_year_total_c = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', blank=True, null=True)
    npo02_best_gift_year_c = models.CharField(db_column='npo02__Best_Gift_Year__c', max_length=4, verbose_name='Best Gift Year', blank=True)
    npo02_household_naming_order_c = models.DecimalField(db_column='npo02__Household_Naming_Order__c', max_digits=18, decimal_places=0, verbose_name='Household Naming Order', blank=True, null=True)
    npo02_soft_credit_last_year_c = models.DecimalField(db_column='npo02__Soft_Credit_Last_Year__c', max_digits=18, decimal_places=2, verbose_name='Soft Credit Last Year', help_text='Total soft credit amount last year.', blank=True, null=True)
    npo02_soft_credit_this_year_c = models.DecimalField(db_column='npo02__Soft_Credit_This_Year__c', max_digits=18, decimal_places=2, verbose_name='Soft Credit This Year', help_text='Total soft credit amount this year', blank=True, null=True)
    npo02_soft_credit_total_c = models.DecimalField(db_column='npo02__Soft_Credit_Total__c', max_digits=18, decimal_places=2, verbose_name='Soft Credit Total', help_text="Total amount in soft credits for this Contact's lifetime. Defined in the Household Settings tab.", blank=True, null=True)
    npo02_soft_credit_two_years_ago_c = models.DecimalField(db_column='npo02__Soft_Credit_Two_Years_Ago__c', max_digits=18, decimal_places=2, verbose_name='Soft Credit Two Years Ago', help_text='Total soft credit amount two years ago.', blank=True, null=True)
    age_group_c = models.CharField(db_column='Age_Group__c', max_length=255, verbose_name='Age Group', choices=[('10 or under', '10 or under'), ('11-17', '11-17'), ('18-25', '18-25'), ('26-30', '26-30'), ('31-39', '31-39'), ('40-49', '40-49'), ('50-59', '50-59'), ('60-69', '60-69'), ('70+', '70+')], blank=True)
    race_c = models.CharField(db_column='Race__c', max_length=4099, verbose_name='Race', choices=[('American Indian or Alaska Native', 'American Indian or Alaska Native'), ('Asian or Asian American', 'Asian or Asian American'), ('Pacific Islander or Native Hawaiian', 'Pacific Islander or Native Hawaiian'), ('Black or African American', 'Black or African American'), ('White or Caucasian', 'White or Caucasian'), ('Hispanic or Latino', 'Hispanic or Latino')], blank=True)
    asian_ethnicity_c = models.CharField(db_column='Asian_Ethnicity__c', max_length=4099, verbose_name='Asian Ethnicity', choices=[('Cambodian', 'Cambodian'), ('Chinese', 'Chinese'), ('Filipino', 'Filipino'), ('Indian', 'Indian'), ('Indonesian', 'Indonesian'), ('Japanese', 'Japanese'), ('Javanese', 'Javanese'), ('Korean', 'Korean'), ('Laotian', 'Laotian'), ('Malaysian', 'Malaysian'), ('Mauritian', 'Mauritian'), ('Okinawan', 'Okinawan'), ('Palestinian', 'Palestinian'), ('Syrian', 'Syrian'), ('Taiwanese', 'Taiwanese'), ('Thai', 'Thai'), ('Vietnamese', 'Vietnamese')], blank=True)
    occupation_c = models.CharField(db_column='Occupation__c', max_length=100, verbose_name='Occupation', blank=True)
    gender_c = models.CharField(db_column='Gender__c', max_length=255, verbose_name='Gender', choices=[('Male', 'Male'), ('Female', 'Female')], blank=True)
    full_name_c = models.CharField(db_column='Full_Name__c', max_length=1300, verbose_name='Full Name', sf_read_only=models.READ_ONLY, blank=True)
    mismatch_account_name_c = models.CharField(db_column='Mismatch_Account_Name__c', max_length=1300, verbose_name='Mismatch Account Name', sf_read_only=models.READ_ONLY, blank=True)
    non_us_country_c = models.CharField(db_column='Non_US_Country__c', max_length=1300, verbose_name='Non-US Country', sf_read_only=models.READ_ONLY, blank=True)
    full_name_last_first_c = models.CharField(db_column='Full_Name_Last_First__c', max_length=1300, verbose_name='Full Name Last First', sf_read_only=models.READ_ONLY, blank=True)
    mc4sf_mc_subscriber_c = models.ForeignKey('Mc4SfMcSubscriberC', db_column='MC4SF__MC_Subscriber__c', blank=True, null=True)
    primary_taiko_group_c = models.ForeignKey(Account, related_name='contact_primarytaikogroupc_set', db_column='Primary_Taiko_Group__c', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Contact'
        verbose_name = 'Contact'
        verbose_name_plural = 'Contacts'
        # keyPrefix = '003'

class Contactfeed(models.Model):
    parent = models.ForeignKey(Contact, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='contactfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey('Contentversion', sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='contactfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContactFeed'
        verbose_name = 'Contact Feed'
        verbose_name_plural = 'Contact Feed'
        # keyPrefix = 'None'

class Contacthistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    contact = models.ForeignKey(Contact, sf_read_only=models.READ_ONLY, db_column='ContactId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Age_Group__c', None), ('Asian_Ethnicity__c', None), ('AssistantName', None), ('AssistantPhone', None), ('bde__Batch__c', None), ('Birthdate', None), ('contactMerged', 'Contact Merged'), ('created', 'Created.'), ('contactCreatedFromLead', 'Created by lead convert'), ('Department', None), ('Description', None), ('DoNotCall', None), ('Email', None), ('EmailBouncedDate', None), ('EmailBouncedReason', None), ('Fax', None), ('feedEvent', 'Feed event'), ('FirstName', None), ('Gender__c', None), ('HasOptedOutOfEmail', None), ('HasOptedOutOfFax', None), ('HomePhone', None), ('Jigsaw', None), ('LastName', None), ('contactUpdatedByLead', 'Lead converted to Contact'), ('LeadSource', None), ('MailingAddress', None), ('MailingCity', None), ('MailingCountry', None), ('MailingLatitude', None), ('MailingLongitude', None), ('MailingPostalCode', None), ('MailingState', None), ('MailingStreet', None), ('MC4SF__MC_Subscriber__c', None), ('MobilePhone', None), ('Name', None), ('npe01__AlternateEmail__c', None), ('npe01__HomeEmail__c', None), ('npe01__Preferred_Email__c', None), ('npe01__PreferredPhone__c', None), ('npe01__Primary_Address_Type__c', None), ('npe01__Private__c', None), ('npe01__Secondary_Address_Type__c', None), ('npe01__SystemAccountProcessor__c', None), ('npe01__SystemIsIndividual__c', None), ('npe01__WorkEmail__c', None), ('npe01__WorkPhone__c', None), ('npo02__AverageAmount__c', None), ('npo02__Best_Gift_Year__c', None), ('npo02__Best_Gift_Year_Total__c', None), ('npo02__FirstCloseDate__c', None), ('npo02__Household__c', None), ('npo02__Household_Naming_Order__c', None), ('npo02__Languages__c', None), ('npo02__LargestAmount__c', None), ('npo02__LastCloseDate__c', None), ('npo02__LastMembershipAmount__c', None), ('npo02__LastMembershipDate__c', None), ('npo02__LastMembershipLevel__c', None), ('npo02__LastMembershipOrigin__c', None), ('npo02__LastOppAmount__c', None), ('npo02__Level__c', None), ('npo02__MembershipEndDate__c', None), ('npo02__MembershipJoinDate__c', None), ('npo02__Naming_Exclusions__c', None), ('npo02__NumberOfClosedOpps__c', None), ('npo02__NumberOfMembershipOpps__c', None), ('npo02__OppAmount2YearsAgo__c', None), ('npo02__OppAmountLastNDays__c', None), ('npo02__OppAmountLastYear__c', None), ('npo02__OppAmountThisYear__c', None), ('npo02__OppsClosed2YearsAgo__c', None), ('npo02__OppsClosedLastNDays__c', None), ('npo02__OppsClosedLastYear__c', None), ('npo02__OppsClosedThisYear__c', None), ('npo02__SmallestAmount__c', None), ('npo02__Soft_Credit_Last_Year__c', None), ('npo02__Soft_Credit_This_Year__c', None), ('npo02__Soft_Credit_Total__c', None), ('npo02__Soft_Credit_Two_Years_Ago__c', None), ('npo02__SystemHouseholdProcessor__c', None), ('npo02__TotalMembershipOppAmount__c', None), ('npo02__TotalOppAmount__c', None), ('Occupation__c', None), ('OtherAddress', None), ('OtherCity', None), ('OtherCountry', None), ('OtherLatitude', None), ('OtherLongitude', None), ('OtherPhone', None), ('OtherPostalCode', None), ('OtherState', None), ('OtherStreet', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Phone', None), ('Primary_Taiko_Group__c', None), ('Race__c', None), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ReportsTo', None), ('Salutation', None), ('Title', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContactHistory'
        verbose_name = 'Contact History'
        verbose_name_plural = 'Contact History'
        # keyPrefix = 'None'

class Contactshare(models.Model):
    contact = models.ForeignKey(Contact, sf_read_only=models.READ_ONLY, db_column='ContactId')
    userorgroupid = models.ForeignKey('Group', sf_read_only=models.READ_ONLY, db_column='UserOrGroupId')
    contactaccesslevel = models.CharField(db_column='ContactAccessLevel', max_length=40, verbose_name='Contact Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    rowcause = models.CharField(db_column='RowCause', max_length=40, verbose_name='Row Cause', sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule')])
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='LastModifiedById')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContactShare'
        verbose_name = 'Contact Share'
        verbose_name_plural = 'Contact Share'
        # keyPrefix = '03s'

class Contentdocument(models.Model):
    createdby = models.ForeignKey('User', related_name='contentdocument_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='contentdocument_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    isarchived = models.BooleanField(db_column='IsArchived', verbose_name='Is Archived', sf_read_only=models.NOT_CREATEABLE)
    archivedbyid = models.ForeignKey('User', related_name='contentdocument_archivedbyid_set', db_column='ArchivedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    archiveddate = models.DateField(db_column='ArchivedDate', verbose_name='Archived Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Is Deleted', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', related_name='contentdocument_owner_set', db_column='OwnerId', sf_read_only=models.NOT_CREATEABLE)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY)
    publishstatus = models.CharField(db_column='PublishStatus', max_length=40, verbose_name='Publish Status', sf_read_only=models.READ_ONLY, choices=[('U', 'Upload Interrupted'), ('P', 'Public'), ('R', 'Personal Library')])
    latestpublishedversion = models.ForeignKey('Contentversion', related_name='contentdocument_latestpublishedversion_set', db_column='LatestPublishedVersionId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContentDocument'
        verbose_name = 'Content'
        verbose_name_plural = 'Content'
        # keyPrefix = '069'

class Contentdocumentfeed(models.Model):
    parent = models.ForeignKey(Contentdocument, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='contentdocumentfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey('Contentversion', sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='contentdocumentfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContentDocumentFeed'
        verbose_name = 'ContentDocument Feed'
        verbose_name_plural = 'ContentDocument Feed'
        # keyPrefix = 'None'

class Contentdocumenthistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    contentdocument = models.ForeignKey(Contentdocument, sf_read_only=models.READ_ONLY, db_column='ContentDocumentId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('ArchivedBy', None), ('ArchivedDate', None), ('created', 'Created.'), ('DeletedBy', None), ('DeletedDate', None), ('contentDocPublished', 'Document Added To Library'), ('contentDocFeatured', 'Document Featured'), ('contentDocRepublished', 'Document Re-added To Library'), ('contentDocUnpublished', 'Document Removed From Library'), ('contentDocSubscribed', 'Document Subscribed to'), ('contentDocUnsubscribed', 'Document Unsubscribed to'), ('feedEvent', 'Feed event'), ('IsArchived', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Parent', None), ('PublishStatus', None), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Title', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContentDocumentHistory'
        verbose_name = 'Content Document History'
        verbose_name_plural = 'Content Document History'
        # keyPrefix = 'None'

class Contentdocumentlink(models.Model):
    linkedentity = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.NOT_UPDATEABLE, db_column='LinkedEntityId')
    contentdocument = models.ForeignKey(Contentdocument, sf_read_only=models.NOT_UPDATEABLE, db_column='ContentDocumentId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Is Deleted', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    sharetype = models.CharField(db_column='ShareType', max_length=40, verbose_name='Share Type', choices=[('V', 'Viewer'), ('C', 'Collaborator'), ('I', 'Inferred')], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContentDocumentLink'
        verbose_name = 'Content Document Link'
        verbose_name_plural = 'Content Document Link'
        # keyPrefix = '06A'

class Contentversion(models.Model):
    contentdocument = models.ForeignKey(Contentdocument, sf_read_only=models.NOT_UPDATEABLE, db_column='ContentDocumentId')
    islatest = models.BooleanField(db_column='IsLatest', verbose_name='Is Latest', sf_read_only=models.READ_ONLY)
    contenturl = models.URLField(db_column='ContentUrl', verbose_name='Content URL', blank=True, null=True)
    versionnumber = models.CharField(db_column='VersionNumber', max_length=20, verbose_name='Version Number', sf_read_only=models.READ_ONLY, blank=True)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title')
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    reasonforchange = models.CharField(db_column='ReasonForChange', max_length=1000, verbose_name='Reason For Change', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    pathonclient = models.CharField(db_column='PathOnClient', max_length=500, verbose_name='Path On Client', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    ratingcount = models.IntegerField(db_column='RatingCount', verbose_name='Rating Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Is Deleted', sf_read_only=models.READ_ONLY)
    contentmodifieddate = models.DateTimeField(db_column='ContentModifiedDate', verbose_name='Content Modified Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    contentmodifiedbyid = models.ForeignKey('User', related_name='contentversion_contentmodifiedbyid_set', db_column='ContentModifiedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    positiveratingcount = models.IntegerField(db_column='PositiveRatingCount', verbose_name='Positive Rating Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    negativeratingcount = models.IntegerField(db_column='NegativeRatingCount', verbose_name='Negative Rating Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    featuredcontentboost = models.IntegerField(db_column='FeaturedContentBoost', verbose_name='Featured Content Boost', sf_read_only=models.READ_ONLY, blank=True, null=True)
    featuredcontentdate = models.DateField(db_column='FeaturedContentDate', verbose_name='Featured Content Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', related_name='contentversion_owner_set', db_column='OwnerId')
    createdby = models.ForeignKey('User', related_name='contentversion_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='contentversion_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    tagcsv = models.TextField(db_column='TagCsv', verbose_name='Tags', blank=True)
    filetype = models.CharField(db_column='FileType', max_length=20, verbose_name='File Type', sf_read_only=models.READ_ONLY)
    publishstatus = models.CharField(db_column='PublishStatus', max_length=40, verbose_name='Publish Status', sf_read_only=models.READ_ONLY, choices=[('U', 'Upload Interrupted'), ('P', 'Public'), ('R', 'Personal Library')])
    versiondata = models.TextField(db_column='VersionData', verbose_name='Version Data', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    firstpublishlocation = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.NOT_UPDATEABLE, db_column='FirstPublishLocationId', blank=True, null=True)
    origin = models.CharField(db_column='Origin', max_length=40, verbose_name='Content Origin', sf_read_only=models.NOT_UPDATEABLE, choices=[('C', 'Content'), ('H', 'Chatter')])
    checksum = models.CharField(db_column='Checksum', max_length=50, verbose_name='Checksum', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContentVersion'
        verbose_name = 'Content'
        verbose_name_plural = 'Content'
        # keyPrefix = '068'

class Contentversionhistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    contentversion = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='ContentVersionId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('AvgRating', None), ('ContentModifiedBy', None), ('ContentModifiedDate', None), ('ContentUrl', None), ('created', 'Created.'), ('Description', None), ('ExternalDataSource', None), ('ExternalDocumentInfo1', None), ('ExternalDocumentInfo2', None), ('FeaturedContentBoost', None), ('FeaturedContentDate', None), ('feedEvent', 'Feed event'), ('FileType', None), ('FirstPublishLocation', None), ('IsPublic', None), ('Language', None), ('MaxRating', None), ('MinRating', None), ('NegativeRatingCount', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('PositiveRatingCount', None), ('PublishStatus', None), ('RatingCount', None), ('ReasonForChange', None), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Reference', None), ('SuggestedTags', None), ('Title', None), ('contentVersionCommented', 'Version Commented'), ('contentVersionCreated', 'Version Created'), ('contentVersionDeleted', 'Version Deleted'), ('contentVersionDownloaded', 'Version Downloaded'), ('VersionNumber', None), ('contentVersionRated', 'Version Rated'), ('contentVersionUpdated', 'Version Updated'), ('contentVersionViewed', 'Version Viewed')])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContentVersionHistory'
        verbose_name = 'Content Version History'
        verbose_name_plural = 'Content Version History'
        # keyPrefix = 'None'

class Contract(models.Model):
    account = models.ForeignKey(Account, db_column='AccountId')
    ownerexpirationnotice = models.CharField(db_column='OwnerExpirationNotice', max_length=40, verbose_name='Owner Expiration Notice', choices=[('15', '15 Days'), ('30', '30 Days'), ('45', '45 Days'), ('60', '60 Days'), ('90', '90 Days'), ('120', '120 Days')], blank=True)
    startdate = models.DateField(db_column='StartDate', verbose_name='Contract Start Date', blank=True, null=True)
    enddate = models.DateField(db_column='EndDate', verbose_name='Contract End Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    billingstreet = models.TextField(db_column='BillingStreet', verbose_name='Billing Street', blank=True)
    billingcity = models.CharField(db_column='BillingCity', max_length=40, verbose_name='Billing City', blank=True)
    billingstate = models.CharField(db_column='BillingState', max_length=80, verbose_name='Billing State/Province', blank=True)
    billingpostalcode = models.CharField(db_column='BillingPostalCode', max_length=20, verbose_name='Billing Zip/Postal Code', blank=True)
    billingcountry = models.CharField(db_column='BillingCountry', max_length=80, verbose_name='Billing Country', blank=True)
    billinglatitude = models.DecimalField(db_column='BillingLatitude', max_digits=18, decimal_places=15, verbose_name='Billing Latitude', blank=True, null=True)
    billinglongitude = models.DecimalField(db_column='BillingLongitude', max_digits=18, decimal_places=15, verbose_name='Billing Longitude', blank=True, null=True)
    contractterm = models.IntegerField(db_column='ContractTerm', verbose_name='Contract Term', blank=True, null=True)
    owner = models.ForeignKey('User', related_name='contract_owner_set', db_column='OwnerId')
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('In Approval Process', 'In Approval Process'), ('Activated', 'Activated'), ('Draft', 'Draft')])
    companysigned = models.ForeignKey('User', related_name='contract_companysigned_set', db_column='CompanySignedId', blank=True, null=True)
    companysigneddate = models.DateField(db_column='CompanySignedDate', verbose_name='Company Signed Date', blank=True, null=True)
    customersigned = models.ForeignKey(Contact, db_column='CustomerSignedId', blank=True, null=True)
    customersignedtitle = models.CharField(db_column='CustomerSignedTitle', max_length=40, verbose_name='Customer Signed Title', blank=True)
    customersigneddate = models.DateField(db_column='CustomerSignedDate', verbose_name='Customer Signed Date', blank=True, null=True)
    specialterms = models.TextField(db_column='SpecialTerms', verbose_name='Special Terms', blank=True)
    activatedby = models.ForeignKey('User', related_name='contract_activatedby_set', db_column='ActivatedById', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    activateddate = models.DateTimeField(db_column='ActivatedDate', verbose_name='Activated Date', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    statuscode = models.CharField(db_column='StatusCode', max_length=40, verbose_name='Status Category', sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('InApproval', 'In Approval Process'), ('Activated', 'Activated'), ('Terminated', 'Terminated'), ('Expired', 'Expired')])
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    contractnumber = models.CharField(db_column='ContractNumber', max_length=30, verbose_name='Contract Number', sf_read_only=models.READ_ONLY)
    lastapproveddate = models.DateTimeField(db_column='LastApprovedDate', verbose_name='Last Approved Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='contract_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='contract_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Contract'
        verbose_name = 'Contract'
        verbose_name_plural = 'Contracts'
        # keyPrefix = '800'

class Contractcontactrole(models.Model):
    contract = models.ForeignKey(Contract, sf_read_only=models.NOT_UPDATEABLE, db_column='ContractId')
    contact = models.ForeignKey(Contact, db_column='ContactId')
    role = models.CharField(db_column='Role', max_length=40, verbose_name='Role', choices=[('Business User', 'Business User'), ('Decision Maker', 'Decision Maker'), ('Economic Buyer', 'Economic Buyer'), ('Economic Decision Maker', 'Economic Decision Maker'), ('Evaluator', 'Evaluator'), ('Executive Sponsor', 'Executive Sponsor'), ('Influencer', 'Influencer'), ('Technical Buyer', 'Technical Buyer'), ('Other', 'Other')], blank=True)
    isprimary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='contractcontactrole_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='contractcontactrole_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContractContactRole'
        verbose_name = 'Contract Contact Role'
        verbose_name_plural = 'Contract Contact Role'
        # keyPrefix = '02a'

class Contractfeed(models.Model):
    parent = models.ForeignKey(Contract, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='contractfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='contractfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContractFeed'
        verbose_name = 'Contract Feed'
        verbose_name_plural = 'Contract Feed'
        # keyPrefix = 'None'

class Contracthistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    contract = models.ForeignKey(Contract, sf_read_only=models.READ_ONLY, db_column='ContractId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('ActivatedBy', None), ('ActivatedDate', None), ('BillingAddress', None), ('BillingCity', None), ('BillingCountry', None), ('BillingLatitude', None), ('BillingLongitude', None), ('BillingPostalCode', None), ('BillingState', None), ('BillingStreet', None), ('CompanySigned', None), ('CompanySignedDate', None), ('contractActivation', 'Contract Activated.'), ('contractApproval', 'Contract Approved.'), ('contractConversion', 'Contract Converted.'), ('contractDraft', 'Contract Draft.'), ('contractExpiration', 'Contract Expired.'), ('ContractTerm', None), ('contractTermination', 'Contract Terminated.'), ('created', 'Created.'), ('CustomerSigned', None), ('CustomerSignedDate', None), ('CustomerSignedTitle', None), ('Description', None), ('EndDate', None), ('feedEvent', 'Feed event'), ('Name', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('OwnerExpirationNotice', None), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('ShippingAddress', None), ('ShippingCity', None), ('ShippingCountry', None), ('ShippingLatitude', None), ('ShippingLongitude', None), ('ShippingPostalCode', None), ('ShippingState', None), ('ShippingStreet', None), ('SpecialTerms', None), ('StartDate', None), ('Status', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContractHistory'
        verbose_name = 'Contract History'
        verbose_name_plural = 'Contract History'
        # keyPrefix = 'None'

class Contractstatus(models.Model):
    masterlabel = models.CharField(db_column='MasterLabel', max_length=255, verbose_name='Master Label', sf_read_only=models.READ_ONLY, blank=True)
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isdefault = models.BooleanField(db_column='IsDefault', verbose_name='Is Default', sf_read_only=models.READ_ONLY)
    statuscode = models.CharField(db_column='StatusCode', max_length=40, verbose_name='Status Code', sf_read_only=models.READ_ONLY, choices=[('Draft', 'Draft'), ('InApproval', 'In Approval Process'), ('Activated', 'Activated'), ('Terminated', 'Terminated'), ('Expired', 'Expired')], blank=True)
    createdby = models.ForeignKey('User', related_name='contractstatus_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='contractstatus_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ContractStatus'
        verbose_name = 'Contract Status Value'
        verbose_name_plural = 'Contract Status Value'
        # keyPrefix = 'None'

class Cronjobdetail(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Job Name', sf_read_only=models.READ_ONLY)
    jobtype = models.CharField(db_column='JobType', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('1', 'Data Export'), ('3', 'Dashboard Refresh'), ('4', 'Analytic Snapshot'), ('7', 'Scheduled Apex'), ('8', 'Report Run'), ('9', 'Batch Job')], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CronJobDetail'
        verbose_name = 'Cron Job'
        verbose_name_plural = 'Cron Job'
        # keyPrefix = '08a'

class Crontrigger(models.Model):
    cronjobdetail = models.ForeignKey(Cronjobdetail, sf_read_only=models.READ_ONLY, db_column='CronJobDetailId', blank=True, null=True)
    nextfiretime = models.DateTimeField(db_column='NextFireTime', verbose_name='Next Run Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    previousfiretime = models.DateTimeField(db_column='PreviousFireTime', verbose_name='Previous Run Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    state = models.CharField(db_column='State', max_length=16, verbose_name='Job State', sf_read_only=models.READ_ONLY, blank=True)
    starttime = models.DateTimeField(db_column='StartTime', verbose_name='Start Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    endtime = models.DateTimeField(db_column='EndTime', verbose_name='End Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    cronexpression = models.CharField(db_column='CronExpression', max_length=255, verbose_name='Cron Expression', sf_read_only=models.READ_ONLY, blank=True)
    timezonesidkey = models.CharField(db_column='TimeZoneSidKey', max_length=40, verbose_name='Java Time Zone Id', sf_read_only=models.READ_ONLY, choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Magadan Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Norfolk', '(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Yekaterinburg', '(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Baku', '(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Europe/Moscow', '(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Time (America/Santiago)'), ('America/Caracas', '(GMT-04:30) Venezuela Time (America/Caracas)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True)
    ownerid = models.ForeignKey('User', related_name='crontrigger_ownerid_set', db_column='OwnerId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastmodifiedby = models.ForeignKey('User', related_name='crontrigger_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='crontrigger_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    timestriggered = models.IntegerField(db_column='TimesTriggered', verbose_name='Job Fired Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'CronTrigger'
        verbose_name = 'Scheduled Jobs'
        verbose_name_plural = 'Scheduled Jobs'
        # keyPrefix = '08e'

class Dashboard(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    folder = models.ForeignKey('Folder', sf_read_only=models.READ_ONLY, db_column='FolderId')
    title = models.CharField(db_column='Title', max_length=80, verbose_name='Title', sf_read_only=models.READ_ONLY)
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Dashboard Unique Name', sf_read_only=models.READ_ONLY)
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True)
    leftsize = models.CharField(db_column='LeftSize', max_length=40, verbose_name='Left Size', sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')])
    middlesize = models.CharField(db_column='MiddleSize', max_length=40, verbose_name='Middle Size', sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')], blank=True)
    rightsize = models.CharField(db_column='RightSize', max_length=40, verbose_name='Right Size', sf_read_only=models.READ_ONLY, choices=[('Narrow', 'Narrow'), ('Medium', 'Medium'), ('Wide', 'Wide')])
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='dashboard_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='dashboard_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    runninguser = models.ForeignKey('User', related_name='dashboard_runninguser_set', db_column='RunningUserId', sf_read_only=models.READ_ONLY)
    titlecolor = models.IntegerField(db_column='TitleColor', verbose_name='Title Color', sf_read_only=models.READ_ONLY)
    titlesize = models.IntegerField(db_column='TitleSize', verbose_name='Title Size', sf_read_only=models.READ_ONLY)
    textcolor = models.IntegerField(db_column='TextColor', verbose_name='Text Color', sf_read_only=models.READ_ONLY)
    backgroundstart = models.IntegerField(db_column='BackgroundStart', verbose_name='Starting Color', sf_read_only=models.READ_ONLY)
    backgroundend = models.IntegerField(db_column='BackgroundEnd', verbose_name='Ending Color', sf_read_only=models.READ_ONLY)
    backgrounddirection = models.CharField(db_column='BackgroundDirection', max_length=40, verbose_name='Background Fade Direction', sf_read_only=models.READ_ONLY, choices=[('TopToBottom', 'Top to Bottom'), ('LeftToRight', 'Left to Right'), ('Diagonal', 'Diagonal')])
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Dashboard Running User', sf_read_only=models.READ_ONLY, choices=[('SpecifiedUser', 'Run as specified user'), ('LoggedInUser', 'Run as logged-in user'), ('MyTeamUser', 'Let authorized users change running user')])
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Dashboard'
        verbose_name = 'Dashboard'
        verbose_name_plural = 'Dashboards'
        # keyPrefix = '01Z'

class Dashboardcomponent(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Dashboard Component Name', sf_read_only=models.READ_ONLY, blank=True)
    dashboard = models.ForeignKey(Dashboard, sf_read_only=models.READ_ONLY, db_column='DashboardId')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'DashboardComponent'
        verbose_name = 'Dashboard Component'
        verbose_name_plural = 'Dashboard Components'
        # keyPrefix = '01a'

class Dashboardcomponentfeed(models.Model):
    parent = models.ForeignKey(Dashboardcomponent, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='dashboardcomponentfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='dashboardcomponentfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'DashboardComponentFeed'
        verbose_name = 'Dashboard Component Feed'
        verbose_name_plural = 'Dashboard Component Feed'
        # keyPrefix = 'None'

class Dashboardfeed(models.Model):
    parent = models.ForeignKey(Dashboard, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='dashboardfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='dashboardfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'DashboardFeed'
        verbose_name = 'Dashboard Feed'
        verbose_name_plural = 'Dashboard Feed'
        # keyPrefix = 'None'

class Declinedeventrelation(models.Model):
    relation = models.ForeignKey(Contact, sf_read_only=models.READ_ONLY, db_column='RelationId', blank=True, null=True)
    event = models.ForeignKey('Event', sf_read_only=models.READ_ONLY, db_column='EventId', blank=True, null=True)
    respondeddate = models.DateTimeField(db_column='RespondedDate', verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(db_column='Response', max_length=255, verbose_name='Response', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='declinedeventrelation_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='declinedeventrelation_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    type = models.CharField(db_column='Type', max_length=50, verbose_name='Type', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'DeclinedEventRelation'
        verbose_name = 'Declined Event Relation'
        verbose_name_plural = 'Declined Event Relations'
        # keyPrefix = 'None'

class Document(models.Model):
    folder = models.ForeignKey('Folder', db_column='FolderId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Document Name')
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Document Unique Name')
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='MIME Type', blank=True)
    type = models.CharField(db_column='Type', max_length=40, verbose_name='File Extension', blank=True)
    ispublic = models.BooleanField(db_column='IsPublic', verbose_name='Externally Available')
    bodylength = models.IntegerField(db_column='BodyLength', verbose_name='Body Length', sf_read_only=models.READ_ONLY)
    body = models.TextField(db_column='Body', verbose_name='Body', blank=True)
    url = models.CharField(db_column='Url', max_length=255, verbose_name='Url', blank=True)
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    keywords = models.CharField(db_column='Keywords', max_length=255, verbose_name='Keywords', blank=True)
    isinternaluseonly = models.BooleanField(db_column='IsInternalUseOnly', verbose_name='Internal Use Only')
    author = models.ForeignKey('User', related_name='document_author_set', db_column='AuthorId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='document_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='document_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isbodysearchable = models.BooleanField(db_column='IsBodySearchable', verbose_name='Document Content Searchable', sf_read_only=models.READ_ONLY)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Document'
        verbose_name = 'Document'
        verbose_name_plural = 'Documents'
        # keyPrefix = '015'

class Documentattachmentmap(models.Model):
    parentid = models.ForeignKey('Emailtemplate', db_column='ParentId')
    documentid = models.ForeignKey(Document, db_column='DocumentId')
    documentsequence = models.IntegerField(db_column='DocumentSequence', verbose_name='Attachment Sequence')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'DocumentAttachmentMap'
        verbose_name = 'Document Entity Map'
        verbose_name_plural = 'Document Entity Map'
        # keyPrefix = '05X'

class Domain(models.Model):
    domaintype = models.CharField(db_column='DomainType', max_length=40, verbose_name='Domain Type', sf_read_only=models.READ_ONLY, choices=[('DNS', 'Domain Name System (DNS)'), ('FacebookPage', 'Facebook Page')])
    domain = models.CharField(db_column='Domain', max_length=765, verbose_name='Domain Name', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='domain_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='domain_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Domain'
        verbose_name = 'Domain'
        verbose_name_plural = 'Domains'
        # keyPrefix = '0I4'

class Domainsite(models.Model):
    domain = models.ForeignKey(Domain, sf_read_only=models.READ_ONLY, db_column='DomainId')
    site = models.ForeignKey('Site', sf_read_only=models.READ_ONLY, db_column='SiteId')
    pathprefix = models.CharField(db_column='PathPrefix', max_length=255, verbose_name='Path', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='domainsite_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='domainsite_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'DomainSite'
        verbose_name = 'Custom URL'
        verbose_name_plural = 'Custom URLs'
        # keyPrefix = '0Jf'

class Emailservicesaddress(models.Model):
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active')
    localpart = models.CharField(db_column='LocalPart', max_length=64, verbose_name='Email address')
    emaildomainname = models.CharField(db_column='EmailDomainName', max_length=255, verbose_name='Email address domain', sf_read_only=models.READ_ONLY, blank=True)
    authorizedsenders = models.TextField(db_column='AuthorizedSenders', verbose_name='Accept Email From', blank=True)
    runasuserid = models.ForeignKey('User', related_name='emailservicesaddress_runasuserid_set', db_column='RunAsUserId')
    function = models.ForeignKey('Emailservicesfunction', db_column='FunctionId')
    createdby = models.ForeignKey('User', related_name='emailservicesaddress_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='emailservicesaddress_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'EmailServicesAddress'
        verbose_name = 'Email Services Address'
        verbose_name_plural = 'Email Services Address'
        # keyPrefix = '093'

class Emailservicesfunction(models.Model):
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active')
    functionname = models.CharField(db_column='FunctionName', max_length=64, verbose_name='Email Service Name')
    authorizedsenders = models.TextField(db_column='AuthorizedSenders', verbose_name='Accept Email From', blank=True)
    isauthenticationrequired = models.BooleanField(db_column='IsAuthenticationRequired', verbose_name='Advanced Email Security Settings')
    istlsrequired = models.BooleanField(db_column='IsTlsRequired', verbose_name='TLS Required')
    attachmentoption = models.CharField(db_column='AttachmentOption', max_length=40, verbose_name='Accept Attachments', choices=[('0', 'None'), ('1', 'Text attachments only'), ('2', 'Binary attachments only'), ('3', 'All'), ('4', 'Attachment names only, no content')])
    apexclassid = models.ForeignKey(Apexclass, db_column='ApexClassId', blank=True, null=True)
    overlimitaction = models.CharField(db_column='OverLimitAction', max_length=40, verbose_name='Over Email Rate Limit Action', choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True)
    functioninactiveaction = models.CharField(db_column='FunctionInactiveAction', max_length=40, verbose_name='Deactivated Email Service Action', choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True)
    addressinactiveaction = models.CharField(db_column='AddressInactiveAction', max_length=40, verbose_name='Deactivated Email Address Action', choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True)
    authenticationfailureaction = models.CharField(db_column='AuthenticationFailureAction', max_length=40, verbose_name='Unauthenticated Sender Action', choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True)
    authorizationfailureaction = models.CharField(db_column='AuthorizationFailureAction', max_length=40, verbose_name='Unauthorized Sender Action', choices=[('0', 'Use System Default'), ('1', 'Bounce message'), ('2', 'Discard message'), ('3', 'Requeue message')], blank=True)
    iserrorroutingenabled = models.BooleanField(db_column='IsErrorRoutingEnabled', verbose_name='Enable Error Routing')
    errorroutingaddress = models.EmailField(db_column='ErrorRoutingAddress', verbose_name='Route Error Emails to This Email Address', blank=True, null=True)
    istextattachmentsasbinary = models.BooleanField(db_column='IsTextAttachmentsAsBinary', verbose_name='Convert Text Attachments to Binary Attachments')
    createdby = models.ForeignKey('User', related_name='emailservicesfunction_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='emailservicesfunction_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'EmailServicesFunction'
        verbose_name = 'Email Service'
        verbose_name_plural = 'Email Services'
        # keyPrefix = '091'

class Emailstatus(models.Model):
    task = models.ForeignKey('Task', sf_read_only=models.READ_ONLY, db_column='TaskId')
    who = models.ForeignKey(Contact, sf_read_only=models.READ_ONLY, db_column='WhoId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='emailstatus_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='emailstatus_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    timesopened = models.IntegerField(db_column='TimesOpened', verbose_name='# Times Opened', sf_read_only=models.READ_ONLY)
    firstopendate = models.DateTimeField(db_column='FirstOpenDate', verbose_name='Date Opened', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastopendate = models.DateTimeField(db_column='LastOpenDate', verbose_name='Last Opened', sf_read_only=models.READ_ONLY, blank=True, null=True)
    emailtemplatename = models.CharField(db_column='EmailTemplateName', max_length=80, verbose_name='Email Template Name', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'EmailStatus'
        verbose_name = 'Email Status'
        verbose_name_plural = 'Email Status'
        # keyPrefix = '018'

class Emailtemplate(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Email Template Name')
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Template Unique Name')
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    owner = models.ForeignKey('User', related_name='emailtemplate_owner_set', db_column='OwnerId')
    folder = models.ForeignKey('Folder', db_column='FolderId')
    brandtemplateid = models.ForeignKey(Brandtemplate, sf_read_only=models.NOT_UPDATEABLE, db_column='BrandTemplateId', blank=True, null=True)
    templatestyle = models.CharField(db_column='TemplateStyle', max_length=40, verbose_name='Style', sf_read_only=models.NOT_UPDATEABLE, choices=[('none', 'No Email Layout'), ('freeForm', 'Free Form Letter'), ('formalLetter', 'Formal Letter'), ('promotionRight', 'Promotion (Right)'), ('promotionLeft', 'Promotion (Left)'), ('newsletter', 'Newsletter'), ('products', 'Products')])
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Available For Use')
    templatetype = models.CharField(db_column='TemplateType', max_length=40, verbose_name='Template Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('text', 'Text'), ('html', 'HTML'), ('custom', 'Custom'), ('visualforce', 'Visualforce')])
    encoding = models.CharField(db_column='Encoding', max_length=40, verbose_name='Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')], blank=True)
    description = models.CharField(db_column='Description', max_length=4000, verbose_name='Description', blank=True)
    subject = models.CharField(db_column='Subject', max_length=255, verbose_name='Subject', blank=True)
    htmlvalue = models.TextField(db_column='HtmlValue', verbose_name='HTML Value', blank=True)
    body = models.TextField(db_column='Body', verbose_name='Email Body', blank=True)
    timesused = models.IntegerField(db_column='TimesUsed', verbose_name='Times Used', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastuseddate = models.DateTimeField(db_column='LastUsedDate', verbose_name='Last Used Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='emailtemplate_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='emailtemplate_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    apiversion = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1, verbose_name='API Version', blank=True, null=True)
    markup = models.TextField(db_column='Markup', verbose_name='Markup', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'EmailTemplate'
        verbose_name = 'Email Template'
        verbose_name_plural = 'Email Templates'
        # keyPrefix = '00X'

class Entitysubscription(models.Model):
    parent = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    subscriber = models.ForeignKey('User', sf_read_only=models.NOT_UPDATEABLE, db_column='SubscriberId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'EntitySubscription'
        verbose_name = 'Entity Subscription'
        verbose_name_plural = 'Entity Subscriptions'
        # keyPrefix = '0E8'

class Event(models.Model):
    who = models.ForeignKey(Contact, db_column='WhoId', blank=True, null=True)
    what = models.ForeignKey(Apxtconga4CongaEmailStagingC, db_column='WhatId', blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=255, verbose_name='Subject', choices=[('Call', 'Call'), ('Email', 'Email'), ('Meeting', 'Meeting'), ('Send Letter/Quote', 'Send Letter/Quote'), ('Other', 'Other')], blank=True)
    location = models.CharField(db_column='Location', max_length=255, verbose_name='Location', blank=True)
    isalldayevent = models.BooleanField(db_column='IsAllDayEvent', verbose_name='All-Day Event')
    activitydatetime = models.DateTimeField(db_column='ActivityDateTime', verbose_name='Due Date Time', blank=True, null=True)
    activitydate = models.DateField(db_column='ActivityDate', verbose_name='Due Date Only', blank=True, null=True)
    durationinminutes = models.IntegerField(db_column='DurationInMinutes', verbose_name='Duration', blank=True, null=True)
    startdatetime = models.DateTimeField(db_column='StartDateTime', verbose_name='Start Date Time', blank=True, null=True)
    enddatetime = models.DateTimeField(db_column='EndDateTime', verbose_name='End Date Time', blank=True, null=True)
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    account = models.ForeignKey(Account, sf_read_only=models.READ_ONLY, db_column='AccountId', blank=True, null=True)
    owner = models.ForeignKey('User', related_name='event_owner_set', db_column='OwnerId')
    isprivate = models.BooleanField(db_column='IsPrivate', verbose_name='Private')
    showas = models.CharField(db_column='ShowAs', max_length=40, verbose_name='Show Time As', choices=[('Busy', 'Busy'), ('OutOfOffice', 'Out of Office'), ('Free', 'Free')], blank=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    ischild = models.BooleanField(db_column='IsChild', verbose_name='Is Child', sf_read_only=models.READ_ONLY)
    isgroupevent = models.BooleanField(db_column='IsGroupEvent', verbose_name='Is Group Event', sf_read_only=models.READ_ONLY)
    groupeventtype = models.CharField(db_column='GroupEventType', max_length=40, verbose_name='Group Event Type', sf_read_only=models.READ_ONLY, choices=[('0', 'Non-group Event'), ('1', 'Group Event'), ('2', 'Proposed Event')], blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='event_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='event_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isarchived = models.BooleanField(db_column='IsArchived', verbose_name='Archived', sf_read_only=models.READ_ONLY)
    recurrenceactivityid = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='RecurrenceActivityId', blank=True, null=True)
    isrecurrence = models.BooleanField(db_column='IsRecurrence', verbose_name='Create Recurring Series of Events', sf_read_only=models.NOT_UPDATEABLE)
    recurrencestartdatetime = models.DateTimeField(db_column='RecurrenceStartDateTime', verbose_name='Start Date', blank=True, null=True)
    recurrenceenddateonly = models.DateField(db_column='RecurrenceEndDateOnly', verbose_name='End Date', blank=True, null=True)
    recurrencetimezonesidkey = models.CharField(db_column='RecurrenceTimeZoneSidKey', max_length=40, verbose_name='Recurrence Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Magadan Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Norfolk', '(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Yekaterinburg', '(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Baku', '(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Europe/Moscow', '(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Time (America/Santiago)'), ('America/Caracas', '(GMT-04:30) Venezuela Time (America/Caracas)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True)
    recurrencetype = models.CharField(db_column='RecurrenceType', max_length=40, verbose_name='Recurrence Type', choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True)
    recurrenceinterval = models.IntegerField(db_column='RecurrenceInterval', verbose_name='Recurrence Interval', blank=True, null=True)
    recurrencedayofweekmask = models.IntegerField(db_column='RecurrenceDayOfWeekMask', verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrencedayofmonth = models.IntegerField(db_column='RecurrenceDayOfMonth', verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrenceinstance = models.CharField(db_column='RecurrenceInstance', max_length=40, verbose_name='Recurrence Instance', choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True)
    recurrencemonthofyear = models.CharField(db_column='RecurrenceMonthOfYear', max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True)
    reminderdatetime = models.DateTimeField(db_column='ReminderDateTime', verbose_name='Reminder Date/Time', blank=True, null=True)
    isreminderset = models.BooleanField(db_column='IsReminderSet', verbose_name='Reminder Set')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Event'
        verbose_name = 'Event'
        verbose_name_plural = 'Events'
        # keyPrefix = '00U'

class Eventfeed(models.Model):
    parent = models.ForeignKey(Event, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='eventfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='eventfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'EventFeed'
        verbose_name = 'Event Feed'
        verbose_name_plural = 'Event Feed'
        # keyPrefix = 'None'

class Eventrelation(models.Model):
    relation = models.ForeignKey(Contact, sf_read_only=models.NOT_UPDATEABLE, db_column='RelationId')
    event = models.ForeignKey(Event, sf_read_only=models.NOT_UPDATEABLE, db_column='EventId')
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('New', 'New'), ('Declined', 'Declined'), ('Accepted', 'Accepted'), ('Uninvited', 'Uninvited'), ('Maybe', 'Maybe')], blank=True)
    respondeddate = models.DateTimeField(db_column='RespondedDate', verbose_name='Response Date', blank=True, null=True)
    response = models.CharField(db_column='Response', max_length=255, verbose_name='Response', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='eventrelation_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='eventrelation_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'EventRelation'
        verbose_name = 'Event Relation'
        verbose_name_plural = 'Event Relations'
        # keyPrefix = '0RE'

class Feedcomment(models.Model):
    feeditemid = models.ForeignKey(Accountfeed, sf_read_only=models.NOT_UPDATEABLE, db_column='FeedItemId')
    parentid = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.READ_ONLY, db_column='ParentId', blank=True, null=True)
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.NOT_UPDATEABLE, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.NOT_UPDATEABLE)
    commentbody = models.TextField(db_column='CommentBody', verbose_name='Comment Body', sf_read_only=models.NOT_UPDATEABLE)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    insertedby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='InsertedById')
    commenttype = models.CharField(db_column='CommentType', max_length=40, verbose_name='Comment Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('TextComment', None), ('ContentComment', None)], blank=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.NOT_UPDATEABLE, db_column='RelatedRecordId', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'FeedComment'
        verbose_name = 'Feed Comment'
        verbose_name_plural = 'Feed Comments'
        # keyPrefix = '0D7'

class Feeditem(models.Model):
    parent = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='feeditem_createdby_set', db_column='CreatedById', sf_read_only=models.NOT_UPDATEABLE)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.NOT_UPDATEABLE)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.NOT_UPDATEABLE, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.NOT_UPDATEABLE, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='feeditem_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'FeedItem'
        verbose_name = 'Feed Item'
        verbose_name_plural = 'Feed Items'
        # keyPrefix = '0D5'

class Feedlike(models.Model):
    feeditemid = models.ForeignKey(Accountfeed, related_name='feedlike_feeditemid_set', db_column='FeedItemId', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    feedentityid = models.ForeignKey(Accountfeed, related_name='feedlike_feedentityid_set', db_column='FeedEntityId', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    createdby = models.ForeignKey('User', related_name='feedlike_createdby_set', db_column='CreatedById', sf_read_only=models.NOT_UPDATEABLE)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.NOT_UPDATEABLE)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    insertedby = models.ForeignKey('User', related_name='feedlike_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'FeedLike'
        verbose_name = 'Feed Like'
        verbose_name_plural = 'Feed Likes'
        # keyPrefix = '0I0'

class Feedpollchoice(models.Model):
    feeditemid = models.ForeignKey(Accountfeed, sf_read_only=models.READ_ONLY, db_column='FeedItemId')
    position = models.IntegerField(db_column='Position', verbose_name='Position', sf_read_only=models.READ_ONLY)
    choicebody = models.TextField(db_column='ChoiceBody', verbose_name='ChoiceBody', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'FeedPollChoice'
        verbose_name = 'Feed Poll Choice'
        verbose_name_plural = 'Feed Poll Choices'
        # keyPrefix = '09A'

class Feedpollvote(models.Model):
    feeditemid = models.ForeignKey(Accountfeed, sf_read_only=models.READ_ONLY, db_column='FeedItemId')
    choice = models.ForeignKey(Feedpollchoice, sf_read_only=models.READ_ONLY, db_column='ChoiceId')
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'FeedPollVote'
        verbose_name = 'Feed Poll Vote'
        verbose_name_plural = 'Feed Poll Votes'
        # keyPrefix = '09B'

class Feedtrackedchange(models.Model):
    feeditemid = models.ForeignKey(Accountfeed, sf_read_only=models.READ_ONLY, db_column='FeedItemId')
    fieldname = models.CharField(db_column='FieldName', max_length=120, verbose_name='Field', sf_read_only=models.READ_ONLY)
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'FeedTrackedChange'
        verbose_name = 'Feed Tracked Change'
        verbose_name_plural = 'Feed Tracked Changes'
        # keyPrefix = '0D6'

class Fieldpermissions(models.Model):
    parent = models.ForeignKey('Permissionset', sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    sobjecttype = models.CharField(db_column='SobjectType', max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Asset', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('Contact', None), ('Contract', None), ('Event', None), ('Idea', None), ('Lead', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Pricebook2', None), ('Product2', None), ('Solution', None), ('Task', None), ('User', None)])
    field = models.CharField(db_column='Field', max_length=40, verbose_name='Field Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account.AccountNumber', None), ('Account.AccountSource', None), ('Account.Active__c', None), ('Account.AnnualRevenue', None), ('Account.bde__Batch__c', None), ('Account.BillingAddress', None), ('Account.Category__c', None), ('Account.Charter_Rollup__c', None), ('Account.Description', None), ('Account.Email__c', None), ('Account.Ending_Date__c', None), ('Account.Fax', None), ('Account.Founding_Date__c', None), ('Account.Industry', None), ('Account.Jigsaw', None), ('Account.Non_US_Country__c', None), ('Account.npe01__FirstDonationDate__c', None), ('Account.npe01__LastDonationDate__c', None), ('Account.npe01__LifetimeDonationHistory_Amount__c', None), ('Account.npe01__LifetimeDonationHistory_Number__c', None), ('Account.npe01__One2OneContact__c', None), ('Account.npe01__SYSTEM_AccountType__c', None), ('Account.npe01__SYSTEMIsIndividual__c', None), ('Account.npo02__AverageAmount__c', None), ('Account.npo02__Best_Gift_Year__c', None), ('Account.npo02__Best_Gift_Year_Total__c', None), ('Account.npo02__FirstCloseDate__c', None), ('Account.npo02__LargestAmount__c', None), ('Account.npo02__LastCloseDate__c', None), ('Account.npo02__LastMembershipAmount__c', None), ('Account.npo02__LastMembershipDate__c', None), ('Account.npo02__LastMembershipLevel__c', None), ('Account.npo02__LastMembershipOrigin__c', None), ('Account.npo02__LastOppAmount__c', None), ('Account.npo02__MembershipEndDate__c', None), ('Account.npo02__MembershipJoinDate__c', None), ('Account.npo02__NumberOfClosedOpps__c', None), ('Account.npo02__NumberOfMembershipOpps__c', None), ('Account.npo02__OppAmount2YearsAgo__c', None), ('Account.npo02__OppAmountLastNDays__c', None), ('Account.npo02__OppAmountLastYear__c', None), ('Account.npo02__OppAmountThisYear__c', None), ('Account.npo02__OppsClosed2YearsAgo__c', None), ('Account.npo02__OppsClosedLastNDays__c', None), ('Account.npo02__OppsClosedLastYear__c', None), ('Account.npo02__OppsClosedThisYear__c', None), ('Account.npo02__SmallestAmount__c', None), ('Account.npo02__TotalMembershipOppAmount__c', None), ('Account.npo02__TotalOppAmount__c', None), ('Account.NumberOfEmployees', None), ('Account.Ownership', None), ('Account.Parent', None), ('Account.Phone', None), ('Account.Rating', None), ('Account.ShippingAddress', None), ('Account.Sic', None), ('Account.SicDesc', None), ('Account.Site', None), ('Account.TickerSymbol', None), ('Account.Type', None), ('Account.Website', None), ('APXTConga4__Conga_Email_Staging__c.APXTConga4__HTMLBody__c', None), ('APXTConga4__Conga_Email_Staging__c.APXTConga4__Subject__c', None), ('APXTConga4__Conga_Email_Staging__c.APXTConga4__TextBody__c', None), ('APXTConga4__Conga_Email_Staging__c.APXTConga4__WhatId__c', None), ('APXTConga4__Conga_Email_Staging__c.APXTConga4__WhoId__c', None), ('APXTConga4__Conga_Email_Template__c.APXTConga4__Description__c', None), ('APXTConga4__Conga_Email_Template__c.APXTConga4__HTMLBody__c', None), ('APXTConga4__Conga_Email_Template__c.APXTConga4__Name__c', None), ('APXTConga4__Conga_Email_Template__c.APXTConga4__Subject__c', None), ('APXTConga4__Conga_Email_Template__c.APXTConga4__Template_Group__c', None), ('APXTConga4__Conga_Email_Template__c.APXTConga4__TextBody__c', None), ('APXTConga4__Conga_Template__c.APXTConga4__Description__c', None), ('APXTConga4__Conga_Template__c.APXTConga4__Label_Template_Use_Detail_Data__c', None), ('APXTConga4__Conga_Template__c.APXTConga4__Master_Field_to_Set_1__c', None), ('APXTConga4__Conga_Template__c.APXTConga4__Master_Field_to_Set_2__c', None), ('APXTConga4__Conga_Template__c.APXTConga4__Master_Field_to_Set_3__c', None), ('APXTConga4__Conga_Template__c.APXTConga4__Name__c', None), ('APXTConga4__Conga_Template__c.APXTConga4__Template_Group__c', None), ('APXTConga4__Conga_Template__c.APXTConga4__Template_Type__c', None), ('Asset.Account', None), ('Asset.Contact', None), ('Asset.Description', None), ('Asset.InstallDate', None), ('Asset.IsCompetitorProduct', None), ('Asset.Price', None), ('Asset.Product2', None), ('Asset.ProductCode', None), ('Asset.ProductDescription', None), ('Asset.ProductFamily', None), ('Asset.PurchaseDate', None), ('Asset.Quantity', None), ('Asset.SerialNumber', None), ('Asset.Status', None), ('Asset.UsageEndDate', None), ('bde__Batch__c.bde__Batch_Status__c', None), ('bde__Batch__c.bde__Description__c', None), ('bde__Batch__c.bde__Number_of_Items__c', None), ('Campaign.ActualCost', None), ('Campaign.AmountAllOpportunities', None), ('Campaign.AmountWonOpportunities', None), ('Campaign.BudgetedCost', None), ('Campaign.Description', None), ('Campaign.EndDate', None), ('Campaign.ExpectedResponse', None), ('Campaign.ExpectedRevenue', None), ('Campaign.HierarchyActualCost', None), ('Campaign.HierarchyAmountAllOpportunities', None), ('Campaign.HierarchyAmountWonOpportunities', None), ('Campaign.HierarchyBudgetedCost', None), ('Campaign.HierarchyExpectedRevenue', None), ('Campaign.HierarchyNumberOfContacts', None), ('Campaign.HierarchyNumberOfConvertedLeads', None), ('Campaign.HierarchyNumberOfLeads', None), ('Campaign.HierarchyNumberOfOpportunities', None), ('Campaign.HierarchyNumberOfResponses', None), ('Campaign.HierarchyNumberOfWonOpportunities', None), ('Campaign.HierarchyNumberSent', None), ('Campaign.IsActive', None), ('Campaign.NumberOfContacts', None), ('Campaign.NumberOfConvertedLeads', None), ('Campaign.NumberOfLeads', None), ('Campaign.NumberOfOpportunities', None), ('Campaign.NumberOfResponses', None), ('Campaign.NumberOfWonOpportunities', None), ('Campaign.NumberSent', None), ('Campaign.Parent', None), ('Campaign.StartDate', None), ('Campaign.Status', None), ('Campaign.Type', None), ('Case.Account', None), ('Case.Asset', None), ('Case.BusinessHours', None), ('Case.ClosedDate', None), ('Case.Contact', None), ('Case.Description', None), ('Case.IsClosedOnCreate', None), ('Case.IsEscalated', None), ('Case.IsSelfServiceClosed', None), ('Case.IsVisibleInSelfService', None), ('Case.Origin', None), ('Case.Parent', None), ('Case.Priority', None), ('Case.Reason', None), ('Case.Subject', None), ('Case.SuppliedCompany', None), ('Case.SuppliedEmail', None), ('Case.SuppliedName', None), ('Case.SuppliedPhone', None), ('Case.Type', None), ('Contact.Account', None), ('Contact.Age_Group__c', None), ('Contact.Asian_Ethnicity__c', None), ('Contact.AssistantName', None), ('Contact.AssistantPhone', None), ('Contact.bde__Batch__c', None), ('Contact.Birthdate', None), ('Contact.Department', None), ('Contact.Description', None), ('Contact.DoNotCall', None), ('Contact.Email', None), ('Contact.Fax', None), ('Contact.Full_Name__c', None), ('Contact.Full_Name_Last_First__c', None), ('Contact.Gender__c', None), ('Contact.HasOptedOutOfEmail', None), ('Contact.HasOptedOutOfFax', None), ('Contact.HomePhone', None), ('Contact.Jigsaw', None), ('Contact.LeadSource', None), ('Contact.MailingAddress', None), ('Contact.MC4SF__MC_Subscriber__c', None), ('Contact.Mismatch_Account_Name__c', None), ('Contact.MobilePhone', None), ('Contact.Non_US_Country__c', None), ('Contact.npe01__AlternateEmail__c', None), ('Contact.npe01__Home_Address__c', None), ('Contact.npe01__HomeEmail__c', None), ('Contact.npe01__Last_Donation_Date__c', None), ('Contact.npe01__Lifetime_Giving_History_Amount__c', None), ('Contact.npe01__Organization_Type__c', None), ('Contact.npe01__Other_Address__c', None), ('Contact.npe01__Preferred_Email__c', None), ('Contact.npe01__PreferredPhone__c', None), ('Contact.npe01__Primary_Address_Type__c', None), ('Contact.npe01__Private__c', None), ('Contact.npe01__Secondary_Address_Type__c', None), ('Contact.npe01__SystemAccountProcessor__c', None), ('Contact.npe01__SystemIsIndividual__c', None), ('Contact.npe01__Type_of_Account__c', None), ('Contact.npe01__Work_Address__c', None), ('Contact.npe01__WorkEmail__c', None), ('Contact.npe01__WorkPhone__c', None), ('Contact.npo02__AverageAmount__c', None), ('Contact.npo02__Best_Gift_Year__c', None), ('Contact.npo02__Best_Gift_Year_Total__c', None), ('Contact.npo02__FirstCloseDate__c', None), ('Contact.npo02__Formula_HouseholdMailingAddress__c', None), ('Contact.npo02__Formula_HouseholdPhone__c', None), ('Contact.npo02__Household__c', None), ('Contact.npo02__Household_Naming_Order__c', None), ('Contact.npo02__Languages__c', None), ('Contact.npo02__LargestAmount__c', None), ('Contact.npo02__LastCloseDate__c', None), ('Contact.npo02__LastCloseDateHH__c', None), ('Contact.npo02__LastMembershipAmount__c', None), ('Contact.npo02__LastMembershipDate__c', None), ('Contact.npo02__LastMembershipLevel__c', None), ('Contact.npo02__LastMembershipOrigin__c', None), ('Contact.npo02__LastOppAmount__c', None), ('Contact.npo02__Level__c', None), ('Contact.npo02__MembershipEndDate__c', None), ('Contact.npo02__MembershipJoinDate__c', None), ('Contact.npo02__Naming_Exclusions__c', None), ('Contact.npo02__NumberOfClosedOpps__c', None), ('Contact.npo02__NumberOfMembershipOpps__c', None), ('Contact.npo02__OppAmount2YearsAgo__c', None), ('Contact.npo02__OppAmountLastNDays__c', None), ('Contact.npo02__OppAmountLastYear__c', None), ('Contact.npo02__OppAmountLastYearHH__c', None), ('Contact.npo02__OppAmountThisYear__c', None), ('Contact.npo02__OppAmountThisYearHH__c', None), ('Contact.npo02__OppsClosed2YearsAgo__c', None), ('Contact.npo02__OppsClosedLastNDays__c', None), ('Contact.npo02__OppsClosedLastYear__c', None), ('Contact.npo02__OppsClosedThisYear__c', None), ('Contact.npo02__SmallestAmount__c', None), ('Contact.npo02__Soft_Credit_Last_Year__c', None), ('Contact.npo02__Soft_Credit_This_Year__c', None), ('Contact.npo02__Soft_Credit_Total__c', None), ('Contact.npo02__Soft_Credit_Two_Years_Ago__c', None), ('Contact.npo02__SystemHouseholdProcessor__c', None), ('Contact.npo02__Total_Household_Gifts__c', None), ('Contact.npo02__TotalMembershipOppAmount__c', None), ('Contact.npo02__TotalOppAmount__c', None), ('Contact.Occupation__c', None), ('Contact.OtherAddress', None), ('Contact.OtherPhone', None), ('Contact.Phone', None), ('Contact.Primary_Taiko_Group__c', None), ('Contact.Race__c', None), ('Contact.ReportsTo', None), ('Contact.Title', None), ('Contract.ActivatedBy', None), ('Contract.ActivatedDate', None), ('Contract.BillingAddress', None), ('Contract.CompanySigned', None), ('Contract.CompanySignedDate', None), ('Contract.ContractTerm', None), ('Contract.CustomerSigned', None), ('Contract.CustomerSignedDate', None), ('Contract.CustomerSignedTitle', None), ('Contract.Description', None), ('Contract.EndDate', None), ('Contract.Name', None), ('Contract.OwnerExpirationNotice', None), ('Contract.ShippingAddress', None), ('Contract.SpecialTerms', None), ('Contract.StartDate', None), ('Event.Description', None), ('Event.IsAllDayEvent', None), ('Event.IsVisibleInSelfService', None), ('Event.Location', None), ('Event.Type', None), ('Event.What', None), ('Event.Who', None), ('Idea.Attachment', None), ('Idea.Status', None), ('Lead.Additional_Donation__c', None), ('Lead.Address', None), ('Lead.Age_Group__c', None), ('Lead.AnnualRevenue', None), ('Lead.Asian_Ethnicity__c', None), ('Lead.bde__Batch__c', None), ('Lead.Comments__c', None), ('Lead.Description', None), ('Lead.DoNotCall', None), ('Lead.Email', None), ('Lead.Fax', None), ('Lead.Gender__c', None), ('Lead.HasOptedOutOfEmail', None), ('Lead.HasOptedOutOfFax', None), ('Lead.Industry', None), ('Lead.Jigsaw', None), ('Lead.LastTransferDate', None), ('Lead.LeadSource', None), ('Lead.MC4SF__MC_Subscriber__c', None), ('Lead.Membership_Type__c', None), ('Lead.MobilePhone', None), ('Lead.npe01__Preferred_Email__c', None), ('Lead.npe01__Preferred_Phone__c', None), ('Lead.NumberOfEmployees', None), ('Lead.Occupation__c', None), ('Lead.Opportunity_Record_Type__c', None), ('Lead.Phone', None), ('Lead.Primary_Taiko_Group__c', None), ('Lead.Publicity_OK__c', None), ('Lead.Race__c', None), ('Lead.Rating', None), ('Lead.Title', None), ('Lead.Website', None), ('MC4SF__MC_Campaign__c.MC4SF__Abuse_Reports__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Analytics__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Analytics_Tag__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Archive_URL__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Authenticate__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Auto_FB_Post__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Auto_Footer__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Auto_Tweet__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Campaign_Share_Report__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Clicks__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Content_Type__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Create_Time__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Ecomm360__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Emails_Sent__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Facebook_Likes__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Forwards__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Forwards_Opens__c', None), ('MC4SF__MC_Campaign__c.MC4SF__From_Email__c', None), ('MC4SF__MC_Campaign__c.MC4SF__From_Name__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Hard_Bounces__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Hourly_Stats_Emails_Sent__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Hourly_Stats_Unique_Opens__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Hourly_Status_Recipients_Click__c', None), ('MC4SF__MC_Campaign__c.MC4SF__HTML_Clicks_Tracked__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Inline_CSS__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Last_Click__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Last_Open__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Link_to_MC_Campaign__c', None), ('MC4SF__MC_Campaign__c.MC4SF__MailChimp_Folder_ID__c', None), ('MC4SF__MC_Campaign__c.MC4SF__MailChimp_List_ID__c', None), ('MC4SF__MC_Campaign__c.MC4SF__MailChimp_Template_ID__c', None), ('MC4SF__MC_Campaign__c.MC4SF__MailChimp_Web_ID__c', None), ('MC4SF__MC_Campaign__c.MC4SF__MC_List__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Opens__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Opens_Tracked__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Recipient_Likes__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Report_Password__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Report_Secure_URL__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Report_URL__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Segment_Opts__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Segmented_Text__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Send_Time__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Soft_Bounces__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Status__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Subject__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Syntax_Errors__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Text_Clicks_Tracked__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Timewarp__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Timewarp_Schedule__c', None), ('MC4SF__MC_Campaign__c.MC4SF__To_Name__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Type__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Type_Opts__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Unique_Clicks__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Unique_Likes__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Unique_Opens__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Unsubscribes__c', None), ('MC4SF__MC_Campaign__c.MC4SF__Users_Who_Clicked__c', None), ('MC4SF__MC_Campaign_Hourly_Stats__c.MC4SF__Emails_Sent__c', None), ('MC4SF__MC_Campaign_Hourly_Stats__c.MC4SF__Recipients_Click__c', None), ('MC4SF__MC_Campaign_Hourly_Stats__c.MC4SF__Statistics_Hour__c', None), ('MC4SF__MC_Campaign_Hourly_Stats__c.MC4SF__Unique_Opens__c', None), ('MC4SF__MC_Interest_Group__c.MC4SF__Bit__c', None), ('MC4SF__MC_Interest_Group__c.MC4SF__Deleted_In_MailChimp__c', None), ('MC4SF__MC_Interest_Group__c.MC4SF__Display_Order__c', None), ('MC4SF__MC_Interest_Group__c.MC4SF__Subscribers__c', None), ('MC4SF__MC_Interest_Grouping__c.MC4SF__Form_Field__c', None), ('MC4SF__MC_Interest_Grouping__c.MC4SF__MailChimp_ID__c', None), ('MC4SF__MC_List__c.MC4SF__Avg_Click_Rate__c', None), ('MC4SF__MC_List__c.MC4SF__Avg_Open_Rate__c', None), ('MC4SF__MC_List__c.MC4SF__Avg_Sub_Rate__c', None), ('MC4SF__MC_List__c.MC4SF__Avg_Unsub_Rate__c', None), ('MC4SF__MC_List__c.MC4SF__Beamer_Address__c', None), ('MC4SF__MC_List__c.MC4SF__Campaign_Count__c', None), ('MC4SF__MC_List__c.MC4SF__Cleaned_Count__c', None), ('MC4SF__MC_List__c.MC4SF__Cleaned_Count_Since_Send__c', None), ('MC4SF__MC_List__c.MC4SF__Create_New_Leads_From_MailChimp__c', None), ('MC4SF__MC_List__c.MC4SF__Date_Created__c', None), ('MC4SF__MC_List__c.MC4SF__Default_From_Email__c', None), ('MC4SF__MC_List__c.MC4SF__Default_From_Name__c', None), ('MC4SF__MC_List__c.MC4SF__Default_Language__c', None), ('MC4SF__MC_List__c.MC4SF__Default_Subject__c', None), ('MC4SF__MC_List__c.MC4SF__Email_Type_Option__c', None), ('MC4SF__MC_List__c.MC4SF__Group_Count__c', None), ('MC4SF__MC_List__c.MC4SF__Grouping_Count__c', None), ('MC4SF__MC_List__c.MC4SF__Last_Cleaned_Sync_Date__c', None), ('MC4SF__MC_List__c.MC4SF__Last_Subscribed_Sync_Date__c', None), ('MC4SF__MC_List__c.MC4SF__Last_Sync_Date__c', None), ('MC4SF__MC_List__c.MC4SF__Last_Sync_Status__c', None), ('MC4SF__MC_List__c.MC4SF__Last_Unsubscribed_Sync_Date__c', None), ('MC4SF__MC_List__c.MC4SF__List_Rating__c', None), ('MC4SF__MC_List__c.MC4SF__MailChimp_Web_ID__c', None), ('MC4SF__MC_List__c.MC4SF__Member_Count__c', None), ('MC4SF__MC_List__c.MC4SF__Member_Count_Since_Send__c', None), ('MC4SF__MC_List__c.MC4SF__Merge_Var_Count__c', None), ('MC4SF__MC_List__c.MC4SF__Modules__c', None), ('MC4SF__MC_List__c.MC4SF__Subscribe_URL_Long__c', None), ('MC4SF__MC_List__c.MC4SF__Subscribe_URL_Short__c', None), ('MC4SF__MC_List__c.MC4SF__Target_Sub_Rate__c', None), ('MC4SF__MC_List__c.MC4SF__Unmapped_Fields__c', None), ('MC4SF__MC_List__c.MC4SF__Unsubscribe_Count__c', None), ('MC4SF__MC_List__c.MC4SF__Unsubscribe_Count_Since_Send__c', None), ('MC4SF__MC_List__c.MC4SF__Use_Awesomebar__c', None), ('MC4SF__MC_List__c.MC4SF__Visibility__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Choices__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Contact_Field_Mapping__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Default_Value__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Field_Type__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Lead_Field_Mapping__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__MailChimp_ID__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Order__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Public__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Required__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__SFDC_Data_Type__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Show__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Size__c', None), ('MC4SF__MC_Merge_Variable__c.MC4SF__Tag__c', None), ('MC4SF__MC_Query__c.MC4SF__Campaign_Id__c', None), ('MC4SF__MC_Query__c.MC4SF__Campaign_Members__c', None), ('MC4SF__MC_Query__c.MC4SF__Campaign_Members_SOQL__c', None), ('MC4SF__MC_Query__c.MC4SF__Contacts__c', None), ('MC4SF__MC_Query__c.MC4SF__Contacts_SOQL__c', None), ('MC4SF__MC_Query__c.MC4SF__Error_Message__c', None), ('MC4SF__MC_Query__c.MC4SF__Interests__c', None), ('MC4SF__MC_Query__c.MC4SF__Last_Run__c', None), ('MC4SF__MC_Query__c.MC4SF__Last_Run_As__c', None), ('MC4SF__MC_Query__c.MC4SF__Leads__c', None), ('MC4SF__MC_Query__c.MC4SF__Leads_SOQL__c', None), ('MC4SF__MC_Query__c.MC4SF__Run_Daily_At__c', None), ('MC4SF__MC_Query__c.MC4SF__Static_Segments__c', None), ('MC4SF__MC_Query__c.MC4SF__Status__c', None), ('MC4SF__MC_Query__c.MC4SF__Subscribers_Added_last_run__c', None), ('MC4SF__MC_Query__c.MC4SF__User_Contacts_Only__c', None), ('MC4SF__MC_Query__c.MC4SF__User_Leads_Only__c', None), ('MC4SF__MC_Query_Filter__c.MC4SF__Display_Order__c', None), ('MC4SF__MC_Query_Filter__c.MC4SF__Error_Message__c', None), ('MC4SF__MC_Query_Filter__c.MC4SF__Field_Name__c', None), ('MC4SF__MC_Query_Filter__c.MC4SF__Field_Type__c', None), ('MC4SF__MC_Query_Filter__c.MC4SF__Object_Name__c', None), ('MC4SF__MC_Query_Filter__c.MC4SF__Operator__c', None), ('MC4SF__MC_Query_Filter__c.MC4SF__Value__c', None), ('MC4SF__MC_Static_Segment__c.MC4SF__Created_Date__c', None), ('MC4SF__MC_Static_Segment__c.MC4SF__Last_Reset__c', None), ('MC4SF__MC_Static_Segment__c.MC4SF__Last_Update__c', None), ('MC4SF__MC_Static_Segment__c.MC4SF__MailChimp_ID__c', None), ('MC4SF__MC_Static_Segment__c.MC4SF__Member_Count__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Country_Code__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Daylight_Savings_GMT_Offset__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Email_Address__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Email_Type__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Geographic_Location__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__GMT_Offset__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Golden_Monkey__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Info_Changed__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Interests__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__IP_Opt__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__IP_Signup__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Language__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Last_Activity_Date__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Last_Activity_Sync_Date__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Last_Sync_Date__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Lead_Validation_Errors__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Lists__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__MailChimp_Campaign_ID__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__MailChimp_ID__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__MailChimp_List_ID__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__MC_List__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Member_Rating__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Member_Rating_Image__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Member_Status__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge0__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge1__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge10__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge11__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge12__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge13__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge14__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge15__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge16__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge17__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge18__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge19__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge2__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge20__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge21__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge22__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge23__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge24__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge25__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge26__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge27__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge28__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge29__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge3__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge30__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge4__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge5__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge6__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge7__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge8__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Merge9__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Notes__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Parent_MC_Subscriber__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Region__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Static_Segments__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Status_Reason__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Status_Reason_Text__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Status_Timestamp__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Subscriber_Last_Modified_Since_Sync_Date__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Time_Zone__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Timestamp_Opt__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Timestamp_Signup__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__View_Subscriber_in_MC__c', None), ('MC4SF__MC_Subscriber__c.MC4SF__Web_ID__c', None), ('MC4SF__MC_Subscriber_Activity__c.MC4SF__Action__c', None), ('MC4SF__MC_Subscriber_Activity__c.MC4SF__Bounce_Type__c', None), ('MC4SF__MC_Subscriber_Activity__c.MC4SF__MailChimp_Campaign_ID__c', None), ('MC4SF__MC_Subscriber_Activity__c.MC4SF__MC_Campaign__c', None), ('MC4SF__MC_Subscriber_Activity__c.MC4SF__MC_List__c', None), ('MC4SF__MC_Subscriber_Activity__c.MC4SF__Text_URL__c', None), ('MC4SF__MC_Subscriber_Activity__c.MC4SF__Timestamp__c', None), ('MC4SF__MC_Subscriber_Activity__c.MC4SF__Type__c', None), ('MC4SF__MC_Subscriber_Activity__c.MC4SF__URL__c', None), ('npe01__OppPayment__c.npe01__Check_Reference_Number__c', None), ('npe01__OppPayment__c.npe01__Custom_Payment_Field__c', None), ('npe01__OppPayment__c.npe01__Paid__c', None), ('npe01__OppPayment__c.npe01__Payment_Amount__c', None), ('npe01__OppPayment__c.npe01__Payment_Date__c', None), ('npe01__OppPayment__c.npe01__Payment_Method__c', None), ('npe01__OppPayment__c.npe01__Scheduled_Date__c', None), ('npe01__OppPayment__c.npe01__Written_Off__c', None), ('npe03__Recurring_Donation__c.npe03__Amount__c', None), ('npe03__Recurring_Donation__c.npe03__Contact__c', None), ('npe03__Recurring_Donation__c.npe03__Date_Established__c', None), ('npe03__Recurring_Donation__c.npe03__Donor_Name__c', None), ('npe03__Recurring_Donation__c.npe03__Installment_Amount__c', None), ('npe03__Recurring_Donation__c.npe03__Installment_Period__c', None), ('npe03__Recurring_Donation__c.npe03__Installments__c', None), ('npe03__Recurring_Donation__c.npe03__Last_Payment_Date__c', None), ('npe03__Recurring_Donation__c.npe03__Next_Payment_Date__c', None), ('npe03__Recurring_Donation__c.npe03__Open_Ended_Status__c', None), ('npe03__Recurring_Donation__c.npe03__Organization__c', None), ('npe03__Recurring_Donation__c.npe03__Paid_Amount__c', None), ('npe03__Recurring_Donation__c.npe03__Recurring_Donation_Campaign__c', None), ('npe03__Recurring_Donation__c.npe03__Schedule_Type__c', None), ('npe03__Recurring_Donation__c.npe03__Total__c', None), ('npe03__Recurring_Donation__c.npe03__Total_Paid_Installments__c', None), ('npe4__Relationship__c.npe4__Description__c', None), ('npe4__Relationship__c.npe4__ReciprocalRelationship__c', None), ('npe4__Relationship__c.npe4__RelatedContact__c', None), ('npe4__Relationship__c.npe4__Relationship_Explanation__c', None), ('npe4__Relationship__c.npe4__Status__c', None), ('npe4__Relationship__c.npe4__SYSTEM_SystemCreated__c', None), ('npe4__Relationship__c.npe4__Type__c', None), ('npe4__Relationship_Error__c.npe4__Error_Date_Time__c', None), ('npe4__Relationship_Error__c.npe4__Error_Record_Link__c', None), ('npe4__Relationship_Error__c.npe4__Error_Stack_Trace__c', None), ('npe4__Relationship_Error__c.npe4__Error_Type__c', None), ('npe4__Relationship_Error__c.npe4__Full_Error_Message__c', None), ('npe5__Affiliation__c.npe5__Description__c', None), ('npe5__Affiliation__c.npe5__EndDate__c', None), ('npe5__Affiliation__c.npe5__Role__c', None), ('npe5__Affiliation__c.npe5__StartDate__c', None), ('npe5__Affiliation__c.npe5__Status__c', None), ('npe5__Affiliation__c.Primary_Group__c', None), ('npo02__Household__c.npo02__Addressee__c', None), ('npo02__Household__c.npo02__Always_Anonymous__c', None), ('npo02__Household__c.npo02__AverageAmount__c', None), ('npo02__Household__c.npo02__Best_Gift_Year__c', None), ('npo02__Household__c.npo02__Best_Gift_Year_Total__c', None), ('npo02__Household__c.npo02__FirstCloseDate__c', None), ('npo02__Household__c.npo02__Formal_Greeting__c', None), ('npo02__Household__c.npo02__Formula_MailingAddress__c', None), ('npo02__Household__c.npo02__Household_ID__c', None), ('npo02__Household__c.npo02__HouseholdEmail__c', None), ('npo02__Household__c.npo02__HouseholdPhone__c', None), ('npo02__Household__c.npo02__Informal_Greeting__c', None), ('npo02__Household__c.npo02__LargestAmount__c', None), ('npo02__Household__c.npo02__LastCloseDate__c', None), ('npo02__Household__c.npo02__LastMembershipAmount__c', None), ('npo02__Household__c.npo02__LastMembershipDate__c', None), ('npo02__Household__c.npo02__LastMembershipLevel__c', None), ('npo02__Household__c.npo02__LastMembershipOrigin__c', None), ('npo02__Household__c.npo02__LastOppAmount__c', None), ('npo02__Household__c.npo02__MailingCity__c', None), ('npo02__Household__c.npo02__MailingCountry__c', None), ('npo02__Household__c.npo02__MailingPostalCode__c', None), ('npo02__Household__c.npo02__MailingState__c', None), ('npo02__Household__c.npo02__MailingStreet__c', None), ('npo02__Household__c.npo02__Membership_Span__c', None), ('npo02__Household__c.npo02__Membership_Status__c', None), ('npo02__Household__c.npo02__MembershipEndDate__c', None), ('npo02__Household__c.npo02__MembershipJoinDate__c', None), ('npo02__Household__c.npo02__NumberOfClosedOpps__c', None), ('npo02__Household__c.npo02__NumberOfMembershipOpps__c', None), ('npo02__Household__c.npo02__OppAmount2YearsAgo__c', None), ('npo02__Household__c.npo02__OppAmountLastNDays__c', None), ('npo02__Household__c.npo02__OppAmountLastYear__c', None), ('npo02__Household__c.npo02__OppAmountThisYear__c', None), ('npo02__Household__c.npo02__OppsClosed2YearsAgo__c', None), ('npo02__Household__c.npo02__OppsClosedLastNDays__c', None), ('npo02__Household__c.npo02__OppsClosedLastYear__c', None), ('npo02__Household__c.npo02__OppsClosedThisYear__c', None), ('npo02__Household__c.npo02__SmallestAmount__c', None), ('npo02__Household__c.npo02__SYSTEM_CUSTOM_NAMING__c', None), ('npo02__Household__c.npo02__TotalMembershipOppAmount__c', None), ('npo02__Household__c.npo02__TotalOppAmount__c', None), ('Opportunity.Account', None), ('Opportunity.Additional_Gift_Given__c', None), ('Opportunity.Amount', None), ('Opportunity.bde__Batch__c', None), ('Opportunity.Campaign', None), ('Opportunity.Description', None), ('Opportunity.ExpectedRevenue', None), ('Opportunity.IsPrivate', None), ('Opportunity.LeadSource', None), ('Opportunity.Membership_Type__c', None), ('Opportunity.NextStep', None), ('Opportunity.npe01__Amount_Outstanding__c', None), ('Opportunity.npe01__Amount_Written_Off__c', None), ('Opportunity.npe01__Contact_Id_for_Role__c', None), ('Opportunity.npe01__Do_Not_Automatically_Create_Payment__c', None), ('Opportunity.npe01__Is_Opp_From_Individual__c', None), ('Opportunity.npe01__Member_Level__c', None), ('Opportunity.npe01__Membership_End_Date__c', None), ('Opportunity.npe01__Membership_Origin__c', None), ('Opportunity.npe01__Membership_Start_Date__c', None), ('Opportunity.npe01__Number_of_Payments__c', None), ('Opportunity.npe01__Payments_Made__c', None), ('Opportunity.npe03__Recurring_Donation__c', None), ('Opportunity.npo02__CombinedRollupFieldset__c', None), ('Opportunity.npo02__CurrentGenerators__c', None), ('Opportunity.npo02__DeliveryInstallationStatus__c', None), ('Opportunity.npo02__MainCompetitors__c', None), ('Opportunity.npo02__OrderNumber__c', None), ('Opportunity.npo02__systemHouseholdContactRoleProcessor__c', None), ('Opportunity.npo02__TrackingNumber__c', None), ('Opportunity.Primary_Affiliation__c', None), ('Opportunity.Probability', None), ('Opportunity.TotalOpportunityQuantity', None), ('Opportunity.Type', None), ('OpportunityLineItem.Description', None), ('OpportunityLineItem.Discount', None), ('OpportunityLineItem.ListPrice', None), ('OpportunityLineItem.ProductCode', None), ('OpportunityLineItem.ServiceDate', None), ('OpportunityLineItem.Subtotal', None), ('OpportunityLineItem.TotalPrice', None), ('Product2.Description', None), ('Product2.Family', None), ('Product2.ProductCode', None), ('SFSSDupeCatcher__Application_Settings__c.SFSSDupeCatcher__Admin_Email__c', None), ('SFSSDupeCatcher__Application_Settings__c.SFSSDupeCatcher__Customer_Subdomain_URL__c', None), ('SFSSDupeCatcher__DcIn__c.SFSSDupeCatcher__P1__c', None), ('SFSSDupeCatcher__DcIn__c.SFSSDupeCatcher__P2__c', None), ('SFSSDupeCatcher__DcIn__c.SFSSDupeCatcher__P3__c', None), ('SFSSDupeCatcher__DcIn__c.SFSSDupeCatcher__P4__c', None), ('SFSSDupeCatcher__DcIn__c.SFSSDupeCatcher__P5__c', None), ('SFSSDupeCatcher__DcIn__c.SFSSDupeCatcher__R1__c', None), ('SFSSDupeCatcher__DcIn__c.SFSSDupeCatcher__stat__c', None), ('SFSSDupeCatcher__DcIn__c.SFSSDupeCatcher__T1__c', None), ('SFSSDupeCatcher__Duplicate_Warning__c.SFSSDupeCatcher__Scenario_Type__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c.SFSSDupeCatcher__Account__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c.SFSSDupeCatcher__Contact__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c.SFSSDupeCatcher__Contact_Display__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c.SFSSDupeCatcher__Email__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c.SFSSDupeCatcher__Lead__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c.SFSSDupeCatcher__Lead_Display__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c.SFSSDupeCatcher__Object_Type__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c.SFSSDupeCatcher__Phone__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c.SFSSDupeCatcher__Scenario_Type__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c.SFSSDupeCatcher__Warning_Display__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Blocked_Duplicates__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Bypass_Security__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Converted_Duplicates__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Create_Tasks_for_Warnings__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Deployed__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Duplicate_Warning_Count__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Error_Message__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Match_On_Insert_Action__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Match_On_Update_Action__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Merged_Duplicates__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Person_Account_Filter__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Potential_Duplicate_Count__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Scenario_Rule_Count__c', None), ('SFSSDupeCatcher__Scenario__c.SFSSDupeCatcher__Scenario_Type__c', None), ('SFSSDupeCatcher__Scenario_Rule__c.SFSSDupeCatcher__First_N_Letters__c', None), ('SFSSDupeCatcher__Scenario_Rule__c.SFSSDupeCatcher__Fuzzy_Match__c', None), ('SFSSDupeCatcher__Scenario_Rule__c.SFSSDupeCatcher__Mapping_Approach__c', None), ('SFSSDupeCatcher__Scenario_Rule__c.SFSSDupeCatcher__Match_Blanks__c', None), ('SFSSDupeCatcher__Scenario_Rule__c.SFSSDupeCatcher__Match_field__c', None), ('SFSSDupeCatcher__Scenario_Rule__c.SFSSDupeCatcher__Scenario_Formula__c', None), ('SFSSDupeCatcher__Scenario_Rule__c.SFSSDupeCatcher__Scenario_Type__c', None), ('SFSSDupeCatcher__Scenario_Rule__c.SFSSDupeCatcher__Scenario_Type_Formula__c', None), ('SFSSDupeCatcher__Scenario_Rule__c.SFSSDupeCatcher__Target_Match_Field__c', None), ('Solution.IsPublished', None), ('Solution.IsPublishedInPublicKb', None), ('Solution.SolutionNote', None), ('Task.ActivityDate', None), ('Task.Description', None), ('Task.IsVisibleInSelfService', None), ('Task.Type', None), ('Task.What', None), ('Task.Who', None)])
    permissionsedit = models.BooleanField(db_column='PermissionsEdit', verbose_name='Edit Field')
    permissionsread = models.BooleanField(db_column='PermissionsRead', verbose_name='Read Field')
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'FieldPermissions'
        verbose_name = 'Field Permissions'
        verbose_name_plural = 'Field Permissions'
        # keyPrefix = '01k'

class Fiscalyearsettings(models.Model):
    periodid = models.ForeignKey('Period', related_name='fiscalyearsettings_periodid_set', db_column='PeriodId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    startdate = models.DateField(db_column='StartDate', verbose_name='Start Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    enddate = models.DateField(db_column='EndDate', verbose_name='End Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name', sf_read_only=models.READ_ONLY)
    isstandardyear = models.BooleanField(db_column='IsStandardYear', verbose_name='Is Standard Year', sf_read_only=models.READ_ONLY)
    yeartype = models.CharField(db_column='YearType', max_length=40, verbose_name='Year Type', sf_read_only=models.READ_ONLY, choices=[('Standard', None), ('Custom', None), ('Placeholder', None)], blank=True)
    quarterlabelscheme = models.CharField(db_column='QuarterLabelScheme', max_length=40, verbose_name='Quarter Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Numbered By Year'), ('Custom', 'Custom Quarter Names')], blank=True)
    periodlabelscheme = models.CharField(db_column='PeriodLabelScheme', max_length=40, verbose_name='Period Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Numbered By Year'), ('NumberByQuarter', 'Numbered By Quarter'), ('StandardMonths', 'Standard Month Names'), ('Custom', 'Custom Period Names')], blank=True)
    weeklabelscheme = models.CharField(db_column='WeekLabelScheme', max_length=40, verbose_name='Week Name Scheme', sf_read_only=models.READ_ONLY, choices=[('NumberByYear', 'Year'), ('NumberByQuarter', 'Quarter'), ('NumberByPeriod', 'Period')], blank=True)
    quarterprefix = models.CharField(db_column='QuarterPrefix', max_length=40, verbose_name='Quarter Prefix', sf_read_only=models.READ_ONLY, choices=[('Quarter', 'Quarter'), ('FQ', 'FQ'), ('Q', 'Q'), ('Trimester', 'Trimester')], blank=True)
    periodprefix = models.CharField(db_column='PeriodPrefix', max_length=40, verbose_name='Period Prefix', sf_read_only=models.READ_ONLY, choices=[('Period', 'Period'), ('FP', 'FP'), ('P', 'P'), ('Month', 'Month')], blank=True)
    weekstartday = models.IntegerField(db_column='WeekStartDay', verbose_name='Week Start Day', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'FiscalYearSettings'
        verbose_name = 'Fiscal Year Settings'
        verbose_name_plural = 'Fiscal Year Settings'
        # keyPrefix = '022'

class Folder(models.Model):
    name = models.CharField(db_column='Name', max_length=40, verbose_name='Name')
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Folder Unique Name', blank=True)
    accesstype = models.CharField(db_column='AccessType', max_length=40, verbose_name='Access Type', choices=[('Shared', 'Shared'), ('Public', 'Public'), ('Hidden', 'Hidden'), ('PublicInternal', 'Public Internal')])
    isreadonly = models.BooleanField(db_column='IsReadonly', verbose_name='Read Only')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('Document', 'Document'), ('Email', 'Email Template'), ('Report', 'Report'), ('Dashboard', 'Dashboard')])
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='folder_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='folder_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Folder'
        verbose_name = 'Folder'
        verbose_name_plural = 'Folders'
        # keyPrefix = '00l'

class Forecastshare(models.Model):
    userroleid = models.ForeignKey('Userrole', sf_read_only=models.READ_ONLY, db_column='UserRoleId')
    userorgroupid = models.ForeignKey('Group', sf_read_only=models.READ_ONLY, db_column='UserOrGroupId')
    accesslevel = models.CharField(db_column='AccessLevel', max_length=40, verbose_name='Forecast Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    cansubmit = models.BooleanField(db_column='CanSubmit', verbose_name='Submit Allowed', sf_read_only=models.READ_ONLY)
    rowcause = models.CharField(db_column='RowCause', max_length=40, verbose_name='Row Cause', sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule')])
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='LastModifiedById')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ForecastShare'
        verbose_name = 'Forecast Share'
        verbose_name_plural = 'Forecast Share'
        # keyPrefix = '608'

class Googledoc(models.Model):
    url = models.CharField(db_column='Url', max_length=255, verbose_name='Google Doc URL', blank=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Google Doc Name')
    owner = models.ForeignKey('User', db_column='OwnerId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('Selfserviceuser', related_name='googledoc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('Selfserviceuser', related_name='googledoc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'GoogleDoc'
        verbose_name = 'Google Doc'
        verbose_name_plural = 'Google Docs'
        # keyPrefix = '098'

class Group(models.Model):
    name = models.CharField(db_column='Name', max_length=40, verbose_name='Name')
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Developer Name', blank=True)
    relatedid = models.ForeignKey('User', related_name='group_relatedid_set', db_column='RelatedId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('AllCustomerPortal', None), ('CollaborationGroup', None), ('Manager', None), ('ManagerAndSubordinatesInternal', None), ('Organization', None), ('PRMOrganization', None), ('Queue', None), ('Regular', None), ('Role', None), ('RoleAndSubordinates', None), ('RoleAndSubordinatesInternal', None), ('SharingRuleGroup', None), ('Territory', None), ('TerritoryAndSubordinates', None)])
    email = models.EmailField(db_column='Email', verbose_name='Email', blank=True, null=True)
    owner = models.ForeignKey('Organization', sf_read_only=models.READ_ONLY, db_column='OwnerId')
    doessendemailtomembers = models.BooleanField(db_column='DoesSendEmailToMembers', verbose_name='Send Email to Members')
    doesincludebosses = models.BooleanField(db_column='DoesIncludeBosses', verbose_name='Include Bosses')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='group_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='group_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Group'
        verbose_name = 'Group'
        verbose_name_plural = 'Group'
        # keyPrefix = '00G'

class Groupmember(models.Model):
    group = models.ForeignKey(Group, related_name='groupmember_group_set', db_column='GroupId', sf_read_only=models.NOT_UPDATEABLE)
    userorgroupid = models.ForeignKey(Group, related_name='groupmember_userorgroupid_set', db_column='UserOrGroupId', sf_read_only=models.NOT_UPDATEABLE)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'GroupMember'
        verbose_name = 'Group Member'
        verbose_name_plural = 'Group Member'
        # keyPrefix = '011'

class Hashtagdefinition(models.Model):
    namenorm = models.CharField(db_column='NameNorm', max_length=765, verbose_name='Normalized Hashtag Text', sf_read_only=models.READ_ONLY, blank=True)
    name = models.CharField(db_column='Name', max_length=765, verbose_name='Hashtag Text', sf_read_only=models.READ_ONLY, blank=True)
    hashtagcount = models.IntegerField(db_column='HashtagCount', verbose_name='Hashtag Count', sf_read_only=models.READ_ONLY, blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'HashtagDefinition'
        verbose_name = 'Hashtag Definition'
        verbose_name_plural = 'Hashtag Definitions'
        # keyPrefix = '0hd'

class Holiday(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Holiday Name')
    description = models.CharField(db_column='Description', max_length=100, verbose_name='Description', blank=True)
    isallday = models.BooleanField(db_column='IsAllDay', verbose_name='All Day')
    activitydate = models.DateField(db_column='ActivityDate', verbose_name='Holiday Date', blank=True, null=True)
    starttimeinminutes = models.IntegerField(db_column='StartTimeInMinutes', verbose_name='Start Time In Minutes From Midnight', blank=True, null=True)
    endtimeinminutes = models.IntegerField(db_column='EndTimeInMinutes', verbose_name='End Time In Minutes From Midnight', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='holiday_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='holiday_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isrecurrence = models.BooleanField(db_column='IsRecurrence', verbose_name='Recurring Holiday')
    recurrencestartdate = models.DateField(db_column='RecurrenceStartDate', verbose_name='Start Date', blank=True, null=True)
    recurrenceenddateonly = models.DateField(db_column='RecurrenceEndDateOnly', verbose_name='End Date', blank=True, null=True)
    recurrencetype = models.CharField(db_column='RecurrenceType', max_length=40, verbose_name='Recurrence Type', choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True)
    recurrenceinterval = models.IntegerField(db_column='RecurrenceInterval', verbose_name='Recurrence Interval', blank=True, null=True)
    recurrencedayofweekmask = models.IntegerField(db_column='RecurrenceDayOfWeekMask', verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrencedayofmonth = models.IntegerField(db_column='RecurrenceDayOfMonth', verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrenceinstance = models.CharField(db_column='RecurrenceInstance', max_length=40, verbose_name='Recurrence Instance', choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True)
    recurrencemonthofyear = models.CharField(db_column='RecurrenceMonthOfYear', max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Holiday'
        verbose_name = 'Holiday'
        verbose_name_plural = 'Holidays'
        # keyPrefix = '0C0'

class Idea(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title')
    recordtype = models.ForeignKey('Recordtype', sf_read_only=models.READ_ONLY, db_column='RecordTypeId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='idea_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='idea_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    community = models.ForeignKey(Community, sf_read_only=models.NOT_UPDATEABLE, db_column='CommunityId')
    body = models.TextField(db_column='Body', verbose_name='Idea Body', blank=True)
    numcomments = models.IntegerField(db_column='NumComments', verbose_name='Number of Comments', sf_read_only=models.READ_ONLY, blank=True, null=True)
    votescore = models.DecimalField(db_column='VoteScore', max_digits=18, decimal_places=4, verbose_name='Vote Score', sf_read_only=models.READ_ONLY, blank=True, null=True)
    votetotal = models.DecimalField(db_column='VoteTotal', max_digits=18, decimal_places=0, verbose_name='Vote Total', sf_read_only=models.READ_ONLY, blank=True, null=True)
    categories = models.CharField(db_column='Categories', max_length=4099, verbose_name='Categories', blank=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', blank=True)
    lastcommentdate = models.DateTimeField(db_column='LastCommentDate', verbose_name='Last Idea Comment Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastcomment = models.ForeignKey('Ideacomment', related_name='idea_lastcomment_set', db_column='LastCommentId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    parentidea = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='ParentIdeaId', blank=True, null=True)
    ishtml = models.BooleanField(db_column='IsHtml', verbose_name='IsHtml', sf_read_only=models.READ_ONLY)
    ismerged = models.BooleanField(db_column='IsMerged', verbose_name='Is Merged', sf_read_only=models.READ_ONLY)
    creatorfullphotourl = models.CharField(db_column='CreatorFullPhotoUrl', max_length=255, verbose_name="Url of Creator's Profile Photo", sf_read_only=models.READ_ONLY, blank=True)
    creatorsmallphotourl = models.CharField(db_column='CreatorSmallPhotoUrl', max_length=255, verbose_name="Url of Creator's Thumbnail Photo", sf_read_only=models.READ_ONLY, blank=True)
    creatorname = models.CharField(db_column='CreatorName', max_length=121, verbose_name='Name of Creator', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Idea'
        verbose_name = 'Idea'
        verbose_name_plural = 'Ideas'
        # keyPrefix = '087'

class Ideacomment(models.Model):
    idea = models.ForeignKey(Idea, sf_read_only=models.NOT_UPDATEABLE, db_column='IdeaId')
    communityid = models.ForeignKey(Community, sf_read_only=models.READ_ONLY, db_column='CommunityId', blank=True, null=True)
    commentbody = models.TextField(db_column='CommentBody', verbose_name='Comment Body', blank=True)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    ishtml = models.BooleanField(db_column='IsHtml', verbose_name='IsHtml', sf_read_only=models.READ_ONLY)
    creatorfullphotourl = models.CharField(db_column='CreatorFullPhotoUrl', max_length=255, verbose_name="Url of Creator's Profile Photo", sf_read_only=models.READ_ONLY, blank=True)
    creatorsmallphotourl = models.CharField(db_column='CreatorSmallPhotoUrl', max_length=255, verbose_name="Url of Creator's Thumbnail Photo", sf_read_only=models.READ_ONLY, blank=True)
    creatorname = models.CharField(db_column='CreatorName', max_length=121, verbose_name='Name of Creator', sf_read_only=models.READ_ONLY, blank=True)
    upvotes = models.IntegerField(db_column='UpVotes', verbose_name='Up Votes', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'IdeaComment'
        verbose_name = 'Idea Comment'
        verbose_name_plural = 'Idea Comments'
        # keyPrefix = '00a'

class Lead(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    masterrecord = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='MasterRecordId', blank=True, null=True)
    lastname = models.CharField(db_column='LastName', max_length=80, verbose_name='Last Name')
    firstname = models.CharField(db_column='FirstName', max_length=40, verbose_name='First Name', blank=True)
    salutation = models.CharField(db_column='Salutation', max_length=40, verbose_name='Salutation', choices=[('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.')], blank=True)
    name = models.CharField(db_column='Name', max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=128, verbose_name='Title', blank=True)
    company = models.CharField(db_column='Company', max_length=255, verbose_name='Company')
    street = models.TextField(db_column='Street', verbose_name='Street', blank=True)
    city = models.CharField(db_column='City', max_length=40, verbose_name='City', blank=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', blank=True)
    postalcode = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', blank=True)
    country = models.CharField(db_column='Country', max_length=80, verbose_name='Country', blank=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, verbose_name='Latitude', blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, verbose_name='Longitude', blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Phone', blank=True)
    mobilephone = models.CharField(db_column='MobilePhone', max_length=40, verbose_name='Mobile Phone', blank=True)
    fax = models.CharField(db_column='Fax', max_length=40, verbose_name='Fax', blank=True)
    email = models.EmailField(db_column='Email', verbose_name='Email', blank=True, null=True)
    website = models.URLField(db_column='Website', verbose_name='Website', blank=True, null=True)
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    leadsource = models.CharField(db_column='LeadSource', max_length=40, verbose_name='Lead Source', choices=[('Web', 'Web'), ('NATC List', 'NATC List')], blank=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('Open - Not Contacted', 'Open - Not Contacted'), ('Working - Contacted', 'Working - Contacted'), ('Closed - Converted', 'Closed - Converted'), ('Closed - Not Converted', 'Closed - Not Converted')])
    industry = models.CharField(db_column='Industry', max_length=40, verbose_name='Industry', choices=[('Agriculture', 'Agriculture'), ('Apparel', 'Apparel'), ('Banking', 'Banking'), ('Biotechnology', 'Biotechnology'), ('Chemicals', 'Chemicals'), ('Communications', 'Communications'), ('Construction', 'Construction'), ('Consulting', 'Consulting'), ('Education', 'Education'), ('Electronics', 'Electronics'), ('Energy', 'Energy'), ('Engineering', 'Engineering'), ('Entertainment', 'Entertainment'), ('Environmental', 'Environmental'), ('Finance', 'Finance'), ('Food & Beverage', 'Food & Beverage'), ('Government', 'Government'), ('Healthcare', 'Healthcare'), ('Hospitality', 'Hospitality'), ('Insurance', 'Insurance'), ('Machinery', 'Machinery'), ('Manufacturing', 'Manufacturing'), ('Media', 'Media'), ('Not For Profit', 'Not For Profit'), ('Recreation', 'Recreation'), ('Retail', 'Retail'), ('Shipping', 'Shipping'), ('Technology', 'Technology'), ('Telecommunications', 'Telecommunications'), ('Transportation', 'Transportation'), ('Utilities', 'Utilities'), ('Other', 'Other')], blank=True)
    rating = models.CharField(db_column='Rating', max_length=40, verbose_name='Rating', choices=[('Hot', 'Hot'), ('Warm', 'Warm'), ('Cold', 'Cold')], blank=True)
    annualrevenue = models.DecimalField(db_column='AnnualRevenue', max_digits=18, decimal_places=0, verbose_name='Annual Revenue', blank=True, null=True)
    numberofemployees = models.IntegerField(db_column='NumberOfEmployees', verbose_name='Employees', blank=True, null=True)
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isconverted = models.BooleanField(db_column='IsConverted', verbose_name='Converted', sf_read_only=models.NOT_UPDATEABLE)
    converteddate = models.DateField(db_column='ConvertedDate', verbose_name='Converted Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    convertedaccount = models.ForeignKey(Account, sf_read_only=models.READ_ONLY, db_column='ConvertedAccountId', blank=True, null=True)
    convertedcontact = models.ForeignKey(Contact, sf_read_only=models.READ_ONLY, db_column='ConvertedContactId', blank=True, null=True)
    convertedopportunity = models.ForeignKey('Opportunity', sf_read_only=models.READ_ONLY, db_column='ConvertedOpportunityId', blank=True, null=True)
    isunreadbyowner = models.BooleanField(db_column='IsUnreadByOwner', verbose_name='Unread By Owner')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='lead_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='lead_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    jigsaw = models.CharField(db_column='Jigsaw', max_length=20, verbose_name='Data.com Key', blank=True)
    jigsawcontactid = models.CharField(db_column='JigsawContactId', max_length=20, verbose_name='Jigsaw Contact ID', sf_read_only=models.READ_ONLY, blank=True)
    emailbouncedreason = models.CharField(db_column='EmailBouncedReason', max_length=255, verbose_name='Email Bounced Reason', sf_read_only=models.NOT_CREATEABLE, blank=True)
    emailbounceddate = models.DateTimeField(db_column='EmailBouncedDate', verbose_name='Email Bounced Date', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    npe01_preferred_email_c = models.CharField(db_column='npe01__Preferred_Email__c', max_length=255, verbose_name='Preferred Email', choices=[('Personal', 'Personal'), ('Work', 'Work'), ('Alternate', 'Alternate')], blank=True)
    npe01_preferred_phone_c = models.CharField(db_column='npe01__Preferred_Phone__c', max_length=255, verbose_name='Preferred Phone', choices=[('Home', 'Home'), ('Work', 'Work'), ('Mobile', 'Mobile'), ('Other', 'Other')], blank=True)
    bde_batch_c = models.ForeignKey('BdeBatchC', db_column='bde__Batch__c', blank=True, null=True)
    mc4sf_mc_subscriber_c = models.ForeignKey('Mc4SfMcSubscriberC', db_column='MC4SF__MC_Subscriber__c', blank=True, null=True)
    primary_taiko_group_c = models.CharField(db_column='Primary_Taiko_Group__c', max_length=100, verbose_name='Primary Taiko Group', blank=True)
    age_group_c = models.CharField(db_column='Age_Group__c', max_length=255, verbose_name='Age Group', choices=[('10 or under', '10 or under'), ('11-17', '11-17'), ('18-25', '18-25'), ('26-30', '26-30'), ('31-39', '31-39'), ('40-49', '40-49'), ('50-59', '50-59'), ('60-69', '60-69'), ('70+', '70+')], blank=True)
    occupation_c = models.CharField(db_column='Occupation__c', max_length=100, verbose_name='Occupation', blank=True)
    gender_c = models.CharField(db_column='Gender__c', max_length=255, verbose_name='Gender', choices=[('Female', 'Female'), ('Male', 'Male'), ('Decline to state', 'Decline to state')], blank=True)
    opportunity_record_type_c = models.CharField(db_column='Opportunity_Record_Type__c', max_length=255, verbose_name='Opportunity Record Type', choices=[('Donation', 'Donation'), ('Event', 'Event'), ('Membership', 'Membership')], blank=True)
    membership_type_c = models.CharField(db_column='Membership_Type__c', max_length=255, verbose_name='Membership Type', choices=[('Regular', 'Regular'), ('Student', 'Student')], blank=True)
    additional_donation_c = models.DecimalField(db_column='Additional_Donation__c', max_digits=18, decimal_places=0, verbose_name='Additional Donation', blank=True, null=True)
    publicity_ok_c = models.CharField(db_column='Publicity_OK__c', max_length=255, verbose_name='Publicity OK', choices=[('Yes', 'Yes'), ('No', 'No')], blank=True)
    comments_c = models.TextField(db_column='Comments__c', verbose_name='Comments', blank=True)
    asian_ethnicity_c = models.CharField(db_column='Asian_Ethnicity__c', max_length=250, verbose_name='Asian Ethnicity', blank=True)
    race_c = models.CharField(db_column='Race__c', max_length=250, verbose_name='Race', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Lead'
        verbose_name = 'Lead'
        verbose_name_plural = 'Leads'
        # keyPrefix = '00Q'

class Leadfeed(models.Model):
    parent = models.ForeignKey(Lead, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='leadfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='leadfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'LeadFeed'
        verbose_name = 'Lead Feed'
        verbose_name_plural = 'Lead Feed'
        # keyPrefix = 'None'

class Leadhistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lead = models.ForeignKey(Lead, sf_read_only=models.READ_ONLY, db_column='LeadId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Additional_Donation__c', None), ('Address', None), ('Age_Group__c', None), ('AnnualRevenue', None), ('Asian_Ethnicity__c', None), ('bde__Batch__c', None), ('City', None), ('Comments__c', None), ('Company', None), ('Country', None), ('created', 'Created.'), ('Description', None), ('DoNotCall', None), ('Email', None), ('EmailBouncedDate', None), ('EmailBouncedReason', None), ('Fax', None), ('feedEvent', 'Feed event'), ('FirstName', None), ('Gender__c', None), ('HasOptedOutOfEmail', None), ('HasOptedOutOfFax', None), ('Industry', None), ('IsUnreadByOwner', None), ('Jigsaw', None), ('LastName', None), ('Latitude', None), ('leadConverted', 'Lead Converted.'), ('leadMerged', 'Lead Merged'), ('LeadSource', None), ('Longitude', None), ('MC4SF__MC_Subscriber__c', None), ('Membership_Type__c', None), ('MobilePhone', None), ('Name', None), ('npe01__Preferred_Email__c', None), ('npe01__Preferred_Phone__c', None), ('NumberOfEmployees', None), ('Occupation__c', None), ('Opportunity_Record_Type__c', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Phone', None), ('PostalCode', None), ('Primary_Taiko_Group__c', None), ('Publicity_OK__c', None), ('Race__c', None), ('Rating', None), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('Salutation', None), ('State', None), ('Status', None), ('Street', None), ('Title', None), ('Website', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'LeadHistory'
        verbose_name = 'Lead History'
        verbose_name_plural = 'Lead History'
        # keyPrefix = 'None'

class Leadshare(models.Model):
    lead = models.ForeignKey(Lead, sf_read_only=models.READ_ONLY, db_column='LeadId')
    userorgroupid = models.ForeignKey(Group, sf_read_only=models.READ_ONLY, db_column='UserOrGroupId')
    leadaccesslevel = models.CharField(db_column='LeadAccessLevel', max_length=40, verbose_name='Lead Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    rowcause = models.CharField(db_column='RowCause', max_length=40, verbose_name='Row Cause', sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule')])
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='LastModifiedById')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'LeadShare'
        verbose_name = 'Lead Share'
        verbose_name_plural = 'Lead Share'
        # keyPrefix = '01o'

class Leadstatus(models.Model):
    masterlabel = models.CharField(db_column='MasterLabel', max_length=255, verbose_name='Master Label', sf_read_only=models.READ_ONLY, blank=True)
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isdefault = models.BooleanField(db_column='IsDefault', verbose_name='Is Default', sf_read_only=models.READ_ONLY)
    isconverted = models.BooleanField(db_column='IsConverted', verbose_name='Is Converted', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='leadstatus_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='leadstatus_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'LeadStatus'
        verbose_name = 'Lead Status Value'
        verbose_name_plural = 'Lead Status Value'
        # keyPrefix = 'None'

class Loginhistory(models.Model):
    userid = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='UserId', blank=True, null=True)
    logintime = models.DateTimeField(db_column='LoginTime', verbose_name='Login Time', sf_read_only=models.READ_ONLY)
    logintype = models.CharField(db_column='LoginType', max_length=1, verbose_name='Login Type', sf_read_only=models.READ_ONLY)
    sourceip = models.CharField(db_column='SourceIp', max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY, blank=True)
    loginurl = models.CharField(db_column='LoginUrl', max_length=120, verbose_name='Login URL', sf_read_only=models.READ_ONLY, blank=True)
    browser = models.CharField(db_column='Browser', max_length=64, verbose_name='Browser', sf_read_only=models.READ_ONLY, blank=True)
    platform = models.CharField(db_column='Platform', max_length=64, verbose_name='Platform', sf_read_only=models.READ_ONLY, blank=True)
    status = models.CharField(db_column='Status', max_length=128, verbose_name='Status', sf_read_only=models.READ_ONLY, blank=True)
    application = models.CharField(db_column='Application', max_length=64, verbose_name='Application', sf_read_only=models.READ_ONLY, blank=True)
    clientversion = models.CharField(db_column='ClientVersion', max_length=64, verbose_name='Client Version', sf_read_only=models.READ_ONLY, blank=True)
    apitype = models.CharField(db_column='ApiType', max_length=64, verbose_name='API Type', sf_read_only=models.READ_ONLY, blank=True)
    apiversion = models.CharField(db_column='ApiVersion', max_length=32, verbose_name='API Version', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'LoginHistory'
        verbose_name = 'Login History'
        verbose_name_plural = 'Login History'
        # keyPrefix = '0Ya'

class Loginip(models.Model):
    users = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='UsersId')
    sourceip = models.CharField(db_column='SourceIp', max_length=39, verbose_name='Source IP', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isauthenticated = models.BooleanField(db_column='IsAuthenticated', verbose_name='IsAuthenticated', sf_read_only=models.READ_ONLY)
    challengesentdate = models.DateTimeField(db_column='ChallengeSentDate', verbose_name='Challenge SentDate', sf_read_only=models.READ_ONLY, blank=True, null=True)
    challengemethod = models.CharField(db_column='ChallengeMethod', max_length=40, verbose_name='Challenge Method', sf_read_only=models.READ_ONLY, choices=[('Email', None), ('SMS', None), ('TOTP_CHOICE', None), ('TOTP_ONLY', None)], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'LoginIp'
        verbose_name = 'Login IP'
        verbose_name_plural = 'Login IP'
        # keyPrefix = '710'

class Mc4SfMcCampaignHourlyStatsC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='MC Campaign Hourly Stats Name', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmccampaignhourlystatsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmccampaignhourlystatsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    mc4sf_mc_campaign_c = models.ForeignKey('Mc4SfMcCampaignC', sf_read_only=models.NOT_UPDATEABLE, db_column='MC4SF__MC_Campaign__c')
    mc4sf_emails_sent_c = models.DecimalField(db_column='MC4SF__Emails_Sent__c', max_digits=18, decimal_places=0, verbose_name='Emails Sent', help_text='The total emails sent during the hour', blank=True, null=True)
    mc4sf_recipients_click_c = models.DecimalField(db_column='MC4SF__Recipients_Click__c', max_digits=18, decimal_places=0, verbose_name='Recipients Click', help_text='Unique clicks seen during the hour', blank=True, null=True)
    mc4sf_statistics_hour_c = models.DateTimeField(db_column='MC4SF__Statistics_Hour__c', verbose_name='Statistics Hour', blank=True, null=True)
    mc4sf_unique_opens_c = models.DecimalField(db_column='MC4SF__Unique_Opens__c', max_digits=18, decimal_places=0, verbose_name='Unique Opens', help_text='Unique opens seen during the hour', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_Campaign_Hourly_Stats__c'
        verbose_name = 'MC Campaign Hourly Stats'
        verbose_name_plural = 'MC Campaign Hourly Stats'
        # keyPrefix = 'a0c'

class Mc4SfMcCampaignC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='MC Campaign Title', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmccampaignc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmccampaignc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mc4sf_abuse_reports_c = models.DecimalField(db_column='MC4SF__Abuse_Reports__c', max_digits=18, decimal_places=0, verbose_name='Abuse Reports', blank=True, null=True)
    mc4sf_analytics_tag_c = models.CharField(db_column='MC4SF__Analytics_Tag__c', max_length=255, verbose_name='Analytics Tag', blank=True)
    mc4sf_analytics_c = models.CharField(db_column='MC4SF__Analytics__c', max_length=255, verbose_name='Analytics', blank=True)
    mc4sf_archive_url_c = models.URLField(db_column='MC4SF__Archive_URL__c', verbose_name='Archive URL', blank=True, null=True)
    mc4sf_authenticate_c = models.BooleanField(db_column='MC4SF__Authenticate__c', verbose_name='Authenticated')
    mc4sf_auto_fb_post_c = models.TextField(db_column='MC4SF__Auto_FB_Post__c', verbose_name='Auto FB Post', blank=True)
    mc4sf_auto_footer_c = models.BooleanField(db_column='MC4SF__Auto_Footer__c', verbose_name='Auto Footer Enabled')
    mc4sf_auto_tweet_c = models.BooleanField(db_column='MC4SF__Auto_Tweet__c', verbose_name='Auto Tweeted')
    mc4sf_campaign_share_report_c = models.CharField(db_column='MC4SF__Campaign_Share_Report__c', max_length=1300, verbose_name='Campaign Share Report', sf_read_only=models.READ_ONLY, blank=True)
    mc4sf_clicks_c = models.DecimalField(db_column='MC4SF__Clicks__c', max_digits=18, decimal_places=0, verbose_name='Clicks', blank=True, null=True)
    mc4sf_content_type_c = models.CharField(db_column='MC4SF__Content_Type__c', max_length=255, verbose_name='Content Type', blank=True)
    mc4sf_create_time_c = models.DateTimeField(db_column='MC4SF__Create_Time__c', verbose_name='Create Time', blank=True, null=True)
    mc4sf_ecomm360_c = models.BooleanField(db_column='MC4SF__Ecomm360__c', verbose_name='ecomm360 Tracking Enabled')
    mc4sf_emails_sent_c = models.DecimalField(db_column='MC4SF__Emails_Sent__c', max_digits=18, decimal_places=0, verbose_name='Emails Sent', blank=True, null=True)
    mc4sf_facebook_likes_c = models.DecimalField(db_column='MC4SF__Facebook_Likes__c', max_digits=18, decimal_places=0, verbose_name='Facebook Likes', blank=True, null=True)
    mc4sf_forwards_opens_c = models.DecimalField(db_column='MC4SF__Forwards_Opens__c', max_digits=18, decimal_places=0, verbose_name='Forwards Opens', blank=True, null=True)
    mc4sf_forwards_c = models.DecimalField(db_column='MC4SF__Forwards__c', max_digits=18, decimal_places=0, verbose_name='Forwards', blank=True, null=True)
    mc4sf_from_email_c = models.EmailField(db_column='MC4SF__From_Email__c', verbose_name='From Email', blank=True, null=True)
    mc4sf_from_name_c = models.CharField(db_column='MC4SF__From_Name__c', max_length=255, verbose_name='From Name', blank=True)
    mc4sf_html_clicks_tracked_c = models.BooleanField(db_column='MC4SF__HTML_Clicks_Tracked__c', verbose_name='HTML Clicks Tracked')
    mc4sf_hard_bounces_c = models.DecimalField(db_column='MC4SF__Hard_Bounces__c', max_digits=18, decimal_places=0, verbose_name='Hard Bounces', blank=True, null=True)
    mc4sf_inline_css_c = models.BooleanField(db_column='MC4SF__Inline_CSS__c', verbose_name='CSS Auto-Inlined')
    mc4sf_last_click_c = models.DateTimeField(db_column='MC4SF__Last_Click__c', verbose_name='Last Click', blank=True, null=True)
    mc4sf_last_open_c = models.DateTimeField(db_column='MC4SF__Last_Open__c', verbose_name='Last Open', blank=True, null=True)
    mc4sf_link_to_mc_campaign_c = models.CharField(db_column='MC4SF__Link_to_MC_Campaign__c', max_length=1300, verbose_name='Link to MC Campaign', sf_read_only=models.READ_ONLY, blank=True)
    mc4sf_mc_list_c = models.ForeignKey('Mc4SfMcListC', db_column='MC4SF__MC_List__c', blank=True, null=True)
    mc4sf_mailchimp_folder_id_c = models.CharField(db_column='MC4SF__MailChimp_Folder_ID__c', max_length=20, verbose_name='MailChimp Folder ID', blank=True)
    mc4sf_mailchimp_id_c = models.CharField(db_column='MC4SF__MailChimp_ID__c', unique=True, max_length=255, verbose_name='MailChimp ID')
    mc4sf_mailchimp_list_id_c = models.CharField(db_column='MC4SF__MailChimp_List_ID__c', max_length=255, verbose_name='MailChimp List ID', blank=True)
    mc4sf_mailchimp_template_id_c = models.CharField(db_column='MC4SF__MailChimp_Template_ID__c', max_length=20, verbose_name='MailChimp Template ID', blank=True)
    mc4sf_mailchimp_web_id_c = models.CharField(db_column='MC4SF__MailChimp_Web_ID__c', max_length=20, verbose_name='MailChimp Web ID', blank=True)
    mc4sf_opens_tracked_c = models.BooleanField(db_column='MC4SF__Opens_Tracked__c', verbose_name='Opens Tracked')
    mc4sf_opens_c = models.DecimalField(db_column='MC4SF__Opens__c', max_digits=18, decimal_places=0, verbose_name='Opens', blank=True, null=True)
    mc4sf_recipient_likes_c = models.DecimalField(db_column='MC4SF__Recipient_Likes__c', max_digits=18, decimal_places=0, verbose_name='Recipient Likes', blank=True, null=True)
    mc4sf_report_password_c = models.CharField(db_column='MC4SF__Report_Password__c', max_length=255, verbose_name='Report Password', blank=True)
    mc4sf_report_secure_url_c = models.URLField(db_column='MC4SF__Report_Secure_URL__c', verbose_name='Report Secure URL', blank=True, null=True)
    mc4sf_report_url_c = models.URLField(db_column='MC4SF__Report_URL__c', verbose_name='Report URL', blank=True, null=True)
    mc4sf_segment_opts_c = models.CharField(db_column='MC4SF__Segment_Opts__c', max_length=255, verbose_name='Segment Opts', blank=True)
    mc4sf_segmented_text_c = models.TextField(db_column='MC4SF__Segmented_Text__c', verbose_name='Segmented Text', blank=True)
    mc4sf_send_time_c = models.DateTimeField(db_column='MC4SF__Send_Time__c', verbose_name='Send Time', blank=True, null=True)
    mc4sf_soft_bounces_c = models.DecimalField(db_column='MC4SF__Soft_Bounces__c', max_digits=18, decimal_places=0, verbose_name='Soft Bounces', blank=True, null=True)
    mc4sf_status_c = models.CharField(db_column='MC4SF__Status__c', max_length=255, verbose_name='Status', blank=True)
    mc4sf_subject_c = models.CharField(db_column='MC4SF__Subject__c', max_length=255, verbose_name='Subject', blank=True)
    mc4sf_syntax_errors_c = models.DecimalField(db_column='MC4SF__Syntax_Errors__c', max_digits=18, decimal_places=0, verbose_name='Syntax Errors', blank=True, null=True)
    mc4sf_text_clicks_tracked_c = models.BooleanField(db_column='MC4SF__Text_Clicks_Tracked__c', verbose_name='Text Clicks Tracked')
    mc4sf_timewarp_schedule_c = models.CharField(db_column='MC4SF__Timewarp_Schedule__c', max_length=255, verbose_name='Timewarp Schedule', blank=True)
    mc4sf_timewarp_c = models.BooleanField(db_column='MC4SF__Timewarp__c', verbose_name='Timewarp Enabled')
    mc4sf_to_name_c = models.CharField(db_column='MC4SF__To_Name__c', max_length=255, verbose_name='To Name', blank=True)
    mc4sf_type_opts_c = models.CharField(db_column='MC4SF__Type_Opts__c', max_length=255, verbose_name='Type Opts', blank=True)
    mc4sf_type_c = models.CharField(db_column='MC4SF__Type__c', max_length=255, verbose_name='Type', blank=True)
    mc4sf_unique_clicks_c = models.DecimalField(db_column='MC4SF__Unique_Clicks__c', max_digits=18, decimal_places=0, verbose_name='Unique Clicks', blank=True, null=True)
    mc4sf_unique_likes_c = models.DecimalField(db_column='MC4SF__Unique_Likes__c', max_digits=18, decimal_places=0, verbose_name='Unique Likes', blank=True, null=True)
    mc4sf_unique_opens_c = models.DecimalField(db_column='MC4SF__Unique_Opens__c', max_digits=18, decimal_places=0, verbose_name='Unique Opens', blank=True, null=True)
    mc4sf_unsubscribes_c = models.DecimalField(db_column='MC4SF__Unsubscribes__c', max_digits=18, decimal_places=0, verbose_name='Unsubscribes', blank=True, null=True)
    mc4sf_users_who_clicked_c = models.DecimalField(db_column='MC4SF__Users_Who_Clicked__c', max_digits=18, decimal_places=0, verbose_name='Users Who Clicked', blank=True, null=True)
    mc4sf_hourly_stats_emails_sent_c = models.DecimalField(db_column='MC4SF__Hourly_Stats_Emails_Sent__c', max_digits=18, decimal_places=0, verbose_name='Hourly Stats - Emails Sent', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mc4sf_hourly_stats_unique_opens_c = models.DecimalField(db_column='MC4SF__Hourly_Stats_Unique_Opens__c', max_digits=18, decimal_places=0, verbose_name='Hourly Stats - Unique Opens', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mc4sf_hourly_status_recipients_click_c = models.DecimalField(db_column='MC4SF__Hourly_Status_Recipients_Click__c', max_digits=18, decimal_places=0, verbose_name='Hourly Stats - Recipients Click', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_Campaign__c'
        verbose_name = 'MC Campaign'
        verbose_name_plural = 'MC Campaigns'
        # keyPrefix = 'a0d'

class Mc4SfMcInterestGroupC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Interest Group Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmcinterestgroupc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmcinterestgroupc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    mc4sf_mc_interest_grouping_c = models.ForeignKey('Mc4SfMcInterestGroupingC', sf_read_only=models.NOT_UPDATEABLE, db_column='MC4SF__MC_Interest_Grouping__c')
    mc4sf_bit_c = models.CharField(db_column='MC4SF__Bit__c', max_length=255, verbose_name='Bit', blank=True)
    mc4sf_deleted_in_mailchimp_c = models.BooleanField(db_column='MC4SF__Deleted_In_MailChimp__c', verbose_name='Deleted In MailChimp')
    mc4sf_display_order_c = models.CharField(db_column='MC4SF__Display_Order__c', max_length=255, verbose_name='Display Order', blank=True)
    mc4sf_subscribers_c = models.DecimalField(db_column='MC4SF__Subscribers__c', max_digits=18, decimal_places=0, verbose_name='Subscribers', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_Interest_Group__c'
        verbose_name = 'MC Interest Group'
        verbose_name_plural = 'MC Interest Groups'
        # keyPrefix = 'a0e'

class Mc4SfMcInterestGroupingC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Interest Grouping Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmcinterestgroupingc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmcinterestgroupingc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    mc4sf_mc_list_c = models.ForeignKey('Mc4SfMcListC', sf_read_only=models.NOT_UPDATEABLE, db_column='MC4SF__MC_List__c')
    mc4sf_form_field_c = models.CharField(db_column='MC4SF__Form_Field__c', max_length=255, verbose_name='Form Field', blank=True)
    mc4sf_mailchimp_id_c = models.DecimalField(db_column='MC4SF__MailChimp_ID__c', max_digits=18, decimal_places=0, verbose_name='MailChimp ID', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_Interest_Grouping__c'
        verbose_name = 'MC Interest Grouping'
        verbose_name_plural = 'MC Interest Groupings'
        # keyPrefix = 'a0f'

class Mc4SfMcListC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='MC List Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmclistc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmclistc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    mc4sf_avg_click_rate_c = models.DecimalField(db_column='MC4SF__Avg_Click_Rate__c', max_digits=18, decimal_places=0, verbose_name='Avg Click Rate', blank=True, null=True)
    mc4sf_avg_open_rate_c = models.DecimalField(db_column='MC4SF__Avg_Open_Rate__c', max_digits=18, decimal_places=0, verbose_name='Avg Open Rate', blank=True, null=True)
    mc4sf_avg_sub_rate_c = models.DecimalField(db_column='MC4SF__Avg_Sub_Rate__c', max_digits=18, decimal_places=0, verbose_name='Avg Sub Rate', blank=True, null=True)
    mc4sf_avg_unsub_rate_c = models.DecimalField(db_column='MC4SF__Avg_Unsub_Rate__c', max_digits=18, decimal_places=0, verbose_name='Avg Unsub Rate', blank=True, null=True)
    mc4sf_beamer_address_c = models.CharField(db_column='MC4SF__Beamer_Address__c', max_length=255, verbose_name='Beamer Address', blank=True)
    mc4sf_campaign_count_c = models.DecimalField(db_column='MC4SF__Campaign_Count__c', max_digits=18, decimal_places=0, verbose_name='Campaign Count', blank=True, null=True)
    mc4sf_cleaned_count_since_send_c = models.DecimalField(db_column='MC4SF__Cleaned_Count_Since_Send__c', max_digits=18, decimal_places=0, verbose_name='Cleaned Count Since Send', blank=True, null=True)
    mc4sf_cleaned_count_c = models.DecimalField(db_column='MC4SF__Cleaned_Count__c', max_digits=18, decimal_places=0, verbose_name='Cleaned Count', blank=True, null=True)
    mc4sf_create_new_leads_from_mailchimp_c = models.BooleanField(db_column='MC4SF__Create_New_Leads_From_MailChimp__c', verbose_name='Create New Leads From MailChimp', help_text='Setting to have the system poll hourly for new MailChimp Subscribers and create them as Leads in Salesforce.')
    mc4sf_date_created_c = models.CharField(db_column='MC4SF__Date_Created__c', max_length=255, verbose_name='Date Created', blank=True)
    mc4sf_default_from_email_c = models.CharField(db_column='MC4SF__Default_From_Email__c', max_length=255, verbose_name='Default From Email', blank=True)
    mc4sf_default_from_name_c = models.CharField(db_column='MC4SF__Default_From_Name__c', max_length=255, verbose_name='Default From Name', blank=True)
    mc4sf_default_language_c = models.CharField(db_column='MC4SF__Default_Language__c', max_length=255, verbose_name='Default Language', blank=True)
    mc4sf_default_subject_c = models.CharField(db_column='MC4SF__Default_Subject__c', max_length=255, verbose_name='Default Subject', blank=True)
    mc4sf_email_type_option_c = models.BooleanField(db_column='MC4SF__Email_Type_Option__c', verbose_name='Multiple Email Formats')
    mc4sf_group_count_c = models.DecimalField(db_column='MC4SF__Group_Count__c', max_digits=18, decimal_places=0, verbose_name='Group Count', blank=True, null=True)
    mc4sf_grouping_count_c = models.DecimalField(db_column='MC4SF__Grouping_Count__c', max_digits=18, decimal_places=0, verbose_name='Grouping Count', blank=True, null=True)
    mc4sf_last_cleaned_sync_date_c = models.DateTimeField(db_column='MC4SF__Last_Cleaned_Sync_Date__c', verbose_name='Last Cleaned Sync Date', blank=True, null=True)
    mc4sf_last_subscribed_sync_date_c = models.DateTimeField(db_column='MC4SF__Last_Subscribed_Sync_Date__c', verbose_name='Last Subscribed Sync Date', blank=True, null=True)
    mc4sf_last_sync_date_c = models.DateTimeField(db_column='MC4SF__Last_Sync_Date__c', verbose_name='Last Sync Date', blank=True, null=True)
    mc4sf_last_sync_status_c = models.CharField(db_column='MC4SF__Last_Sync_Status__c', max_length=255, verbose_name='Last Sync Status', choices=[('In Progress', 'In Progress'), ('Success', 'Success'), ('Failed', 'Failed')], blank=True)
    mc4sf_last_unsubscribed_sync_date_c = models.DateTimeField(db_column='MC4SF__Last_Unsubscribed_Sync_Date__c', verbose_name='Last Unsubscribed Sync Date', blank=True, null=True)
    mc4sf_list_rating_c = models.DecimalField(db_column='MC4SF__List_Rating__c', max_digits=18, decimal_places=1, verbose_name='List Rating', blank=True, null=True)
    mc4sf_mailchimp_id_c = models.CharField(db_column='MC4SF__MailChimp_ID__c', unique=True, max_length=255, verbose_name='MailChimp ID')
    mc4sf_mailchimp_web_id_c = models.CharField(db_column='MC4SF__MailChimp_Web_ID__c', max_length=20, verbose_name='MailChimp Web ID', blank=True)
    mc4sf_member_count_since_send_c = models.DecimalField(db_column='MC4SF__Member_Count_Since_Send__c', max_digits=18, decimal_places=0, verbose_name='Member Count Since Send', blank=True, null=True)
    mc4sf_member_count_c = models.DecimalField(db_column='MC4SF__Member_Count__c', max_digits=18, decimal_places=0, verbose_name='Member Count', blank=True, null=True)
    mc4sf_merge_var_count_c = models.DecimalField(db_column='MC4SF__Merge_Var_Count__c', max_digits=18, decimal_places=0, verbose_name='Merge Var Count', blank=True, null=True)
    mc4sf_modules_c = models.TextField(db_column='MC4SF__Modules__c', verbose_name='Modules', blank=True)
    mc4sf_subscribe_url_long_c = models.URLField(db_column='MC4SF__Subscribe_URL_Long__c', verbose_name='Subscribe URL Long', blank=True, null=True)
    mc4sf_subscribe_url_short_c = models.URLField(db_column='MC4SF__Subscribe_URL_Short__c', verbose_name='Subscribe URL Short', blank=True, null=True)
    mc4sf_target_sub_rate_c = models.DecimalField(db_column='MC4SF__Target_Sub_Rate__c', max_digits=18, decimal_places=0, verbose_name='Target Sub Rate', blank=True, null=True)
    mc4sf_unsubscribe_count_since_send_c = models.DecimalField(db_column='MC4SF__Unsubscribe_Count_Since_Send__c', max_digits=18, decimal_places=0, verbose_name='Unsubscribe Count Since Send', blank=True, null=True)
    mc4sf_unsubscribe_count_c = models.DecimalField(db_column='MC4SF__Unsubscribe_Count__c', max_digits=18, decimal_places=0, verbose_name='Unsubscribe Count', blank=True, null=True)
    mc4sf_use_awesomebar_c = models.BooleanField(db_column='MC4SF__Use_Awesomebar__c', verbose_name='Awesome Bar Enabled')
    mc4sf_visibility_c = models.CharField(db_column='MC4SF__Visibility__c', max_length=255, verbose_name='Visibility', blank=True)
    mc4sf_unmapped_fields_c = models.DecimalField(db_column='MC4SF__Unmapped_Fields__c', max_digits=18, decimal_places=0, verbose_name='Unmapped Fields', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_List__c'
        verbose_name = 'MC List'
        verbose_name_plural = 'MC Lists'
        # keyPrefix = 'a0g'

class Mc4SfMcMergeVariableC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='MC Merge Variable', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmcmergevariablec_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmcmergevariablec_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    mc4sf_mc_list_c = models.ForeignKey(Mc4SfMcListC, sf_read_only=models.NOT_UPDATEABLE, db_column='MC4SF__MC_List__c')
    mc4sf_choices_c = models.TextField(db_column='MC4SF__Choices__c', verbose_name='Choices', help_text='For radio and dropdown field types, an array of the options available', blank=True)
    mc4sf_contact_field_mapping_c = models.CharField(db_column='MC4SF__Contact_Field_Mapping__c', max_length=255, verbose_name='Contact Field Mapping', blank=True)
    mc4sf_default_value_c = models.CharField(db_column='MC4SF__Default_Value__c', max_length=255, verbose_name='Default Value', help_text='The default value the list owner has set for this field', blank=True)
    mc4sf_field_type_c = models.CharField(db_column='MC4SF__Field_Type__c', max_length=255, verbose_name='Field Type', help_text='The "data type" of this merge var.', choices=[('email', 'email'), ('text', 'text'), ('number', 'number'), ('radio', 'radio'), ('dropdown', 'dropdown'), ('date', 'date'), ('address', 'address'), ('phone', 'phone'), ('url', 'url'), ('imageurl', 'imageurl')], blank=True)
    mc4sf_lead_field_mapping_c = models.CharField(db_column='MC4SF__Lead_Field_Mapping__c', max_length=255, verbose_name='Lead Field Mapping', blank=True)
    mc4sf_mailchimp_id_c = models.DecimalField(db_column='MC4SF__MailChimp_ID__c', max_digits=18, decimal_places=0, verbose_name='MailChimp ID', blank=True, null=True)
    mc4sf_order_c = models.CharField(db_column='MC4SF__Order__c', max_length=10, verbose_name='Order', help_text='The order the list owner has set this field to display in', blank=True)
    mc4sf_public_c = models.BooleanField(db_column='MC4SF__Public__c', verbose_name='Public', help_text='Whether or not this field is visible to list subscribers')
    mc4sf_required_c = models.BooleanField(db_column='MC4SF__Required__c', verbose_name='Required')
    mc4sf_sfdc_data_type_c = models.CharField(db_column='MC4SF__SFDC_Data_Type__c', max_length=255, verbose_name='SFDC Data Type', blank=True)
    mc4sf_show_c = models.BooleanField(db_column='MC4SF__Show__c', verbose_name='Show', help_text='Whether the list owner has this field displayed on their list dashboard')
    mc4sf_size_c = models.CharField(db_column='MC4SF__Size__c', max_length=255, verbose_name='Size', help_text='The width of the field to be used', blank=True)
    mc4sf_tag_c = models.CharField(db_column='MC4SF__Tag__c', max_length=255, verbose_name='Tag', help_text="The merge tag that's used for forms and MailChimp API calls.", blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_Merge_Variable__c'
        verbose_name = 'MC Merge Variable'
        verbose_name_plural = 'MC Merge Variables'
        # keyPrefix = 'a0h'

class Mc4SfMcQueryFilterC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='MC Query Filer Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmcqueryfilterc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmcqueryfilterc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    mc4sf_mc_query_c = models.ForeignKey('Mc4SfMcQueryC', sf_read_only=models.NOT_UPDATEABLE, db_column='MC4SF__MC_Query__c')
    mc4sf_display_order_c = models.DecimalField(db_column='MC4SF__Display_Order__c', max_digits=6, decimal_places=0, verbose_name='Display Order', blank=True, null=True)
    mc4sf_error_message_c = models.CharField(db_column='MC4SF__Error_Message__c', max_length=255, verbose_name='Error Message', blank=True)
    mc4sf_field_name_c = models.CharField(db_column='MC4SF__Field_Name__c', max_length=100, verbose_name='Field Name', blank=True)
    mc4sf_field_type_c = models.CharField(db_column='MC4SF__Field_Type__c', max_length=50, verbose_name='Field Type', blank=True)
    mc4sf_object_name_c = models.CharField(db_column='MC4SF__Object_Name__c', max_length=50, verbose_name='Object Name', blank=True)
    mc4sf_operator_c = models.CharField(db_column='MC4SF__Operator__c', max_length=255, verbose_name='Operator', choices=[('Equals', 'Equals'), ('Not Equal To', 'Not Equal To'), ('Starts With', 'Starts With'), ('Contains', 'Contains'), ('Does Not Contain', 'Does Not Contain'), ('Less Than', 'Less Than'), ('Greater Than', 'Greater Than'), ('Less or Equal', 'Less or Equal'), ('Greater or Equal', 'Greater or Equal'), ('Includes', 'Includes'), ('Excludes', 'Excludes'), ('Within', 'Within')], blank=True)
    mc4sf_value_c = models.CharField(db_column='MC4SF__Value__c', max_length=255, verbose_name='Value', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_Query_Filter__c'
        verbose_name = 'MC Query Filter'
        verbose_name_plural = 'MC Query Filters'
        # keyPrefix = 'a0i'

class Mc4SfMcQueryC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='MC Query Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmcqueryc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmcqueryc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    mc4sf_mc_list_c = models.ForeignKey(Mc4SfMcListC, sf_read_only=models.NOT_UPDATEABLE, db_column='MC4SF__MC_List__c')
    mc4sf_campaign_id_c = models.CharField(db_column='MC4SF__Campaign_Id__c', max_length=18, verbose_name='Campaign Id', blank=True)
    mc4sf_campaign_members_soql_c = models.TextField(db_column='MC4SF__Campaign_Members_SOQL__c', verbose_name='Campaign Members SOQL', blank=True)
    mc4sf_campaign_members_c = models.BooleanField(db_column='MC4SF__Campaign_Members__c', verbose_name='Campaign Members')
    mc4sf_contacts_soql_c = models.TextField(db_column='MC4SF__Contacts_SOQL__c', verbose_name='Contacts SOQL', blank=True)
    mc4sf_contacts_c = models.BooleanField(db_column='MC4SF__Contacts__c', verbose_name='Contacts')
    mc4sf_error_message_c = models.CharField(db_column='MC4SF__Error_Message__c', max_length=255, verbose_name='Error Message', blank=True)
    mc4sf_interests_c = models.TextField(db_column='MC4SF__Interests__c', verbose_name='Interests', blank=True)
    mc4sf_last_run_as_c = models.ForeignKey('User', related_name='mc4sfmcqueryc_mc4sflastrunasc_set', db_column='MC4SF__Last_Run_As__c', blank=True, null=True)
    mc4sf_last_run_c = models.DateTimeField(db_column='MC4SF__Last_Run__c', verbose_name='Last Run', blank=True, null=True)
    mc4sf_leads_soql_c = models.TextField(db_column='MC4SF__Leads_SOQL__c', verbose_name='Leads SOQL', blank=True)
    mc4sf_leads_c = models.BooleanField(db_column='MC4SF__Leads__c', verbose_name='Leads')
    mc4sf_run_daily_at_c = models.CharField(db_column='MC4SF__Run_Daily_At__c', max_length=255, verbose_name='Run Daily At', choices=[('12:00 AM', '12:00 AM'), ('1:00 AM', '1:00 AM'), ('2:00 AM', '2:00 AM'), ('3:00 AM', '3:00 AM'), ('4:00 AM', '4:00 AM'), ('5:00 AM', '5:00 AM'), ('6:00 AM', '6:00 AM'), ('7:00 AM', '7:00 AM'), ('8:00 AM', '8:00 AM'), ('9:00 AM', '9:00 AM'), ('10:00 AM', '10:00 AM'), ('11:00 AM', '11:00 AM'), ('12:00 PM', '12:00 PM'), ('1:00 PM', '1:00 PM'), ('2:00 PM', '2:00 PM'), ('3:00 PM', '3:00 PM'), ('4:00 PM', '4:00 PM'), ('5:00 PM', '5:00 PM'), ('6:00 PM', '6:00 PM'), ('7:00 PM', '7:00 PM'), ('8:00 PM', '8:00 PM'), ('9:00 PM', '9:00 PM'), ('10:00 PM', '10:00 PM'), ('11:00 PM', '11:00 PM')], blank=True)
    mc4sf_static_segments_c = models.TextField(db_column='MC4SF__Static_Segments__c', verbose_name='Static Segments', blank=True)
    mc4sf_status_c = models.CharField(db_column='MC4SF__Status__c', max_length=255, verbose_name='Status', choices=[('Draft', 'Draft'), ('Filters Defined', 'Filters Defined'), ('Previewed', 'Previewed'), ('Complete', 'Complete'), ('Scheduled', 'Scheduled'), ('In Progress', 'In Progress'), ('Success', 'Success'), ('Error', 'Error')], blank=True)
    mc4sf_subscribers_added_last_run_c = models.DecimalField(db_column='MC4SF__Subscribers_Added_last_run__c', max_digits=18, decimal_places=0, verbose_name='Subscribers Added(last run)', blank=True, null=True)
    mc4sf_user_contacts_only_c = models.BooleanField(db_column='MC4SF__User_Contacts_Only__c', verbose_name='User Contacts Only')
    mc4sf_user_leads_only_c = models.BooleanField(db_column='MC4SF__User_Leads_Only__c', verbose_name='User Leads Only')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_Query__c'
        verbose_name = 'MC Query'
        verbose_name_plural = 'MC Queries'
        # keyPrefix = 'a0j'

class Mc4SfMcStaticSegmentC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='MC Static Segments Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmcstaticsegmentc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmcstaticsegmentc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    mc4sf_mc_list_c = models.ForeignKey(Mc4SfMcListC, sf_read_only=models.NOT_UPDATEABLE, db_column='MC4SF__MC_List__c')
    mc4sf_created_date_c = models.CharField(db_column='MC4SF__Created_Date__c', max_length=255, verbose_name='Created Date', blank=True)
    mc4sf_last_reset_c = models.CharField(db_column='MC4SF__Last_Reset__c', max_length=255, verbose_name='Last Reset', blank=True)
    mc4sf_last_update_c = models.CharField(db_column='MC4SF__Last_Update__c', max_length=255, verbose_name='Last Update', blank=True)
    mc4sf_mailchimp_id_c = models.DecimalField(db_column='MC4SF__MailChimp_ID__c', max_digits=18, decimal_places=0, verbose_name='MailChimp ID', blank=True, null=True)
    mc4sf_member_count_c = models.DecimalField(db_column='MC4SF__Member_Count__c', max_digits=18, decimal_places=0, verbose_name='Member Count', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_Static_Segment__c'
        verbose_name = 'MC Static Segment'
        verbose_name_plural = 'MC Static Segments'
        # keyPrefix = 'a0k'

class Mc4SfMcSubscriberActivityC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='MC Subscriber Activity', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmcsubscriberactivityc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmcsubscriberactivityc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    mc4sf_mc_subscriber_c = models.ForeignKey('Mc4SfMcSubscriberC', sf_read_only=models.NOT_UPDATEABLE, db_column='MC4SF__MC_Subscriber__c')
    mc4sf_action_c = models.CharField(db_column='MC4SF__Action__c', max_length=20, verbose_name='Action', blank=True)
    mc4sf_bounce_type_c = models.CharField(db_column='MC4SF__Bounce_Type__c', max_length=100, verbose_name='Bounce Type', blank=True)
    mc4sf_mc_campaign_c = models.ForeignKey(Mc4SfMcCampaignC, db_column='MC4SF__MC_Campaign__c', blank=True, null=True)
    mc4sf_mc_list_c = models.ForeignKey(Mc4SfMcListC, db_column='MC4SF__MC_List__c', blank=True, null=True)
    mc4sf_mailchimp_campaign_id_c = models.CharField(db_column='MC4SF__MailChimp_Campaign_ID__c', max_length=100, verbose_name='MailChimp Campaign ID', blank=True)
    mc4sf_text_url_c = models.TextField(db_column='MC4SF__Text_URL__c', verbose_name='Text URL', blank=True)
    mc4sf_timestamp_c = models.DateTimeField(db_column='MC4SF__Timestamp__c', verbose_name='Activity Date', blank=True, null=True)
    mc4sf_type_c = models.CharField(db_column='MC4SF__Type__c', max_length=200, verbose_name='Type', blank=True)
    mc4sf_url_c = models.URLField(db_column='MC4SF__URL__c', verbose_name='URL', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_Subscriber_Activity__c'
        verbose_name = 'MC Subscriber Activity'
        verbose_name_plural = 'MC Subscriber Activity'
        # keyPrefix = 'a0l'

class Mc4SfMcSubscriberC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='MC Subscriber Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mc4sfmcsubscriberc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mc4sfmcsubscriberc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    mc4sf_country_code_c = models.CharField(db_column='MC4SF__Country_Code__c', max_length=2, verbose_name='Country Code', blank=True)
    mc4sf_daylight_savings_gmt_offset_c = models.CharField(db_column='MC4SF__Daylight_Savings_GMT_Offset__c', max_length=5, verbose_name='Daylight Savings GMT Offset', blank=True)
    mc4sf_email2_c = models.EmailField(db_column='MC4SF__Email2__c', verbose_name='Email Address')
    mc4sf_email_address_c = models.EmailField(db_column='MC4SF__Email_Address__c', verbose_name='XXXEmail Address', blank=True, null=True)
    mc4sf_email_type_c = models.CharField(db_column='MC4SF__Email_Type__c', max_length=255, verbose_name='Email Type', choices=[('html', 'html'), ('text', 'text')], blank=True)
    mc4sf_gmt_offset_c = models.CharField(db_column='MC4SF__GMT_Offset__c', max_length=5, verbose_name='GMT Offset', blank=True)
    mc4sf_geographic_location_latitude_s = models.DecimalField(db_column='MC4SF__Geographic_Location__Latitude__s', max_digits=5, decimal_places=2, verbose_name='Geographic Location (Latitude)', blank=True, null=True)
    mc4sf_geographic_location_longitude_s = models.DecimalField(db_column='MC4SF__Geographic_Location__Longitude__s', max_digits=5, decimal_places=2, verbose_name='Geographic Location (Longitude)', blank=True, null=True)
    mc4sf_geographic_location_c = models.TextField(db_column='MC4SF__Geographic_Location__c', verbose_name='Geographic Location', sf_read_only=models.READ_ONLY, blank=True) # This field type is a guess.
    mc4sf_golden_monkey_c = models.BooleanField(db_column='MC4SF__Golden_Monkey__c', verbose_name='Golden Monkey')
    mc4sf_ip_opt_c = models.CharField(db_column='MC4SF__IP_Opt__c', max_length=30, verbose_name='IP Opt', blank=True)
    mc4sf_ip_signup_c = models.CharField(db_column='MC4SF__IP_Signup__c', max_length=30, verbose_name='IP Signup', blank=True)
    mc4sf_info_changed_c = models.DateTimeField(db_column='MC4SF__Info_Changed__c', verbose_name='Info Changed', blank=True, null=True)
    mc4sf_interests_c = models.TextField(db_column='MC4SF__Interests__c', verbose_name='Interests', blank=True)
    mc4sf_language_c = models.CharField(db_column='MC4SF__Language__c', max_length=30, verbose_name='Language', blank=True)
    mc4sf_last_activity_sync_date_c = models.DateTimeField(db_column='MC4SF__Last_Activity_Sync_Date__c', verbose_name='Last Activity Sync Date', blank=True, null=True)
    mc4sf_last_sync_date_c = models.DateTimeField(db_column='MC4SF__Last_Sync_Date__c', verbose_name='Last Sync Date', blank=True, null=True)
    mc4sf_lead_validation_errors_c = models.TextField(db_column='MC4SF__Lead_Validation_Errors__c', verbose_name='Validation/Sync Errors', help_text='If there was an MC4SF application error with this record, it will be captured here.', blank=True)
    mc4sf_lists_c = models.TextField(db_column='MC4SF__Lists__c', verbose_name='Lists', blank=True)
    mc4sf_mc_list_c = models.ForeignKey(Mc4SfMcListC, db_column='MC4SF__MC_List__c', blank=True, null=True)
    mc4sf_mailchimp_campaign_id_c = models.CharField(db_column='MC4SF__MailChimp_Campaign_ID__c', max_length=30, verbose_name='MailChimp Campaign ID', blank=True)
    mc4sf_mailchimp_id_c = models.CharField(db_column='MC4SF__MailChimp_ID__c', max_length=100, verbose_name='MailChimp ID', blank=True)
    mc4sf_mailchimp_list_id_c = models.CharField(db_column='MC4SF__MailChimp_List_ID__c', max_length=30, verbose_name='MailChimp List ID', blank=True)
    mc4sf_member_rating_image_c = models.CharField(db_column='MC4SF__Member_Rating_Image__c', max_length=1300, verbose_name='Member Rating', sf_read_only=models.READ_ONLY, blank=True)
    mc4sf_member_rating_c = models.DecimalField(db_column='MC4SF__Member_Rating__c', max_digits=1, decimal_places=0, verbose_name='Member Rating', blank=True, null=True)
    mc4sf_member_status_c = models.CharField(db_column='MC4SF__Member_Status__c', max_length=255, verbose_name='Member Status', choices=[('Pending', 'Pending'), ('Subscribed', 'Subscribed'), ('Unsubscribed', 'Unsubscribed'), ('Cleaned', 'Cleaned')], blank=True)
    mc4sf_merge0_c = models.CharField(db_column='MC4SF__Merge0__c', max_length=250, verbose_name='Merge0', blank=True)
    mc4sf_merge10_c = models.CharField(db_column='MC4SF__Merge10__c', max_length=250, verbose_name='Merge10', blank=True)
    mc4sf_merge11_c = models.CharField(db_column='MC4SF__Merge11__c', max_length=250, verbose_name='Merge11', blank=True)
    mc4sf_merge12_c = models.CharField(db_column='MC4SF__Merge12__c', max_length=250, verbose_name='Merge12', blank=True)
    mc4sf_merge13_c = models.CharField(db_column='MC4SF__Merge13__c', max_length=250, verbose_name='Merge13', blank=True)
    mc4sf_merge14_c = models.CharField(db_column='MC4SF__Merge14__c', max_length=250, verbose_name='Merge14', blank=True)
    mc4sf_merge15_c = models.CharField(db_column='MC4SF__Merge15__c', max_length=250, verbose_name='Merge15', blank=True)
    mc4sf_merge16_c = models.CharField(db_column='MC4SF__Merge16__c', max_length=250, verbose_name='Merge16', blank=True)
    mc4sf_merge17_c = models.CharField(db_column='MC4SF__Merge17__c', max_length=250, verbose_name='Merge17', blank=True)
    mc4sf_merge18_c = models.CharField(db_column='MC4SF__Merge18__c', max_length=250, verbose_name='Merge18', blank=True)
    mc4sf_merge19_c = models.CharField(db_column='MC4SF__Merge19__c', max_length=250, verbose_name='Merge19', blank=True)
    mc4sf_merge1_c = models.CharField(db_column='MC4SF__Merge1__c', max_length=250, verbose_name='Merge1', blank=True)
    mc4sf_merge20_c = models.CharField(db_column='MC4SF__Merge20__c', max_length=250, verbose_name='Merge20', blank=True)
    mc4sf_merge21_c = models.CharField(db_column='MC4SF__Merge21__c', max_length=250, verbose_name='Merge21', blank=True)
    mc4sf_merge22_c = models.CharField(db_column='MC4SF__Merge22__c', max_length=250, verbose_name='Merge22', blank=True)
    mc4sf_merge23_c = models.CharField(db_column='MC4SF__Merge23__c', max_length=250, verbose_name='Merge23', blank=True)
    mc4sf_merge24_c = models.CharField(db_column='MC4SF__Merge24__c', max_length=250, verbose_name='Merge24', blank=True)
    mc4sf_merge25_c = models.CharField(db_column='MC4SF__Merge25__c', max_length=250, verbose_name='Merge25', blank=True)
    mc4sf_merge26_c = models.CharField(db_column='MC4SF__Merge26__c', max_length=250, verbose_name='Merge26', blank=True)
    mc4sf_merge27_c = models.CharField(db_column='MC4SF__Merge27__c', max_length=250, verbose_name='Merge27', blank=True)
    mc4sf_merge28_c = models.CharField(db_column='MC4SF__Merge28__c', max_length=250, verbose_name='Merge28', blank=True)
    mc4sf_merge29_c = models.CharField(db_column='MC4SF__Merge29__c', max_length=250, verbose_name='Merge29', blank=True)
    mc4sf_merge2_c = models.CharField(db_column='MC4SF__Merge2__c', max_length=250, verbose_name='Merge2', blank=True)
    mc4sf_merge30_c = models.CharField(db_column='MC4SF__Merge30__c', max_length=250, verbose_name='Merge30', blank=True)
    mc4sf_merge3_c = models.CharField(db_column='MC4SF__Merge3__c', max_length=250, verbose_name='Merge3', blank=True)
    mc4sf_merge4_c = models.CharField(db_column='MC4SF__Merge4__c', max_length=250, verbose_name='Merge4', blank=True)
    mc4sf_merge5_c = models.CharField(db_column='MC4SF__Merge5__c', max_length=250, verbose_name='Merge5', blank=True)
    mc4sf_merge6_c = models.CharField(db_column='MC4SF__Merge6__c', max_length=250, verbose_name='Merge6', blank=True)
    mc4sf_merge7_c = models.CharField(db_column='MC4SF__Merge7__c', max_length=250, verbose_name='Merge7', blank=True)
    mc4sf_merge8_c = models.CharField(db_column='MC4SF__Merge8__c', max_length=250, verbose_name='Merge8', blank=True)
    mc4sf_merge9_c = models.CharField(db_column='MC4SF__Merge9__c', max_length=250, verbose_name='Merge9', blank=True)
    mc4sf_notes_c = models.TextField(db_column='MC4SF__Notes__c', verbose_name='Notes', blank=True)
    mc4sf_parent_mc_subscriber_c = models.ForeignKey('self', db_column='MC4SF__Parent_MC_Subscriber__c', blank=True, null=True)
    mc4sf_region_c = models.CharField(db_column='MC4SF__Region__c', max_length=100, verbose_name='Region', blank=True)
    mc4sf_static_segments_c = models.TextField(db_column='MC4SF__Static_Segments__c', verbose_name='Static Segments', blank=True)
    mc4sf_status_reason_text_c = models.CharField(db_column='MC4SF__Status_Reason_Text__c', max_length=255, verbose_name='Status Reason Text', blank=True)
    mc4sf_status_reason_c = models.CharField(db_column='MC4SF__Status_Reason__c', max_length=255, verbose_name='Status Reason', blank=True)
    mc4sf_status_timestamp_c = models.DateTimeField(db_column='MC4SF__Status_Timestamp__c', verbose_name='Status Timestamp', blank=True, null=True)
    mc4sf_subscriber_last_modified_since_sync_date_c = models.DateTimeField(db_column='MC4SF__Subscriber_Last_Modified_Since_Sync_Date__c', verbose_name='Subscriber Last Modified Since Sync Date', blank=True, null=True)
    mc4sf_time_zone_c = models.CharField(db_column='MC4SF__Time_Zone__c', max_length=50, verbose_name='Time Zone', blank=True)
    mc4sf_timestamp_opt_c = models.DateTimeField(db_column='MC4SF__Timestamp_Opt__c', verbose_name='Timestamp Opt', blank=True, null=True)
    mc4sf_timestamp_signup_c = models.DateTimeField(db_column='MC4SF__Timestamp_Signup__c', verbose_name='Timestamp Signup', blank=True, null=True)
    mc4sf_view_subscriber_in_mc_c = models.CharField(db_column='MC4SF__View_Subscriber_in_MC__c', max_length=1300, verbose_name='View Subscriber in MC', sf_read_only=models.READ_ONLY, blank=True)
    mc4sf_web_id_c = models.DecimalField(db_column='MC4SF__Web_ID__c', max_digits=18, decimal_places=0, verbose_name='Web ID', blank=True, null=True)
    mc4sf_last_activity_date_c = models.DateTimeField(db_column='MC4SF__Last_Activity_Date__c', verbose_name='Last Activity Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MC4SF__MC_Subscriber__c'
        verbose_name = 'MC Subscriber'
        verbose_name_plural = 'MC Subscribers'
        # keyPrefix = 'a0m'

class Mailmergetemplate(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name')
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', blank=True)
    filename = models.CharField(db_column='Filename', max_length=255, verbose_name='File', sf_read_only=models.NOT_UPDATEABLE)
    bodylength = models.IntegerField(db_column='BodyLength', verbose_name='Body Length', sf_read_only=models.READ_ONLY, blank=True, null=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.NOT_UPDATEABLE)
    lastuseddate = models.DateTimeField(db_column='LastUsedDate', verbose_name='Last Used Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mailmergetemplate_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mailmergetemplate_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MailmergeTemplate'
        verbose_name = 'Mail Merge Template'
        verbose_name_plural = 'Mail Merge Template'
        # keyPrefix = '01H'

class Mobiledeviceregistrar(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Name')
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazilian)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian')], blank=True)
    masterlabel = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Label')
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='mobiledeviceregistrar_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='mobiledeviceregistrar_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    provider = models.CharField(db_column='Provider', max_length=255, verbose_name='Provider', choices=[('salesforce', 'Salesforce'), ('mobileiron', 'MobileIron'), ('airwatch', 'AirWatch')])
    mdmproviderenrollendpoint = models.URLField(db_column='MdmProviderEnrollEndpoint', verbose_name='Mdm Provider Enroll Endpoint', blank=True, null=True)
    mdmproviderpushappendpoint = models.URLField(db_column='MdmProviderPushAppEndpoint', verbose_name='Mdm Provider Push App Endpoint', blank=True, null=True)
    mdmproviderapiaccesstoken = models.CharField(db_column='MdmProviderApiAccessToken', max_length=255, verbose_name='Mdm Provider Api Access Token', blank=True)
    mdmproviderapiusername = models.CharField(db_column='MdmProviderApiUsername', max_length=255, verbose_name='Mdm Provider Api Username', blank=True)
    mdmproviderapipassword = models.CharField(db_column='MdmProviderApiPassword', max_length=255, verbose_name='Mdm Provider Api Password', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'MobileDeviceRegistrar'
        verbose_name = 'Mobile Device Registrar'
        verbose_name_plural = 'Mobile Device Registrars'
        # keyPrefix = '0IG'

class Name(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True)
    lastname = models.CharField(db_column='LastName', max_length=80, verbose_name='Last Name', sf_read_only=models.READ_ONLY, blank=True)
    firstname = models.CharField(db_column='FirstName', max_length=40, verbose_name='First Name', sf_read_only=models.READ_ONLY, blank=True)
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('APXTConga4__Conga_Email_Staging__c', None), ('APXTConga4__Conga_Email_Template__c', None), ('APXTConga4__Conga_Template__c', None), ('Asset', None), ('bde__Batch__c', None), ('Campaign', None), ('Case', None), ('CollaborationGroup', None), ('Contact', None), ('ContentDocument', None), ('ContentVersion', None), ('Contract', None), ('Dashboard', None), ('DashboardComponent', None), ('Document', None), ('Event', None), ('Idea', None), ('IdeaComment', None), ('Lead', None), ('MC4SF__MC_Campaign__c', None), ('MC4SF__MC_Campaign_Hourly_Stats__c', None), ('MC4SF__MC_Interest_Group__c', None), ('MC4SF__MC_Interest_Grouping__c', None), ('MC4SF__MC_List__c', None), ('MC4SF__MC_Merge_Variable__c', None), ('MC4SF__MC_Query__c', None), ('MC4SF__MC_Query_Filter__c', None), ('MC4SF__MC_Static_Segment__c', None), ('MC4SF__MC_Subscriber__c', None), ('MC4SF__MC_Subscriber_Activity__c', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('Opportunity', None), ('Pricebook2', None), ('Product2', None), ('Queue', None), ('Report', None), ('SelfServiceUser', None), ('SFSSDupeCatcher__Application_Settings__c', None), ('SFSSDupeCatcher__DcIn__c', None), ('SFSSDupeCatcher__Duplicate_Warning__c', None), ('SFSSDupeCatcher__Override_Cache__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c', None), ('SFSSDupeCatcher__RequiredFieldSupport__c', None), ('SFSSDupeCatcher__Scenario__c', None), ('SFSSDupeCatcher__Scenario_Rule__c', None), ('Solution', None), ('Task', None), ('Topic', None), ('User', None)], blank=True)
    alias = models.CharField(db_column='Alias', max_length=8, verbose_name='Alias', sf_read_only=models.READ_ONLY, blank=True)
    userrole = models.ForeignKey('Userrole', related_name='name_userrole_set', db_column='UserRoleId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    recordtype = models.ForeignKey('Recordtype', related_name='name_recordtype_set', db_column='RecordTypeId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY)
    profile = models.ForeignKey('Profile', related_name='name_profile_set', db_column='ProfileId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=80, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    email = models.EmailField(db_column='Email', verbose_name='E-mail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Phone', sf_read_only=models.READ_ONLY, blank=True)
    username = models.CharField(db_column='Username', max_length=80, verbose_name='Username', sf_read_only=models.READ_ONLY, blank=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Name'
        verbose_name = 'Name'
        verbose_name_plural = 'Names'
        # keyPrefix = 'None'

class Note(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(Apxtconga4CongaEmailStagingC, sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    title = models.CharField(db_column='Title', max_length=80, verbose_name='Title')
    isprivate = models.BooleanField(db_column='IsPrivate', verbose_name='Private')
    body = models.TextField(db_column='Body', verbose_name='Body', blank=True)
    owner = models.ForeignKey('User', related_name='note_owner_set', db_column='OwnerId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='note_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='note_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Note'
        verbose_name = 'Note'
        verbose_name_plural = 'Notes'
        # keyPrefix = '002'

class Noteandattachment(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    isnote = models.BooleanField(db_column='IsNote', verbose_name='Is Note', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(Apxtconga4CongaEmailStagingC, sf_read_only=models.READ_ONLY, db_column='ParentId')
    title = models.CharField(db_column='Title', max_length=80, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    isprivate = models.BooleanField(db_column='IsPrivate', verbose_name='Private', sf_read_only=models.READ_ONLY)
    owner = models.ForeignKey('User', related_name='noteandattachment_owner_set', db_column='OwnerId', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='noteandattachment_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='noteandattachment_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'NoteAndAttachment'
        verbose_name = 'Note and Attachment'
        verbose_name_plural = 'Notes and Attachments'
        # keyPrefix = 'None'

class Objectpermissions(models.Model):
    parent = models.ForeignKey('Permissionset', sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    sobjecttype = models.CharField(db_column='SobjectType', max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('AddOnDefinition', None), ('AggregationRow', None), ('APXTConga4__Conga_Email_Staging__c', None), ('APXTConga4__Conga_Email_Template__c', None), ('APXTConga4__Conga_Template__c', None), ('Asset', None), ('bde__Batch__c', None), ('Campaign', None), ('Case', None), ('CloudServiceProvider', None), ('CloudServiceProviderApi', None), ('Contact', None), ('Contract', None), ('ContractLineItem', None), ('Document', None), ('EditionDefinition', None), ('Entitlement', None), ('EntitlementContact', None), ('EnvironmentHubInvitation', None), ('EnvironmentHubMember', None), ('FtestAccountChild', None), ('FtestChild', None), ('FtestError', None), ('FtestErrorChild', None), ('FtestGrandChild', None), ('FtestMain', None), ('FtestPerson', None), ('FtestVirtualMain', None), ('Idea', None), ('IdeaTheme', None), ('IncludedLicenseDefinition', None), ('Lead', None), ('LicensingError', None), ('LicensingRequest', None), ('LiveAgentSession', None), ('LiveChatTranscript', None), ('LiveChatVisitor', None), ('ManagementAddOnLicense', None), ('ManagementEditionLicense', None), ('ManagementPlatformLicense', None), ('ManagementUserLicense', None), ('MC4SF__MC_Campaign__c', None), ('MC4SF__MC_Campaign_Hourly_Stats__c', None), ('MC4SF__MC_Interest_Group__c', None), ('MC4SF__MC_Interest_Grouping__c', None), ('MC4SF__MC_List__c', None), ('MC4SF__MC_Merge_Variable__c', None), ('MC4SF__MC_Query__c', None), ('MC4SF__MC_Query_Filter__c', None), ('MC4SF__MC_Static_Segment__c', None), ('MC4SF__MC_Subscriber__c', None), ('MC4SF__MC_Subscriber_Activity__c', None), ('MyCustomObject', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('Opportunity', None), ('Order', None), ('PlatformLicenseDefinition', None), ('Pricebook2', None), ('Product2', None), ('ProfileSkill', None), ('ProfileSkillEndorsement', None), ('ProfileSkillUser', None), ('PushTopic', None), ('Question', None), ('QuickText', None), ('Quote', None), ('RegisteredMobileDevice', None), ('ServiceContract', None), ('SFSSDupeCatcher__Application_Settings__c', None), ('SFSSDupeCatcher__DcIn__c', None), ('SFSSDupeCatcher__Duplicate_Warning__c', None), ('SFSSDupeCatcher__Override_Cache__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c', None), ('SFSSDupeCatcher__RequiredFieldSupport__c', None), ('SFSSDupeCatcher__Scenario__c', None), ('SFSSDupeCatcher__Scenario_Rule__c', None), ('SignupRequest', None), ('SocialPost', None), ('Solution', None), ('StreamingChannel', None), ('Tenant', None), ('TenantParameterMap', None), ('UsageEntitlement', None), ('UserLicenseDefinition', None), ('WorkCoaching', None), ('WorkFeedback', None), ('WorkFeedbackQuestion', None), ('WorkFeedbackQuestionSet', None), ('WorkFeedbackRequest', None), ('WorkGoal', None), ('WorkGoalCollaborator', None), ('WorkGoalLink', None), ('WorkPerformanceCycle', None), ('WorkReward', None), ('WorkRewardFund', None), ('WorkUpgradeAction', None), ('WorkUpgradeCustomer', None), ('WorkUpgradeUser', None)])
    permissionscreate = models.BooleanField(db_column='PermissionsCreate', verbose_name='Create Records')
    permissionsread = models.BooleanField(db_column='PermissionsRead', verbose_name='Read Records')
    permissionsedit = models.BooleanField(db_column='PermissionsEdit', verbose_name='Edit Records')
    permissionsdelete = models.BooleanField(db_column='PermissionsDelete', verbose_name='Delete Records')
    permissionsviewallrecords = models.BooleanField(db_column='PermissionsViewAllRecords', verbose_name='Read All Records')
    permissionsmodifyallrecords = models.BooleanField(db_column='PermissionsModifyAllRecords', verbose_name='Edit All Records')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='objectpermissions_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='objectpermissions_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ObjectPermissions'
        verbose_name = 'Object Permissions'
        verbose_name_plural = 'Object Permissions'
        # keyPrefix = '110'

class Openactivity(models.Model):
    account = models.ForeignKey(Account, sf_read_only=models.READ_ONLY, db_column='AccountId', blank=True, null=True)
    who = models.ForeignKey(Contact, sf_read_only=models.READ_ONLY, db_column='WhoId', blank=True, null=True)
    what = models.ForeignKey(Apxtconga4CongaEmailStagingC, sf_read_only=models.READ_ONLY, db_column='WhatId', blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=80, verbose_name='Subject', sf_read_only=models.READ_ONLY, choices=[('Call', 'Call'), ('Email', 'Email'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True)
    istask = models.BooleanField(db_column='IsTask', verbose_name='Task', sf_read_only=models.READ_ONLY)
    activitydate = models.DateField(db_column='ActivityDate', verbose_name='Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    owner = models.ForeignKey('User', related_name='openactivity_owner_set', db_column='OwnerId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Waiting on someone else', 'Waiting on someone else'), ('Deferred', 'Deferred')], blank=True)
    priority = models.CharField(db_column='Priority', max_length=40, verbose_name='Priority', sf_read_only=models.READ_ONLY, choices=[('High', 'High'), ('Normal', 'Normal'), ('Low', 'Low')], blank=True)
    activitytype = models.CharField(db_column='ActivityType', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Call', None), ('Call', None), ('Email', None), ('Email', None), ('Meeting', None), ('Meeting', None), ('Other', None), ('Other', None)], blank=True)
    isclosed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY)
    isalldayevent = models.BooleanField(db_column='IsAllDayEvent', verbose_name='All-Day Event', sf_read_only=models.READ_ONLY)
    durationinminutes = models.IntegerField(db_column='DurationInMinutes', verbose_name='Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    location = models.CharField(db_column='Location', max_length=80, verbose_name='Location', sf_read_only=models.READ_ONLY, blank=True)
    description = models.TextField(db_column='Description', verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='openactivity_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='openactivity_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    calldurationinseconds = models.IntegerField(db_column='CallDurationInSeconds', verbose_name='Call Duration', sf_read_only=models.READ_ONLY, blank=True, null=True)
    calltype = models.CharField(db_column='CallType', max_length=40, verbose_name='Call Type', sf_read_only=models.READ_ONLY, choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True)
    calldisposition = models.CharField(db_column='CallDisposition', max_length=255, verbose_name='Call Result', sf_read_only=models.READ_ONLY, blank=True)
    callobject = models.CharField(db_column='CallObject', max_length=255, verbose_name='Call Object Identifier', sf_read_only=models.READ_ONLY, blank=True)
    reminderdatetime = models.DateTimeField(db_column='ReminderDateTime', verbose_name='Reminder Date/Time', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isreminderset = models.BooleanField(db_column='IsReminderSet', verbose_name='Reminder Set', sf_read_only=models.READ_ONLY)
    enddatetime = models.DateTimeField(db_column='EndDateTime', verbose_name='End', sf_read_only=models.READ_ONLY, blank=True, null=True)
    startdatetime = models.DateTimeField(db_column='StartDateTime', verbose_name='Start', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OpenActivity'
        verbose_name = 'Open Activity'
        verbose_name_plural = 'Open Activities'
        # keyPrefix = 'None'

class Opportunity(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    account = models.ForeignKey(Account, related_name='opportunity_account_set', db_column='AccountId', blank=True, null=True)
    recordtype = models.ForeignKey('Recordtype', db_column='RecordTypeId', blank=True, null=True)
    isprivate = models.BooleanField(db_column='IsPrivate', verbose_name='Private')
    name = models.CharField(db_column='Name', max_length=120, verbose_name='Name')
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    stagename = models.CharField(db_column='StageName', max_length=40, verbose_name='Stage', choices=[('Prospecting', 'Prospecting'), ('Pledged', 'Pledged'), ('Posted', 'Posted'), ('Invited', 'Invited'), ('Registered', 'Registered'), ('Attended', 'Attended'), ('Withdrawn', 'Withdrawn'), ('Closed Lost', 'Closed Lost')])
    amount = models.DecimalField(db_column='Amount', max_digits=18, decimal_places=2, verbose_name='Amount', blank=True, null=True)
    probability = models.DecimalField(db_column='Probability', max_digits=3, decimal_places=0, verbose_name='Probability (%)', blank=True, null=True)
    expectedrevenue = models.DecimalField(db_column='ExpectedRevenue', max_digits=18, decimal_places=2, verbose_name='Expected Amount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    totalopportunityquantity = models.DecimalField(db_column='TotalOpportunityQuantity', max_digits=18, decimal_places=2, verbose_name='Quantity', blank=True, null=True)
    closedate = models.DateField(db_column='CloseDate', verbose_name='Close Date')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Opportunity Type', choices=[('Existing Funding', 'Existing Funding'), ('New Funding', 'New Funding')], blank=True)
    nextstep = models.CharField(db_column='NextStep', max_length=255, verbose_name='Next Step', blank=True)
    leadsource = models.CharField(db_column='LeadSource', max_length=40, verbose_name='Lead Source', choices=[('Web', 'Web'), ('NATC List', 'NATC List')], blank=True)
    isclosed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY)
    iswon = models.BooleanField(db_column='IsWon', verbose_name='Won', sf_read_only=models.READ_ONLY)
    forecastcategory = models.CharField(db_column='ForecastCategory', max_length=40, verbose_name='Forecast Category', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecastcategoryname = models.CharField(db_column='ForecastCategoryName', max_length=40, verbose_name='Forecast Category', choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')], blank=True)
    campaign = models.ForeignKey(Campaign, db_column='CampaignId', blank=True, null=True)
    hasopportunitylineitem = models.BooleanField(db_column='HasOpportunityLineItem', verbose_name='Has Line Item', sf_read_only=models.READ_ONLY)
    pricebook2 = models.ForeignKey('Pricebook2', db_column='Pricebook2Id', blank=True, null=True)
    owner = models.ForeignKey('User', related_name='opportunity_owner_set', db_column='OwnerId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='opportunity_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='opportunity_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscalquarter = models.IntegerField(db_column='FiscalQuarter', verbose_name='Fiscal Quarter', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscalyear = models.IntegerField(db_column='FiscalYear', verbose_name='Fiscal Year', sf_read_only=models.READ_ONLY, blank=True, null=True)
    fiscal = models.CharField(db_column='Fiscal', max_length=6, verbose_name='Fiscal Period', sf_read_only=models.READ_ONLY, blank=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe03_recurring_donation_c = models.ForeignKey('Npe03RecurringDonationC', db_column='npe03__Recurring_Donation__c', blank=True, null=True)
    npo02_systemhouseholdcontactroleprocessor_c = models.CharField(db_column='npo02__systemHouseholdContactRoleProcessor__c', max_length=255, verbose_name='_SYSTEM: HOUSEHOLD CONTACT ROLEPROCESSOR', help_text='Controls if Household contact roles are created for Opportunities', choices=[('All Opportunities', 'All Opportunities'), ('No Opportunities', 'No Opportunities')], blank=True)
    npe01_contact_id_for_role_c = models.CharField(db_column='npe01__Contact_Id_for_Role__c', max_length=255, verbose_name='Contact Id for Role', help_text='Hidden field for passing a Contact Id for Contact Role creation.', blank=True)
    npe01_is_opp_from_individual_c = models.CharField(db_column='npe01__Is_Opp_From_Individual__c', max_length=1300, verbose_name='Is Opp From Individual', sf_read_only=models.READ_ONLY, blank=True)
    npe01_member_level_c = models.CharField(db_column='npe01__Member_Level__c', max_length=255, verbose_name='Member Level', choices=[('Student', 'Student'), ('Regular', 'Regular')], blank=True)
    npe01_membership_end_date_c = models.DateField(db_column='npe01__Membership_End_Date__c', verbose_name='Membership End Date', help_text='Date membership period ends.', blank=True, null=True)
    npe01_membership_origin_c = models.CharField(db_column='npe01__Membership_Origin__c', max_length=255, verbose_name='Membership Origin', help_text='Is this a renewal, a new membership, or a membership with someone who lapsed and has returned.', choices=[('New', 'New'), ('Renewal', 'Renewal'), ('Reacquire', 'Reacquire')], blank=True)
    npe01_membership_start_date_c = models.DateField(db_column='npe01__Membership_Start_Date__c', verbose_name='Membership Start Date', help_text='Date when membership period starts', blank=True, null=True)
    npo02_combinedrollupfieldset_c = models.CharField(db_column='npo02__CombinedRollupFieldset__c', max_length=1300, verbose_name='Combined Rollup Fieldset', sf_read_only=models.READ_ONLY, help_text='Concatenated fields used during rollups to locate the most recent opportunity.', blank=True)
    npe01_amount_outstanding_c = models.DecimalField(db_column='npe01__Amount_Outstanding__c', max_digits=18, decimal_places=2, verbose_name='Remaining Balance', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe01_do_not_automatically_create_payment_c = models.BooleanField(db_column='npe01__Do_Not_Automatically_Create_Payment__c', verbose_name='Do Not Automatically Create Payment', help_text='If payments are active, and if checked, a new payment will not be automatically created for this Opportunity.')
    npe01_amount_written_off_c = models.DecimalField(db_column='npe01__Amount_Written_Off__c', max_digits=14, decimal_places=2, verbose_name='Payment Writeoff Amount', sf_read_only=models.READ_ONLY, help_text='Value of the payments marked as written-off or noncollectable.', blank=True, null=True)
    npe01_number_of_payments_c = models.DecimalField(db_column='npe01__Number_of_Payments__c', max_digits=18, decimal_places=0, verbose_name='Number of Payments', sf_read_only=models.READ_ONLY, help_text='Total number of payments for this Opportunity (Donation)', blank=True, null=True)
    npe01_payments_made_c = models.DecimalField(db_column='npe01__Payments_Made__c', max_digits=14, decimal_places=2, verbose_name='Payment Amount Received', sf_read_only=models.READ_ONLY, help_text='The sum of all payments marked as paid for this Opportunity.', blank=True, null=True)
    bde_batch_c = models.ForeignKey('BdeBatchC', db_column='bde__Batch__c', blank=True, null=True)
    primary_affiliation_c = models.ForeignKey(Account, related_name='opportunity_primaryaffiliationc_set', db_column='Primary_Affiliation__c', blank=True, null=True)
    additional_gift_given_c = models.BooleanField(db_column='Additional_Gift_Given__c', verbose_name='Additional Gift Given', help_text='Check this box if there was an additional donation made with membership.')
    membership_type_c = models.CharField(db_column='Membership_Type__c', max_length=255, verbose_name='Membership Type', choices=[('Regular', 'Regular'), ('Student', 'Student')], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Opportunity'
        verbose_name = 'Opportunity'
        verbose_name_plural = 'Opportunities'
        # keyPrefix = '006'

class Opportunitycompetitor(models.Model):
    opportunity = models.ForeignKey(Opportunity, sf_read_only=models.NOT_UPDATEABLE, db_column='OpportunityId')
    competitorname = models.CharField(db_column='CompetitorName', max_length=40, verbose_name='Competitor Name', blank=True)
    strengths = models.CharField(db_column='Strengths', max_length=1000, verbose_name='Strengths', blank=True)
    weaknesses = models.CharField(db_column='Weaknesses', max_length=1000, verbose_name='Weaknesses', blank=True)
    createdby = models.ForeignKey('User', related_name='opportunitycompetitor_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='opportunitycompetitor_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OpportunityCompetitor'
        verbose_name = 'Opportunity: Competitor'
        verbose_name_plural = 'Opportunity: Competitor'
        # keyPrefix = '00J'

class Opportunitycontactrole(models.Model):
    opportunity = models.ForeignKey(Opportunity, sf_read_only=models.NOT_UPDATEABLE, db_column='OpportunityId')
    contact = models.ForeignKey(Contact, db_column='ContactId')
    role = models.CharField(db_column='Role', max_length=40, verbose_name='Role', choices=[('Decision Maker', 'Decision Maker'), ('Donor', 'Donor'), ('Household Member', 'Household Member'), ('Influencer', 'Influencer'), ('Other', 'Other')], blank=True)
    isprimary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='opportunitycontactrole_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='opportunitycontactrole_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OpportunityContactRole'
        verbose_name = 'Opportunity Contact Role'
        verbose_name_plural = 'Opportunity Contact Role'
        # keyPrefix = '00K'

class Opportunityfeed(models.Model):
    parent = models.ForeignKey(Opportunity, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='opportunityfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='opportunityfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OpportunityFeed'
        verbose_name = 'Opportunity Feed'
        verbose_name_plural = 'Opportunity Feed'
        # keyPrefix = 'None'

class Opportunityfieldhistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    opportunity = models.ForeignKey(Opportunity, sf_read_only=models.READ_ONLY, db_column='OpportunityId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('Additional_Gift_Given__c', None), ('Amount', None), ('bde__Batch__c', None), ('Campaign', None), ('CloseDate', None), ('created', 'Created.'), ('opportunityCreatedFromLead', 'Created by lead convert'), ('Description', None), ('feedEvent', 'Feed event'), ('ForecastCategoryName', None), ('IsPrivate', None), ('LeadSource', None), ('Membership_Type__c', None), ('Name', None), ('NextStep', None), ('npe01__Contact_Id_for_Role__c', None), ('npe01__Do_Not_Automatically_Create_Payment__c', None), ('npe01__Member_Level__c', None), ('npe01__Membership_End_Date__c', None), ('npe01__Membership_Origin__c', None), ('npe01__Membership_Start_Date__c', None), ('npe03__Recurring_Donation__c', None), ('npo02__CurrentGenerators__c', None), ('npo02__DeliveryInstallationStatus__c', None), ('npo02__MainCompetitors__c', None), ('npo02__OrderNumber__c', None), ('npo02__systemHouseholdContactRoleProcessor__c', None), ('npo02__TrackingNumber__c', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Primary_Affiliation__c', None), ('Probability', None), ('locked', 'Record locked.'), ('RecordType', None), ('unlocked', 'Record unlocked.'), ('StageName', None), ('TotalOpportunityQuantity', None), ('Type', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OpportunityFieldHistory'
        verbose_name = 'Opportunity Field History'
        verbose_name_plural = 'Opportunity Field History'
        # keyPrefix = 'None'

class Opportunityhistory(models.Model):
    opportunity = models.ForeignKey(Opportunity, sf_read_only=models.READ_ONLY, db_column='OpportunityId')
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    stagename = models.CharField(db_column='StageName', max_length=40, verbose_name='Stage Name', sf_read_only=models.READ_ONLY, choices=[('Prospecting', 'Prospecting'), ('Pledged', 'Pledged'), ('Posted', 'Posted'), ('Invited', 'Invited'), ('Registered', 'Registered'), ('Attended', 'Attended'), ('Withdrawn', 'Withdrawn'), ('Closed Lost', 'Closed Lost')])
    amount = models.DecimalField(db_column='Amount', max_digits=18, decimal_places=2, verbose_name='Amount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    expectedrevenue = models.DecimalField(db_column='ExpectedRevenue', max_digits=18, decimal_places=2, verbose_name='Expected Revenue', sf_read_only=models.READ_ONLY, blank=True, null=True)
    closedate = models.DateField(db_column='CloseDate', verbose_name='Close Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    probability = models.DecimalField(db_column='Probability', max_digits=3, decimal_places=0, verbose_name='Probability', sf_read_only=models.READ_ONLY, blank=True, null=True)
    forecastcategory = models.CharField(db_column='ForecastCategory', max_length=40, verbose_name='To ForecastCategory', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')], blank=True)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OpportunityHistory'
        verbose_name = 'Opportunity History'
        verbose_name_plural = 'Opportunity History'
        # keyPrefix = '008'

class Opportunitylineitem(models.Model):
    opportunity = models.ForeignKey(Opportunity, sf_read_only=models.NOT_UPDATEABLE, db_column='OpportunityId')
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY, blank=True, null=True)
    pricebookentry = models.ForeignKey('Pricebookentry', sf_read_only=models.NOT_UPDATEABLE, db_column='PricebookEntryId', blank=True, null=True)
    quantity = models.DecimalField(db_column='Quantity', max_digits=12, decimal_places=2, verbose_name='Quantity')
    totalprice = models.DecimalField(db_column='TotalPrice', max_digits=18, decimal_places=2, verbose_name='Total Price', blank=True, null=True)
    unitprice = models.DecimalField(db_column='UnitPrice', max_digits=18, decimal_places=2, verbose_name='Sales Price', blank=True, null=True)
    listprice = models.DecimalField(db_column='ListPrice', max_digits=18, decimal_places=2, verbose_name='List Price', sf_read_only=models.READ_ONLY, blank=True, null=True)
    servicedate = models.DateField(db_column='ServiceDate', verbose_name='Date', blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Line Description', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='opportunitylineitem_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='opportunitylineitem_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OpportunityLineItem'
        verbose_name = 'Opportunity Product'
        verbose_name_plural = 'Opportunity Product'
        # keyPrefix = '00k'

class Opportunitypartner(models.Model):
    opportunity = models.ForeignKey(Opportunity, sf_read_only=models.READ_ONLY, db_column='OpportunityId')
    accountto = models.ForeignKey(Account, sf_read_only=models.READ_ONLY, db_column='AccountToId')
    role = models.CharField(db_column='Role', max_length=40, verbose_name='Role', sf_read_only=models.READ_ONLY, choices=[('System Integrator', 'System Integrator'), ('Agency', 'Agency'), ('Advertiser', 'Advertiser'), ('VAR/Reseller', 'VAR/Reseller'), ('Distributor', 'Distributor'), ('Developer', 'Developer'), ('Broker', 'Broker'), ('Lender', 'Lender'), ('Supplier', 'Supplier'), ('Institution', 'Institution'), ('Contractor', 'Contractor'), ('Dealer', 'Dealer'), ('Consultant', 'Consultant')], blank=True)
    isprimary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='opportunitypartner_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='opportunitypartner_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    reversepartnerid = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='ReversePartnerId', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OpportunityPartner'
        verbose_name = 'Opportunity Partner'
        verbose_name_plural = 'Opportunity Partner'
        # keyPrefix = 'None'

class Opportunityshare(models.Model):
    opportunity = models.ForeignKey(Opportunity, sf_read_only=models.READ_ONLY, db_column='OpportunityId')
    userorgroupid = models.ForeignKey(Group, sf_read_only=models.READ_ONLY, db_column='UserOrGroupId')
    opportunityaccesslevel = models.CharField(db_column='OpportunityAccessLevel', max_length=40, verbose_name='Opportunity Access', sf_read_only=models.READ_ONLY, choices=[('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')])
    rowcause = models.CharField(db_column='RowCause', max_length=40, verbose_name='Row Cause', sf_read_only=models.READ_ONLY, choices=[('Owner', 'Owner'), ('Manual', 'Manual Sharing'), ('Rule', 'Sharing Rule'), ('ImplicitChild', 'Account Sharing'), ('ImplicitParent', 'Associated record owner or sharing'), ('Team', 'Sales Team'), ('Territory', 'Territory Assignment Rule'), ('TerritoryManual', 'Territory Manual'), ('TerritoryRule', 'Territory Sharing Rule')])
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='LastModifiedById')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OpportunityShare'
        verbose_name = 'Opportunity Share'
        verbose_name_plural = 'Opportunity Share'
        # keyPrefix = '00t'

class Opportunitystage(models.Model):
    masterlabel = models.CharField(db_column='MasterLabel', max_length=255, verbose_name='Master Label', sf_read_only=models.READ_ONLY, blank=True)
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Is Active', sf_read_only=models.READ_ONLY)
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isclosed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY)
    iswon = models.BooleanField(db_column='IsWon', verbose_name='Won', sf_read_only=models.READ_ONLY)
    forecastcategory = models.CharField(db_column='ForecastCategory', max_length=40, verbose_name='Forecast Category', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('BestCase', 'Best Case'), ('Forecast', 'Commit'), ('Closed', 'Closed')])
    forecastcategoryname = models.CharField(db_column='ForecastCategoryName', max_length=40, verbose_name='Forecast Category Name', sf_read_only=models.READ_ONLY, choices=[('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'), ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')])
    defaultprobability = models.DecimalField(db_column='DefaultProbability', max_digits=3, decimal_places=0, verbose_name='Probability (%)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True)
    createdby = models.ForeignKey('User', related_name='opportunitystage_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='opportunitystage_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OpportunityStage'
        verbose_name = 'Opportunity Stage'
        verbose_name_plural = 'Opportunity Stage'
        # keyPrefix = 'None'

class Orgwideemailaddress(models.Model):
    createdby = models.ForeignKey('User', related_name='orgwideemailaddress_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='orgwideemailaddress_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    address = models.EmailField(db_column='Address', verbose_name='Email Address')
    displayname = models.CharField(db_column='DisplayName', max_length=300, verbose_name='Display Name')
    isallowallprofiles = models.BooleanField(db_column='IsAllowAllProfiles', verbose_name='Allow All Profiles')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'OrgWideEmailAddress'
        verbose_name = 'Organization-wide From Email Address'
        verbose_name_plural = 'Organization-wide From Email Addresses'
        # keyPrefix = '0D2'

class Organization(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name', sf_read_only=models.NOT_CREATEABLE)
    division = models.CharField(db_column='Division', max_length=80, verbose_name='Division', sf_read_only=models.NOT_CREATEABLE, blank=True)
    street = models.TextField(db_column='Street', verbose_name='Street', sf_read_only=models.NOT_CREATEABLE, blank=True)
    city = models.CharField(db_column='City', max_length=40, verbose_name='City', sf_read_only=models.NOT_CREATEABLE, blank=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', sf_read_only=models.NOT_CREATEABLE, blank=True)
    postalcode = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.NOT_CREATEABLE, blank=True)
    country = models.CharField(db_column='Country', max_length=80, verbose_name='Country', sf_read_only=models.READ_ONLY, blank=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, verbose_name='Latitude', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, verbose_name='Longitude', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Phone', sf_read_only=models.NOT_CREATEABLE, blank=True)
    fax = models.CharField(db_column='Fax', max_length=40, verbose_name='Fax', sf_read_only=models.NOT_CREATEABLE, blank=True)
    primarycontact = models.CharField(db_column='PrimaryContact', max_length=80, verbose_name='Primary Contact', sf_read_only=models.NOT_CREATEABLE, blank=True)
    defaultlocalesidkey = models.CharField(db_column='DefaultLocaleSidKey', max_length=40, verbose_name='Locale', sf_read_only=models.NOT_CREATEABLE, choices=[('sq', 'Albanian'), ('sq_AL', 'Albanian (Albania)'), ('ar', 'Arabic'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('hy', 'Armenian'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('eu', 'Basque'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bn_BD', 'Bengali (Bangladesh)'), ('bs', 'Bosnian'), ('bs_BA', 'Bosnian (Bosnia and Herzegovina)'), ('bg', 'Bulgarian'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('ca', 'Catalan'), ('ca_ES_EURO', 'Catalan (Spain,Euro)'), ('ca_ES', 'Catalan (Spain)'), ('zh', 'Chinese'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macau SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr', 'Croatian'), ('hr_HR', 'Croatian (Croatia)'), ('cs', 'Czech'), ('cs_CZ', 'Czech (Czech Republic)'), ('da', 'Danish'), ('da_DK', 'Danish (Denmark)'), ('nl', 'Dutch'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('en_AU', 'English (Australia)'), ('en_BB', 'English (Barbados)'), ('en_BM', 'English (Bermuda)'), ('en_CA', 'English (Canada)'), ('en_GH', 'English (Ghana)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE_EURO', 'English (Ireland,Euro)'), ('en_IE', 'English (Ireland)'), ('en_MY', 'English (Malaysia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PH', 'English (Philippines)'), ('en_SG', 'English (Singapore)'), ('en_ZA', 'English (South Africa)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('et', 'Estonian'), ('et_EE', 'Estonian (Estonia)'), ('fi', 'Finnish'), ('fi_FI_EURO', 'Finnish (Finland,Euro)'), ('fi_FI', 'Finnish (Finland)'), ('fr', 'French'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_FR_EURO', 'French (France,Euro)'), ('fr_FR', 'French (France)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('ka', 'Georgian'), ('ka_GE', 'Georgian (Georgia)'), ('de', 'German'), ('de_AT_EURO', 'German (Austria,Euro)'), ('de_AT', 'German (Austria)'), ('de_DE_EURO', 'German (Germany,Euro)'), ('de_DE', 'German (Germany)'), ('de_LU_EURO', 'German (Luxembourg,Euro)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el', 'Greek'), ('el_GR', 'Greek (Greece)'), ('iw', 'Hebrew'), ('iw_IL', 'Hebrew (Israel)'), ('hi', 'Hindi'), ('hi_IN', 'Hindi (India)'), ('hu', 'Hungarian'), ('hu_HU', 'Hungarian (Hungary)'), ('is', 'Icelandic'), ('is_IS', 'Icelandic (Iceland)'), ('in', 'Indonesian'), ('in_ID', 'Indonesian (Indonesia)'), ('ga', 'Irish'), ('ga_IE', 'Irish (Ireland)'), ('it', 'Italian'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja', 'Japanese'), ('ja_JP', 'Japanese (Japan)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ky_KG', 'Kirghiz (Kyrgyzstan)'), ('ko', 'Korean'), ('ko_KR', 'Korean (South Korea)'), ('lv', 'Latvian'), ('lv_LV', 'Latvian (Latvia)'), ('lt', 'Lithuanian'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lb', 'Luxembourgish'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk', 'Macedonian'), ('mk_MK', 'Macedonian (Macedonia)'), ('ms', 'Malay'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('mt', 'Maltese'), ('mt_MT', 'Maltese (Malta)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('no', 'Norwegian'), ('no_NO', 'Norwegian (Norway)'), ('pl', 'Polish'), ('pl_PL', 'Polish (Poland)'), ('pt', 'Portuguese'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_PT', 'Portuguese (Portugal)'), ('ro', 'Romanian'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm', 'Romansh'), ('rm_CH', 'Romansh (Switzerland)'), ('ru', 'Russian'), ('ru_RU', 'Russian (Russia)'), ('sr', 'Serbian'), ('sr_BA', 'Serbian (Bosnia and Herzegovina)'), ('sh', 'Serbian (Latin)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_CS', 'Serbian (Serbia and Montenegro)'), ('sk', 'Slovak'), ('sk_SK', 'Slovak (Slovakia)'), ('sl', 'Slovenian'), ('sl_SI', 'Slovenian (Slovenia)'), ('es', 'Spanish'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES_EURO', 'Spanish (Spain,Euro)'), ('es_ES', 'Spanish (Spain)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sv', 'Swedish'), ('sv_SE', 'Swedish (Sweden)'), ('tl', 'Tagalog'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('th', 'Thai'), ('th_TH', 'Thai (Thailand)'), ('tr', 'Turkish'), ('tr_TR', 'Turkish (Turkey)'), ('uk', 'Ukrainian'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur', 'Urdu'), ('ur_PK', 'Urdu (Pakistan)'), ('vi', 'Vietnamese'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy', 'Welsh'), ('cy_GB', 'Welsh (United Kingdom)')])
    languagelocalekey = models.CharField(db_column='LanguageLocaleKey', max_length=40, verbose_name='Language', sf_read_only=models.NOT_CREATEABLE, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazilian)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian')])
    receivesinfoemails = models.BooleanField(db_column='ReceivesInfoEmails', verbose_name='Info Emails', sf_read_only=models.NOT_CREATEABLE)
    receivesadmininfoemails = models.BooleanField(db_column='ReceivesAdminInfoEmails', verbose_name='Info Emails Admin', sf_read_only=models.NOT_CREATEABLE)
    preferencesrequireopportunityproducts = models.BooleanField(db_column='PreferencesRequireOpportunityProducts', verbose_name='RequireOpportunityProducts', sf_read_only=models.NOT_CREATEABLE)
    fiscalyearstartmonth = models.IntegerField(db_column='FiscalYearStartMonth', verbose_name='Fiscal Year Starts In', sf_read_only=models.READ_ONLY, blank=True, null=True)
    usesstartdateasfiscalyearname = models.BooleanField(db_column='UsesStartDateAsFiscalYearName', verbose_name='Fiscal Year Name by Start', sf_read_only=models.READ_ONLY)
    defaultaccountaccess = models.CharField(db_column='DefaultAccountAccess', max_length=40, verbose_name='Default Account Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True)
    defaultcontactaccess = models.CharField(db_column='DefaultContactAccess', max_length=40, verbose_name='Default Contact Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ControlledByParent', 'Controlled By Parent')], blank=True)
    defaultopportunityaccess = models.CharField(db_column='DefaultOpportunityAccess', max_length=40, verbose_name='Default Opportunity Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True)
    defaultleadaccess = models.CharField(db_column='DefaultLeadAccess', max_length=40, verbose_name='Default Lead Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True)
    defaultcaseaccess = models.CharField(db_column='DefaultCaseAccess', max_length=40, verbose_name='Default Case Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('ReadEditTransfer', 'Read/Write/Transfer')], blank=True)
    defaultcalendaraccess = models.CharField(db_column='DefaultCalendarAccess', max_length=40, verbose_name='Default Calendar Access', sf_read_only=models.READ_ONLY, choices=[('HideDetails', 'Hide Details'), ('HideDetailsInsert', 'Hide Details and Add Events'), ('ShowDetails', 'Show Details'), ('ShowDetailsInsert', 'Show Details and Add Events'), ('AllowEdits', 'Full Access')], blank=True)
    defaultpricebookaccess = models.CharField(db_column='DefaultPricebookAccess', max_length=40, verbose_name='Default Price Book Access', sf_read_only=models.READ_ONLY, choices=[('None', 'No Access'), ('Read', 'View Only'), ('ReadSelect', 'Use')], blank=True)
    defaultcampaignaccess = models.CharField(db_column='DefaultCampaignAccess', max_length=40, verbose_name='Default Campaign Access', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('All', 'Owner')], blank=True)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    compliancebccemail = models.EmailField(db_column='ComplianceBccEmail', verbose_name='Compliance BCC Email', sf_read_only=models.READ_ONLY, blank=True, null=True)
    uiskin = models.CharField(db_column='UiSkin', max_length=40, verbose_name='UI Skin', sf_read_only=models.NOT_CREATEABLE, choices=[('Theme1', 'salesforce.com Classic'), ('Theme2', 'salesforce.com'), ('PortalDefault', 'Portal Default'), ('Webstore', 'Webstore'), ('Theme3', 'Aloha')], blank=True)
    trialexpirationdate = models.DateTimeField(db_column='TrialExpirationDate', verbose_name='Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    organizationtype = models.CharField(db_column='OrganizationType', max_length=40, verbose_name='Edition', sf_read_only=models.READ_ONLY, choices=[('Team Edition', None), ('Professional Edition', None), ('Enterprise Edition', None), ('Developer Edition', None), ('Personal Edition', None), ('Unlimited Edition', None), ('Contact Manager Edition', None), ('Base Edition', None)], blank=True)
    webtocasedefaultorigin = models.CharField(db_column='WebToCaseDefaultOrigin', max_length=40, verbose_name='Web to Cases Default Origin', sf_read_only=models.NOT_CREATEABLE, blank=True)
    monthlypageviewsused = models.IntegerField(db_column='MonthlyPageViewsUsed', verbose_name='Monthly Page Views Used', sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthlypageviewsentitlement = models.IntegerField(db_column='MonthlyPageViewsEntitlement', verbose_name='Monthly Page Views Allowed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='organization_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='organization_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Organization'
        verbose_name = 'Organization'
        verbose_name_plural = 'Organizations'
        # keyPrefix = '00D'

class Partner(models.Model):
    opportunity = models.ForeignKey(Opportunity, sf_read_only=models.NOT_UPDATEABLE, db_column='OpportunityId', blank=True, null=True)
    accountfrom = models.ForeignKey(Account, related_name='partner_accountfrom_set', db_column='AccountFromId', sf_read_only=models.NOT_UPDATEABLE, blank=True, null=True)
    accountto = models.ForeignKey(Account, related_name='partner_accountto_set', db_column='AccountToId', sf_read_only=models.NOT_UPDATEABLE)
    role = models.CharField(db_column='Role', max_length=40, verbose_name='Role', sf_read_only=models.NOT_UPDATEABLE, choices=[('System Integrator', 'System Integrator'), ('Agency', 'Agency'), ('Advertiser', 'Advertiser'), ('VAR/Reseller', 'VAR/Reseller'), ('Distributor', 'Distributor'), ('Developer', 'Developer'), ('Broker', 'Broker'), ('Lender', 'Lender'), ('Supplier', 'Supplier'), ('Institution', 'Institution'), ('Contractor', 'Contractor'), ('Dealer', 'Dealer'), ('Consultant', 'Consultant')], blank=True)
    isprimary = models.BooleanField(db_column='IsPrimary', verbose_name='Primary', sf_read_only=models.NOT_UPDATEABLE)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='partner_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='partner_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    reversepartnerid = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='ReversePartnerId', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Partner'
        verbose_name = 'Partner'
        verbose_name_plural = 'Partner'
        # keyPrefix = '00I'

class Partnerrole(models.Model):
    masterlabel = models.CharField(db_column='MasterLabel', max_length=255, verbose_name='Master Label', sf_read_only=models.READ_ONLY, blank=True)
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY, blank=True, null=True)
    reverserole = models.CharField(db_column='ReverseRole', max_length=40, verbose_name='Reverse Role', sf_read_only=models.READ_ONLY, choices=[('System Integrator', 'System Integrator'), ('Agency', 'Agency'), ('Advertiser', 'Advertiser'), ('VAR/Reseller', 'VAR/Reseller'), ('Distributor', 'Distributor'), ('Developer', 'Developer'), ('Broker', 'Broker'), ('Lender', 'Lender'), ('Supplier', 'Supplier'), ('Institution', 'Institution'), ('Contractor', 'Contractor'), ('Dealer', 'Dealer'), ('Consultant', 'Consultant')], blank=True)
    createdby = models.ForeignKey('User', related_name='partnerrole_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='partnerrole_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'PartnerRole'
        verbose_name = 'Partner Role Value'
        verbose_name_plural = 'Partner Role Value'
        # keyPrefix = 'None'

class Period(models.Model):
    fiscalyearsettings = models.ForeignKey(Fiscalyearsettings, related_name='period_fiscalyearsettings_set', db_column='FiscalYearSettingsId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Month', None), ('Quarter', None), ('Week', None), ('Year', None)], blank=True)
    startdate = models.DateField(db_column='StartDate', verbose_name='Start Date', sf_read_only=models.READ_ONLY)
    enddate = models.DateField(db_column='EndDate', verbose_name='End Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isforecastperiod = models.BooleanField(db_column='IsForecastPeriod', verbose_name='Is Forecast Period', sf_read_only=models.READ_ONLY)
    quarterlabel = models.CharField(db_column='QuarterLabel', max_length=40, verbose_name='Quarter Name', sf_read_only=models.READ_ONLY, choices=[('Spring', 'Spring'), ('Summer', 'Summer'), ('Fall', 'Fall'), ('Winter', 'Winter')], blank=True)
    periodlabel = models.CharField(db_column='PeriodLabel', max_length=40, verbose_name='Period Name', sf_read_only=models.READ_ONLY, blank=True)
    number = models.IntegerField(db_column='Number', verbose_name='Number', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Period'
        verbose_name = 'Period'
        verbose_name_plural = 'Period'
        # keyPrefix = '026'

class Permissionset(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Permission Set Name')
    label = models.CharField(db_column='Label', max_length=80, verbose_name='Permission Set Label')
    userlicense = models.ForeignKey('Userlicense', sf_read_only=models.NOT_UPDATEABLE, db_column='UserLicenseId', blank=True, null=True)
    profile = models.ForeignKey('Profile', sf_read_only=models.READ_ONLY, db_column='ProfileId', blank=True, null=True)
    isownedbyprofile = models.BooleanField(db_column='IsOwnedByProfile', verbose_name='Is Owned By Profile', sf_read_only=models.READ_ONLY)
    permissionsedittask = models.BooleanField(db_column='PermissionsEditTask', verbose_name='Edit Tasks')
    permissionseditevent = models.BooleanField(db_column='PermissionsEditEvent', verbose_name='Edit Events')
    permissionsmanageusers = models.BooleanField(db_column='PermissionsManageUsers', verbose_name='Manage Users')
    permissionsmodifyalldata = models.BooleanField(db_column='PermissionsModifyAllData', verbose_name='Modify All Data')
    permissionsmanagecases = models.BooleanField(db_column='PermissionsManageCases', verbose_name='Manage Cases')
    permissionsmassinlineedit = models.BooleanField(db_column='PermissionsMassInlineEdit', verbose_name='Mass Edits from Lists')
    permissionsmanagesolutions = models.BooleanField(db_column='PermissionsManageSolutions', verbose_name='Manage Published Solutions')
    permissionscustomizeapplication = models.BooleanField(db_column='PermissionsCustomizeApplication', verbose_name='Customize Application')
    permissionseditreadonlyfields = models.BooleanField(db_column='PermissionsEditReadonlyFields', verbose_name='Edit Read Only Fields')
    permissionsrunreports = models.BooleanField(db_column='PermissionsRunReports', verbose_name='Run Reports')
    permissionsviewsetup = models.BooleanField(db_column='PermissionsViewSetup', verbose_name='View Setup and Configuration')
    permissionstransferanyentity = models.BooleanField(db_column='PermissionsTransferAnyEntity', verbose_name='Transfer Record')
    permissionsnewreportbuilder = models.BooleanField(db_column='PermissionsNewReportBuilder', verbose_name='Report Builder')
    permissionsmanageselfservice = models.BooleanField(db_column='PermissionsManageSelfService', verbose_name='Manage Self-Service Portal')
    permissionsmanagecssusers = models.BooleanField(db_column='PermissionsManageCssUsers', verbose_name='Edit Self-Service Users')
    permissionsimportleads = models.BooleanField(db_column='PermissionsImportLeads', verbose_name='Import Leads')
    permissionsmanageleads = models.BooleanField(db_column='PermissionsManageLeads', verbose_name='Manage Leads')
    permissionstransferanylead = models.BooleanField(db_column='PermissionsTransferAnyLead', verbose_name='Transfer Leads')
    permissionsviewalldata = models.BooleanField(db_column='PermissionsViewAllData', verbose_name='View All Data')
    permissionseditpublicdocuments = models.BooleanField(db_column='PermissionsEditPublicDocuments', verbose_name='Manage Public Documents')
    permissionschatterinternaluser = models.BooleanField(db_column='PermissionsChatterInternalUser', verbose_name='Chatter Internal User')
    permissionsmanagedashboards = models.BooleanField(db_column='PermissionsManageDashboards', verbose_name='Manage Dashboards')
    permissionschatterinviteexternalusers = models.BooleanField(db_column='PermissionsChatterInviteExternalUsers', verbose_name='Invite Customers To Chatter')
    permissionssendsitrequests = models.BooleanField(db_column='PermissionsSendSitRequests', verbose_name='Send Stay-in-Touch Requests')
    permissionsapiuseronly = models.BooleanField(db_column='PermissionsApiUserOnly', verbose_name='Api Only User')
    permissionsmanageremoteaccess = models.BooleanField(db_column='PermissionsManageRemoteAccess', verbose_name='Manage Connected Apps')
    permissionscanusenewdashboardbuilder = models.BooleanField(db_column='PermissionsCanUseNewDashboardBuilder', verbose_name='Drag-and-Drop Dashboard Builder')
    permissionsmanagecategories = models.BooleanField(db_column='PermissionsManageCategories', verbose_name='Manage Categories')
    permissionsconvertleads = models.BooleanField(db_column='PermissionsConvertLeads', verbose_name='Convert Leads')
    permissionspasswordneverexpires = models.BooleanField(db_column='PermissionsPasswordNeverExpires', verbose_name='Password Never Expires')
    permissionsuseteamreassignwizards = models.BooleanField(db_column='PermissionsUseTeamReassignWizards', verbose_name='Use Team Reassignment Wizards')
    permissionsinstallpackaging = models.BooleanField(db_column='PermissionsInstallPackaging', verbose_name='Download AppExchange Packages')
    permissionspublishpackaging = models.BooleanField(db_column='PermissionsPublishPackaging', verbose_name='Upload AppExchange Packages')
    permissionschatterowngroups = models.BooleanField(db_column='PermissionsChatterOwnGroups', verbose_name='Create and Own New Chatter Groups')
    permissionseditopplineitemunitprice = models.BooleanField(db_column='PermissionsEditOppLineItemUnitPrice', verbose_name='Edit Opportunity Product Sales Price')
    permissionscreatepackaging = models.BooleanField(db_column='PermissionsCreatePackaging', verbose_name='Create AppExchange Packages')
    permissionsbulkapiharddelete = models.BooleanField(db_column='PermissionsBulkApiHardDelete', verbose_name='Bulk API Hard Delete')
    permissionsinboundmigrationtoolsuser = models.BooleanField(db_column='PermissionsInboundMigrationToolsUser', verbose_name='Deploy Change Sets')
    permissionssolutionimport = models.BooleanField(db_column='PermissionsSolutionImport', verbose_name='Import Solutions')
    permissionsmanagecallcenters = models.BooleanField(db_column='PermissionsManageCallCenters', verbose_name='Manage Call Centers')
    permissionseditreports = models.BooleanField(db_column='PermissionsEditReports', verbose_name='Create and Customize Reports')
    permissionsoutboundmigrationtoolsuser = models.BooleanField(db_column='PermissionsOutboundMigrationToolsUser', verbose_name='Create and Upload Change Sets')
    permissionsviewcontent = models.BooleanField(db_column='PermissionsViewContent', verbose_name='View Content in Portals')
    permissionsmanageemailclientconfig = models.BooleanField(db_column='PermissionsManageEmailClientConfig', verbose_name='Manage Email Client Configurations')
    permissionsenablenotifications = models.BooleanField(db_column='PermissionsEnableNotifications', verbose_name='Send Outbound Messages')
    permissionsmanagedataintegrations = models.BooleanField(db_column='PermissionsManageDataIntegrations', verbose_name='Manage Data Integrations')
    permissionsviewdatacategories = models.BooleanField(db_column='PermissionsViewDataCategories', verbose_name='View Data Categories')
    permissionsmanagedatacategories = models.BooleanField(db_column='PermissionsManageDataCategories', verbose_name='Manage Data Categories')
    permissionsauthorapex = models.BooleanField(db_column='PermissionsAuthorApex', verbose_name='Author Apex')
    permissionsmanagemobile = models.BooleanField(db_column='PermissionsManageMobile', verbose_name='Manage Mobile Configurations')
    permissionsapienabled = models.BooleanField(db_column='PermissionsApiEnabled', verbose_name='API Enabled')
    permissionsmanagecustomreporttypes = models.BooleanField(db_column='PermissionsManageCustomReportTypes', verbose_name='Manage Custom Report Types')
    permissionseditcasecomments = models.BooleanField(db_column='PermissionsEditCaseComments', verbose_name='Edit Case Comments')
    permissionstransferanycase = models.BooleanField(db_column='PermissionsTransferAnyCase', verbose_name='Transfer Cases')
    permissionscontentadministrator = models.BooleanField(db_column='PermissionsContentAdministrator', verbose_name='Manage Salesforce CRM Content')
    permissionscreateworkspaces = models.BooleanField(db_column='PermissionsCreateWorkspaces', verbose_name='Create Libraries')
    permissionsmanagecontentpermissions = models.BooleanField(db_column='PermissionsManageContentPermissions', verbose_name='Manage Content Permissions')
    permissionsmanagecontentproperties = models.BooleanField(db_column='PermissionsManageContentProperties', verbose_name='Manage Content Properties')
    permissionsmanagecontenttypes = models.BooleanField(db_column='PermissionsManageContentTypes', verbose_name='Manage Content Types')
    permissionsschedulejob = models.BooleanField(db_column='PermissionsScheduleJob', verbose_name='Schedule Dashboards')
    permissionsmanageanalyticsnapshots = models.BooleanField(db_column='PermissionsManageAnalyticSnapshots', verbose_name='Manage Analytic Snapshots')
    permissionsschedulereports = models.BooleanField(db_column='PermissionsScheduleReports', verbose_name='Schedule Reports')
    permissionsmanagebusinesshourholidays = models.BooleanField(db_column='PermissionsManageBusinessHourHolidays', verbose_name='Manage Business Hours Holidays')
    permissionsmanageinteraction = models.BooleanField(db_column='PermissionsManageInteraction', verbose_name='Manage Force.com Flow')
    permissionsviewmyteamsdashboards = models.BooleanField(db_column='PermissionsViewMyTeamsDashboards', verbose_name="View My Team's Dashboards")
    permissionsmoderatechatter = models.BooleanField(db_column='PermissionsModerateChatter', verbose_name='Moderate Chatter')
    permissionsresetpasswords = models.BooleanField(db_column='PermissionsResetPasswords', verbose_name='Reset User Passwords and Unlock Users')
    permissionsflowuflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Force.com Flow User Feature License')
    permissionscaninsertfeedsystemfields = models.BooleanField(db_column='PermissionsCanInsertFeedSystemFields', verbose_name='Insert System Field Values for Chatter Feeds')
    permissionsemailtemplatemanagement = models.BooleanField(db_column='PermissionsEmailTemplateManagement', verbose_name='Manage Email Templates')
    permissionsemailadministration = models.BooleanField(db_column='PermissionsEmailAdministration', verbose_name='Email Administration')
    permissionsmanagechattermessages = models.BooleanField(db_column='PermissionsManageChatterMessages', verbose_name='Manage Chatter Messages')
    permissionsforcetwofactor = models.BooleanField(db_column='PermissionsForceTwoFactor', verbose_name='Two-Factor Authentication for User Interface Logins')
    permissionsmanageauthproviders = models.BooleanField(db_column='PermissionsManageAuthProviders', verbose_name='Manage Auth. Providers')
    permissionsrunflow = models.BooleanField(db_column='PermissionsRunFlow', verbose_name='Run Flows')
    permissionsconnectorgtoenvironmenthub = models.BooleanField(db_column='PermissionsConnectOrgToEnvironmentHub', verbose_name='Connect Organization to Environment Hub')
    permissionstwofactorapi = models.BooleanField(db_column='PermissionsTwoFactorApi', verbose_name='Two-Factor Authentication for API Logins')
    permissionsdeletetopics = models.BooleanField(db_column='PermissionsDeleteTopics', verbose_name='Delete Topics')
    permissionsedittopics = models.BooleanField(db_column='PermissionsEditTopics', verbose_name='Edit Topics')
    permissionscreatetopics = models.BooleanField(db_column='PermissionsCreateTopics', verbose_name='Create Topics')
    permissionsassigntopics = models.BooleanField(db_column='PermissionsAssignTopics', verbose_name='Assign Topics')
    permissionsidentityenabled = models.BooleanField(db_column='PermissionsIdentityEnabled', verbose_name='Use Identity Features')
    permissionsidentityconnect = models.BooleanField(db_column='PermissionsIdentityConnect', verbose_name='Use Identity Connect')
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='permissionset_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='permissionset_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'PermissionSet'
        verbose_name = 'Permission Set'
        verbose_name_plural = 'Permission Sets'
        # keyPrefix = '0PS'

class Permissionsetassignment(models.Model):
    permissionset = models.ForeignKey(Permissionset, sf_read_only=models.NOT_UPDATEABLE, db_column='PermissionSetId')
    assignee = models.ForeignKey('User', sf_read_only=models.NOT_UPDATEABLE, db_column='AssigneeId')
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='Date Assigned', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'PermissionSetAssignment'
        verbose_name = 'Permission Set Assignment'
        verbose_name_plural = 'Permission Set Assignments'
        # keyPrefix = '0Pa'

class Permissionsetlicense(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Developer Name', sf_read_only=models.READ_ONLY)
    language = models.CharField(db_column='Language', max_length=40, verbose_name='Master Language', sf_read_only=models.READ_ONLY, choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazilian)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian')])
    masterlabel = models.CharField(db_column='MasterLabel', max_length=80, verbose_name='Permission Set License Label', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='permissionsetlicense_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='permissionsetlicense_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    permissionsetlicensekey = models.CharField(db_column='PermissionSetLicenseKey', unique=True, max_length=40, verbose_name='Permission Set License Key', sf_read_only=models.READ_ONLY)
    totallicenses = models.IntegerField(db_column='TotalLicenses', verbose_name='Total Licenses', sf_read_only=models.READ_ONLY)
    status = models.CharField(db_column='Status', max_length=255, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Disabled', 'Disabled')])
    expirationdate = models.DateField(db_column='ExpirationDate', verbose_name='Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    maximumpermissionsedittask = models.BooleanField(db_column='MaximumPermissionsEditTask', verbose_name='Edit Tasks', sf_read_only=models.READ_ONLY)
    maximumpermissionseditevent = models.BooleanField(db_column='MaximumPermissionsEditEvent', verbose_name='Edit Events', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanageusers = models.BooleanField(db_column='MaximumPermissionsManageUsers', verbose_name='Manage Users', sf_read_only=models.READ_ONLY)
    maximumpermissionsmodifyalldata = models.BooleanField(db_column='MaximumPermissionsModifyAllData', verbose_name='Modify All Data', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagecases = models.BooleanField(db_column='MaximumPermissionsManageCases', verbose_name='Manage Cases', sf_read_only=models.READ_ONLY)
    maximumpermissionsmassinlineedit = models.BooleanField(db_column='MaximumPermissionsMassInlineEdit', verbose_name='Mass Edits from Lists', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagesolutions = models.BooleanField(db_column='MaximumPermissionsManageSolutions', verbose_name='Manage Published Solutions', sf_read_only=models.READ_ONLY)
    maximumpermissionscustomizeapplication = models.BooleanField(db_column='MaximumPermissionsCustomizeApplication', verbose_name='Customize Application', sf_read_only=models.READ_ONLY)
    maximumpermissionseditreadonlyfields = models.BooleanField(db_column='MaximumPermissionsEditReadonlyFields', verbose_name='Edit Read Only Fields', sf_read_only=models.READ_ONLY)
    maximumpermissionsrunreports = models.BooleanField(db_column='MaximumPermissionsRunReports', verbose_name='Run Reports', sf_read_only=models.READ_ONLY)
    maximumpermissionsviewsetup = models.BooleanField(db_column='MaximumPermissionsViewSetup', verbose_name='View Setup and Configuration', sf_read_only=models.READ_ONLY)
    maximumpermissionstransferanyentity = models.BooleanField(db_column='MaximumPermissionsTransferAnyEntity', verbose_name='Transfer Record', sf_read_only=models.READ_ONLY)
    maximumpermissionsnewreportbuilder = models.BooleanField(db_column='MaximumPermissionsNewReportBuilder', verbose_name='Report Builder', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanageselfservice = models.BooleanField(db_column='MaximumPermissionsManageSelfService', verbose_name='Manage Self-Service Portal', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagecssusers = models.BooleanField(db_column='MaximumPermissionsManageCssUsers', verbose_name='Edit Self-Service Users', sf_read_only=models.READ_ONLY)
    maximumpermissionsimportleads = models.BooleanField(db_column='MaximumPermissionsImportLeads', verbose_name='Import Leads', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanageleads = models.BooleanField(db_column='MaximumPermissionsManageLeads', verbose_name='Manage Leads', sf_read_only=models.READ_ONLY)
    maximumpermissionstransferanylead = models.BooleanField(db_column='MaximumPermissionsTransferAnyLead', verbose_name='Transfer Leads', sf_read_only=models.READ_ONLY)
    maximumpermissionsviewalldata = models.BooleanField(db_column='MaximumPermissionsViewAllData', verbose_name='View All Data', sf_read_only=models.READ_ONLY)
    maximumpermissionseditpublicdocuments = models.BooleanField(db_column='MaximumPermissionsEditPublicDocuments', verbose_name='Manage Public Documents', sf_read_only=models.READ_ONLY)
    maximumpermissionschatterinternaluser = models.BooleanField(db_column='MaximumPermissionsChatterInternalUser', verbose_name='Chatter Internal User', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagedashboards = models.BooleanField(db_column='MaximumPermissionsManageDashboards', verbose_name='Manage Dashboards', sf_read_only=models.READ_ONLY)
    maximumpermissionschatterinviteexternalusers = models.BooleanField(db_column='MaximumPermissionsChatterInviteExternalUsers', verbose_name='Invite Customers To Chatter', sf_read_only=models.READ_ONLY)
    maximumpermissionssendsitrequests = models.BooleanField(db_column='MaximumPermissionsSendSitRequests', verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.READ_ONLY)
    maximumpermissionsapiuseronly = models.BooleanField(db_column='MaximumPermissionsApiUserOnly', verbose_name='Api Only User', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanageremoteaccess = models.BooleanField(db_column='MaximumPermissionsManageRemoteAccess', verbose_name='Manage Connected Apps', sf_read_only=models.READ_ONLY)
    maximumpermissionscanusenewdashboardbuilder = models.BooleanField(db_column='MaximumPermissionsCanUseNewDashboardBuilder', verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagecategories = models.BooleanField(db_column='MaximumPermissionsManageCategories', verbose_name='Manage Categories', sf_read_only=models.READ_ONLY)
    maximumpermissionsconvertleads = models.BooleanField(db_column='MaximumPermissionsConvertLeads', verbose_name='Convert Leads', sf_read_only=models.READ_ONLY)
    maximumpermissionspasswordneverexpires = models.BooleanField(db_column='MaximumPermissionsPasswordNeverExpires', verbose_name='Password Never Expires', sf_read_only=models.READ_ONLY)
    maximumpermissionsuseteamreassignwizards = models.BooleanField(db_column='MaximumPermissionsUseTeamReassignWizards', verbose_name='Use Team Reassignment Wizards', sf_read_only=models.READ_ONLY)
    maximumpermissionsinstallpackaging = models.BooleanField(db_column='MaximumPermissionsInstallPackaging', verbose_name='Download AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximumpermissionspublishpackaging = models.BooleanField(db_column='MaximumPermissionsPublishPackaging', verbose_name='Upload AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximumpermissionschatterowngroups = models.BooleanField(db_column='MaximumPermissionsChatterOwnGroups', verbose_name='Create and Own New Chatter Groups', sf_read_only=models.READ_ONLY)
    maximumpermissionseditopplineitemunitprice = models.BooleanField(db_column='MaximumPermissionsEditOppLineItemUnitPrice', verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.READ_ONLY)
    maximumpermissionscreatepackaging = models.BooleanField(db_column='MaximumPermissionsCreatePackaging', verbose_name='Create AppExchange Packages', sf_read_only=models.READ_ONLY)
    maximumpermissionsbulkapiharddelete = models.BooleanField(db_column='MaximumPermissionsBulkApiHardDelete', verbose_name='Bulk API Hard Delete', sf_read_only=models.READ_ONLY)
    maximumpermissionsinboundmigrationtoolsuser = models.BooleanField(db_column='MaximumPermissionsInboundMigrationToolsUser', verbose_name='Deploy Change Sets', sf_read_only=models.READ_ONLY)
    maximumpermissionssolutionimport = models.BooleanField(db_column='MaximumPermissionsSolutionImport', verbose_name='Import Solutions', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagecallcenters = models.BooleanField(db_column='MaximumPermissionsManageCallCenters', verbose_name='Manage Call Centers', sf_read_only=models.READ_ONLY)
    maximumpermissionseditreports = models.BooleanField(db_column='MaximumPermissionsEditReports', verbose_name='Create and Customize Reports', sf_read_only=models.READ_ONLY)
    maximumpermissionsoutboundmigrationtoolsuser = models.BooleanField(db_column='MaximumPermissionsOutboundMigrationToolsUser', verbose_name='Create and Upload Change Sets', sf_read_only=models.READ_ONLY)
    maximumpermissionsviewcontent = models.BooleanField(db_column='MaximumPermissionsViewContent', verbose_name='View Content in Portals', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanageemailclientconfig = models.BooleanField(db_column='MaximumPermissionsManageEmailClientConfig', verbose_name='Manage Email Client Configurations', sf_read_only=models.READ_ONLY)
    maximumpermissionsenablenotifications = models.BooleanField(db_column='MaximumPermissionsEnableNotifications', verbose_name='Send Outbound Messages', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagedataintegrations = models.BooleanField(db_column='MaximumPermissionsManageDataIntegrations', verbose_name='Manage Data Integrations', sf_read_only=models.READ_ONLY)
    maximumpermissionsviewdatacategories = models.BooleanField(db_column='MaximumPermissionsViewDataCategories', verbose_name='View Data Categories', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagedatacategories = models.BooleanField(db_column='MaximumPermissionsManageDataCategories', verbose_name='Manage Data Categories', sf_read_only=models.READ_ONLY)
    maximumpermissionsauthorapex = models.BooleanField(db_column='MaximumPermissionsAuthorApex', verbose_name='Author Apex', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagemobile = models.BooleanField(db_column='MaximumPermissionsManageMobile', verbose_name='Manage Mobile Configurations', sf_read_only=models.READ_ONLY)
    maximumpermissionsapienabled = models.BooleanField(db_column='MaximumPermissionsApiEnabled', verbose_name='API Enabled', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagecustomreporttypes = models.BooleanField(db_column='MaximumPermissionsManageCustomReportTypes', verbose_name='Manage Custom Report Types', sf_read_only=models.READ_ONLY)
    maximumpermissionseditcasecomments = models.BooleanField(db_column='MaximumPermissionsEditCaseComments', verbose_name='Edit Case Comments', sf_read_only=models.READ_ONLY)
    maximumpermissionstransferanycase = models.BooleanField(db_column='MaximumPermissionsTransferAnyCase', verbose_name='Transfer Cases', sf_read_only=models.READ_ONLY)
    maximumpermissionscontentadministrator = models.BooleanField(db_column='MaximumPermissionsContentAdministrator', verbose_name='Manage Salesforce CRM Content', sf_read_only=models.READ_ONLY)
    maximumpermissionscreateworkspaces = models.BooleanField(db_column='MaximumPermissionsCreateWorkspaces', verbose_name='Create Libraries', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagecontentpermissions = models.BooleanField(db_column='MaximumPermissionsManageContentPermissions', verbose_name='Manage Content Permissions', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagecontentproperties = models.BooleanField(db_column='MaximumPermissionsManageContentProperties', verbose_name='Manage Content Properties', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagecontenttypes = models.BooleanField(db_column='MaximumPermissionsManageContentTypes', verbose_name='Manage Content Types', sf_read_only=models.READ_ONLY)
    maximumpermissionsschedulejob = models.BooleanField(db_column='MaximumPermissionsScheduleJob', verbose_name='Schedule Dashboards', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanageanalyticsnapshots = models.BooleanField(db_column='MaximumPermissionsManageAnalyticSnapshots', verbose_name='Manage Analytic Snapshots', sf_read_only=models.READ_ONLY)
    maximumpermissionsschedulereports = models.BooleanField(db_column='MaximumPermissionsScheduleReports', verbose_name='Schedule Reports', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagebusinesshourholidays = models.BooleanField(db_column='MaximumPermissionsManageBusinessHourHolidays', verbose_name='Manage Business Hours Holidays', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanageinteraction = models.BooleanField(db_column='MaximumPermissionsManageInteraction', verbose_name='Manage Force.com Flow', sf_read_only=models.READ_ONLY)
    maximumpermissionsviewmyteamsdashboards = models.BooleanField(db_column='MaximumPermissionsViewMyTeamsDashboards', verbose_name="View My Team's Dashboards", sf_read_only=models.READ_ONLY)
    maximumpermissionsmoderatechatter = models.BooleanField(db_column='MaximumPermissionsModerateChatter', verbose_name='Moderate Chatter', sf_read_only=models.READ_ONLY)
    maximumpermissionsresetpasswords = models.BooleanField(db_column='MaximumPermissionsResetPasswords', verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.READ_ONLY)
    maximumpermissionsflowuflrequired = models.BooleanField(db_column='MaximumPermissionsFlowUFLRequired', verbose_name='Require Force.com Flow User Feature License', sf_read_only=models.READ_ONLY)
    maximumpermissionscaninsertfeedsystemfields = models.BooleanField(db_column='MaximumPermissionsCanInsertFeedSystemFields', verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.READ_ONLY)
    maximumpermissionsemailtemplatemanagement = models.BooleanField(db_column='MaximumPermissionsEmailTemplateManagement', verbose_name='Manage Email Templates', sf_read_only=models.READ_ONLY)
    maximumpermissionsemailadministration = models.BooleanField(db_column='MaximumPermissionsEmailAdministration', verbose_name='Email Administration', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanagechattermessages = models.BooleanField(db_column='MaximumPermissionsManageChatterMessages', verbose_name='Manage Chatter Messages', sf_read_only=models.READ_ONLY)
    maximumpermissionsforcetwofactor = models.BooleanField(db_column='MaximumPermissionsForceTwoFactor', verbose_name='Two-Factor Authentication for User Interface Logins', sf_read_only=models.READ_ONLY)
    maximumpermissionsmanageauthproviders = models.BooleanField(db_column='MaximumPermissionsManageAuthProviders', verbose_name='Manage Auth. Providers', sf_read_only=models.READ_ONLY)
    maximumpermissionsrunflow = models.BooleanField(db_column='MaximumPermissionsRunFlow', verbose_name='Run Flows', sf_read_only=models.READ_ONLY)
    maximumpermissionsconnectorgtoenvironmenthub = models.BooleanField(db_column='MaximumPermissionsConnectOrgToEnvironmentHub', verbose_name='Connect Organization to Environment Hub', sf_read_only=models.READ_ONLY)
    maximumpermissionstwofactorapi = models.BooleanField(db_column='MaximumPermissionsTwoFactorApi', verbose_name='Two-Factor Authentication for API Logins', sf_read_only=models.READ_ONLY)
    maximumpermissionsdeletetopics = models.BooleanField(db_column='MaximumPermissionsDeleteTopics', verbose_name='Delete Topics', sf_read_only=models.READ_ONLY)
    maximumpermissionsedittopics = models.BooleanField(db_column='MaximumPermissionsEditTopics', verbose_name='Edit Topics', sf_read_only=models.READ_ONLY)
    maximumpermissionscreatetopics = models.BooleanField(db_column='MaximumPermissionsCreateTopics', verbose_name='Create Topics', sf_read_only=models.READ_ONLY)
    maximumpermissionsassigntopics = models.BooleanField(db_column='MaximumPermissionsAssignTopics', verbose_name='Assign Topics', sf_read_only=models.READ_ONLY)
    maximumpermissionsidentityenabled = models.BooleanField(db_column='MaximumPermissionsIdentityEnabled', verbose_name='Use Identity Features', sf_read_only=models.READ_ONLY)
    maximumpermissionsidentityconnect = models.BooleanField(db_column='MaximumPermissionsIdentityConnect', verbose_name='Use Identity Connect', sf_read_only=models.READ_ONLY)
    usedlicenses = models.IntegerField(db_column='UsedLicenses', verbose_name='Used Licenses', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'PermissionSetLicense'
        verbose_name = 'Permission Set License'
        verbose_name_plural = 'Permission Set Licenses'
        # keyPrefix = '0PL'

class Permissionsetlicenseassign(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='permissionsetlicenseassign_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='permissionsetlicenseassign_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='Date Assigned', sf_read_only=models.READ_ONLY)
    permissionsetlicense = models.ForeignKey(Permissionsetlicense, sf_read_only=models.NOT_UPDATEABLE, db_column='PermissionSetLicenseId')
    assignee = models.ForeignKey('User', related_name='permissionsetlicenseassign_assignee_set', db_column='AssigneeId', sf_read_only=models.NOT_UPDATEABLE)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'PermissionSetLicenseAssign'
        verbose_name = 'Permission Set License Assignment'
        verbose_name_plural = 'Permission Set License Assignments'
        # keyPrefix = '2LA'

class Pricebook2(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Price Book Name')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='pricebook2_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='pricebook2_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active')
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', blank=True)
    isstandard = models.BooleanField(db_column='IsStandard', verbose_name='Is Standard Price Book', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Pricebook2'
        verbose_name = 'Price Book'
        verbose_name_plural = 'Price Books'
        # keyPrefix = '01s'

class Pricebook2History(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    pricebook2 = models.ForeignKey(Pricebook2, sf_read_only=models.READ_ONLY, db_column='Pricebook2Id')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('Description', None), ('feedEvent', 'Feed event'), ('IsActive', None), ('IsArchived', None), ('IsStandard', None), ('Name', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Pricebook2History'
        verbose_name = 'Price Book History'
        verbose_name_plural = 'Price Book History'
        # keyPrefix = 'None'

class Pricebookentry(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Product Name', sf_read_only=models.READ_ONLY, blank=True)
    pricebook2 = models.ForeignKey(Pricebook2, sf_read_only=models.NOT_UPDATEABLE, db_column='Pricebook2Id')
    product2 = models.ForeignKey('Product2', sf_read_only=models.NOT_UPDATEABLE, db_column='Product2Id')
    unitprice = models.DecimalField(db_column='UnitPrice', max_digits=18, decimal_places=2, verbose_name='List Price')
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active')
    usestandardprice = models.BooleanField(db_column='UseStandardPrice', verbose_name='Use Standard Price')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='pricebookentry_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='pricebookentry_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    productcode = models.CharField(db_column='ProductCode', max_length=255, verbose_name='Product Code', sf_read_only=models.READ_ONLY, blank=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'PricebookEntry'
        verbose_name = 'Price Book Entry'
        verbose_name_plural = 'Price Book Entry'
        # keyPrefix = '01u'

class Processinstance(models.Model):
    targetobject = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.READ_ONLY, db_column='TargetObjectId')
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')])
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='processinstance_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='processinstance_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ProcessInstance'
        verbose_name = 'Process Instance'
        verbose_name_plural = 'Process Instance'
        # keyPrefix = '04g'

class Processinstancehistory(models.Model):
    ispending = models.BooleanField(db_column='IsPending', verbose_name='Is Pending', sf_read_only=models.READ_ONLY)
    processinstance = models.ForeignKey(Processinstance, sf_read_only=models.READ_ONLY, db_column='ProcessInstanceId')
    targetobject = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.READ_ONLY, db_column='TargetObjectId', blank=True, null=True)
    stepstatus = models.CharField(db_column='StepStatus', max_length=40, verbose_name='Status', sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')], blank=True)
    originalactor = models.ForeignKey(Group, related_name='processinstancehistory_originalactor_set', db_column='OriginalActorId', sf_read_only=models.READ_ONLY)
    actor = models.ForeignKey(Group, related_name='processinstancehistory_actor_set', db_column='ActorId', sf_read_only=models.READ_ONLY)
    reminderssent = models.IntegerField(db_column='RemindersSent', verbose_name='RemindersSent', sf_read_only=models.READ_ONLY, blank=True, null=True)
    comments = models.CharField(db_column='Comments', max_length=4000, verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ProcessInstanceHistory'
        verbose_name = 'Process Instance History'
        verbose_name_plural = 'Process Instance History'
        # keyPrefix = 'None'

class Processinstancestep(models.Model):
    processinstance = models.ForeignKey(Processinstance, sf_read_only=models.READ_ONLY, db_column='ProcessInstanceId')
    stepstatus = models.CharField(db_column='StepStatus', max_length=40, verbose_name='Step Status', sf_read_only=models.READ_ONLY, choices=[('Approved', 'Approved'), ('Rejected', 'Rejected'), ('Removed', 'Recalled'), ('Fault', 'Fault'), ('Pending', 'Pending'), ('Held', 'Hold'), ('Reassigned', 'Reassigned'), ('Started', 'Submitted'), ('NoResponse', 'NoResponse')], blank=True)
    originalactor = models.ForeignKey(Group, related_name='processinstancestep_originalactor_set', db_column='OriginalActorId', sf_read_only=models.READ_ONLY)
    actor = models.ForeignKey(Group, related_name='processinstancestep_actor_set', db_column='ActorId', sf_read_only=models.READ_ONLY)
    comments = models.CharField(db_column='Comments', max_length=4000, verbose_name='Comments', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ProcessInstanceStep'
        verbose_name = 'Process Instance Step'
        verbose_name_plural = 'Process Instance Step'
        # keyPrefix = '04h'

class Processinstanceworkitem(models.Model):
    processinstance = models.ForeignKey(Processinstance, sf_read_only=models.NOT_CREATEABLE, db_column='ProcessInstanceId')
    originalactor = models.ForeignKey(Group, related_name='processinstanceworkitem_originalactor_set', db_column='OriginalActorId', sf_read_only=models.NOT_CREATEABLE)
    actor = models.ForeignKey(Group, related_name='processinstanceworkitem_actor_set', db_column='ActorId', sf_read_only=models.NOT_CREATEABLE)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ProcessInstanceWorkitem'
        verbose_name = 'Approval Request'
        verbose_name_plural = 'Approval Requests'
        # keyPrefix = '04i'

class Product2(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Product Name')
    productcode = models.CharField(db_column='ProductCode', max_length=255, verbose_name='Product Code', blank=True)
    description = models.TextField(db_column='Description', verbose_name='Product Description', blank=True)
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='product2_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='product2_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    family = models.CharField(db_column='Family', max_length=40, verbose_name='Product Family', blank=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Product2'
        verbose_name = 'Product'
        verbose_name_plural = 'Products'
        # keyPrefix = '01t'

class Product2Feed(models.Model):
    parent = models.ForeignKey(Product2, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='product2feed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='product2feed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Product2Feed'
        verbose_name = 'Product Feed'
        verbose_name_plural = 'Product Feed'
        # keyPrefix = 'None'

class Profile(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Name', sf_read_only=models.NOT_CREATEABLE)
    permissionsedittask = models.BooleanField(db_column='PermissionsEditTask', verbose_name='Edit Tasks', sf_read_only=models.NOT_CREATEABLE)
    permissionseditevent = models.BooleanField(db_column='PermissionsEditEvent', verbose_name='Edit Events', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanageusers = models.BooleanField(db_column='PermissionsManageUsers', verbose_name='Manage Users', sf_read_only=models.NOT_CREATEABLE)
    permissionsmodifyalldata = models.BooleanField(db_column='PermissionsModifyAllData', verbose_name='Modify All Data', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagecases = models.BooleanField(db_column='PermissionsManageCases', verbose_name='Manage Cases', sf_read_only=models.NOT_CREATEABLE)
    permissionsmassinlineedit = models.BooleanField(db_column='PermissionsMassInlineEdit', verbose_name='Mass Edits from Lists', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagesolutions = models.BooleanField(db_column='PermissionsManageSolutions', verbose_name='Manage Published Solutions', sf_read_only=models.NOT_CREATEABLE)
    permissionscustomizeapplication = models.BooleanField(db_column='PermissionsCustomizeApplication', verbose_name='Customize Application', sf_read_only=models.NOT_CREATEABLE)
    permissionseditreadonlyfields = models.BooleanField(db_column='PermissionsEditReadonlyFields', verbose_name='Edit Read Only Fields', sf_read_only=models.NOT_CREATEABLE)
    permissionsrunreports = models.BooleanField(db_column='PermissionsRunReports', verbose_name='Run Reports', sf_read_only=models.NOT_CREATEABLE)
    permissionsviewsetup = models.BooleanField(db_column='PermissionsViewSetup', verbose_name='View Setup and Configuration', sf_read_only=models.NOT_CREATEABLE)
    permissionstransferanyentity = models.BooleanField(db_column='PermissionsTransferAnyEntity', verbose_name='Transfer Record', sf_read_only=models.NOT_CREATEABLE)
    permissionsnewreportbuilder = models.BooleanField(db_column='PermissionsNewReportBuilder', verbose_name='Report Builder', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanageselfservice = models.BooleanField(db_column='PermissionsManageSelfService', verbose_name='Manage Self-Service Portal', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagecssusers = models.BooleanField(db_column='PermissionsManageCssUsers', verbose_name='Edit Self-Service Users', sf_read_only=models.NOT_CREATEABLE)
    permissionsimportleads = models.BooleanField(db_column='PermissionsImportLeads', verbose_name='Import Leads', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanageleads = models.BooleanField(db_column='PermissionsManageLeads', verbose_name='Manage Leads', sf_read_only=models.NOT_CREATEABLE)
    permissionstransferanylead = models.BooleanField(db_column='PermissionsTransferAnyLead', verbose_name='Transfer Leads', sf_read_only=models.NOT_CREATEABLE)
    permissionsviewalldata = models.BooleanField(db_column='PermissionsViewAllData', verbose_name='View All Data', sf_read_only=models.NOT_CREATEABLE)
    permissionseditpublicdocuments = models.BooleanField(db_column='PermissionsEditPublicDocuments', verbose_name='Manage Public Documents', sf_read_only=models.NOT_CREATEABLE)
    permissionschatterinternaluser = models.BooleanField(db_column='PermissionsChatterInternalUser', verbose_name='Chatter Internal User', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagedashboards = models.BooleanField(db_column='PermissionsManageDashboards', verbose_name='Manage Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissionschatterinviteexternalusers = models.BooleanField(db_column='PermissionsChatterInviteExternalUsers', verbose_name='Invite Customers To Chatter', sf_read_only=models.NOT_CREATEABLE)
    permissionssendsitrequests = models.BooleanField(db_column='PermissionsSendSitRequests', verbose_name='Send Stay-in-Touch Requests', sf_read_only=models.NOT_CREATEABLE)
    permissionsapiuseronly = models.BooleanField(db_column='PermissionsApiUserOnly', verbose_name='Api Only User', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanageremoteaccess = models.BooleanField(db_column='PermissionsManageRemoteAccess', verbose_name='Manage Connected Apps', sf_read_only=models.NOT_CREATEABLE)
    permissionscanusenewdashboardbuilder = models.BooleanField(db_column='PermissionsCanUseNewDashboardBuilder', verbose_name='Drag-and-Drop Dashboard Builder', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagecategories = models.BooleanField(db_column='PermissionsManageCategories', verbose_name='Manage Categories', sf_read_only=models.NOT_CREATEABLE)
    permissionsconvertleads = models.BooleanField(db_column='PermissionsConvertLeads', verbose_name='Convert Leads', sf_read_only=models.NOT_CREATEABLE)
    permissionspasswordneverexpires = models.BooleanField(db_column='PermissionsPasswordNeverExpires', verbose_name='Password Never Expires', sf_read_only=models.NOT_CREATEABLE)
    permissionsuseteamreassignwizards = models.BooleanField(db_column='PermissionsUseTeamReassignWizards', verbose_name='Use Team Reassignment Wizards', sf_read_only=models.NOT_CREATEABLE)
    permissionsinstallmultiforce = models.BooleanField(db_column='PermissionsInstallMultiforce', verbose_name='Download AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissionspublishmultiforce = models.BooleanField(db_column='PermissionsPublishMultiforce', verbose_name='Upload AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissionschatterowngroups = models.BooleanField(db_column='PermissionsChatterOwnGroups', verbose_name='Create and Own New Chatter Groups', sf_read_only=models.NOT_CREATEABLE)
    permissionseditopplineitemunitprice = models.BooleanField(db_column='PermissionsEditOppLineItemUnitPrice', verbose_name='Edit Opportunity Product Sales Price', sf_read_only=models.NOT_CREATEABLE)
    permissionscreatemultiforce = models.BooleanField(db_column='PermissionsCreateMultiforce', verbose_name='Create AppExchange Packages', sf_read_only=models.NOT_CREATEABLE)
    permissionsbulkapiharddelete = models.BooleanField(db_column='PermissionsBulkApiHardDelete', verbose_name='Bulk API Hard Delete', sf_read_only=models.NOT_CREATEABLE)
    permissionsinboundmigrationtoolsuser = models.BooleanField(db_column='PermissionsInboundMigrationToolsUser', verbose_name='Deploy Change Sets', sf_read_only=models.NOT_CREATEABLE)
    permissionssolutionimport = models.BooleanField(db_column='PermissionsSolutionImport', verbose_name='Import Solutions', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagecallcenters = models.BooleanField(db_column='PermissionsManageCallCenters', verbose_name='Manage Call Centers', sf_read_only=models.NOT_CREATEABLE)
    permissionseditreports = models.BooleanField(db_column='PermissionsEditReports', verbose_name='Create and Customize Reports', sf_read_only=models.NOT_CREATEABLE)
    permissionsoutboundmigrationtoolsuser = models.BooleanField(db_column='PermissionsOutboundMigrationToolsUser', verbose_name='Create and Upload Change Sets', sf_read_only=models.NOT_CREATEABLE)
    permissionsviewcontent = models.BooleanField(db_column='PermissionsViewContent', verbose_name='View Content in Portals', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanageemailclientconfig = models.BooleanField(db_column='PermissionsManageEmailClientConfig', verbose_name='Manage Email Client Configurations', sf_read_only=models.NOT_CREATEABLE)
    permissionsenablenotifications = models.BooleanField(db_column='PermissionsEnableNotifications', verbose_name='Send Outbound Messages', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagedataintegrations = models.BooleanField(db_column='PermissionsManageDataIntegrations', verbose_name='Manage Data Integrations', sf_read_only=models.NOT_CREATEABLE)
    permissionsviewdatacategories = models.BooleanField(db_column='PermissionsViewDataCategories', verbose_name='View Data Categories', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagedatacategories = models.BooleanField(db_column='PermissionsManageDataCategories', verbose_name='Manage Data Categories', sf_read_only=models.NOT_CREATEABLE)
    permissionsauthorapex = models.BooleanField(db_column='PermissionsAuthorApex', verbose_name='Author Apex', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagemobile = models.BooleanField(db_column='PermissionsManageMobile', verbose_name='Manage Mobile Configurations', sf_read_only=models.NOT_CREATEABLE)
    permissionsapienabled = models.BooleanField(db_column='PermissionsApiEnabled', verbose_name='API Enabled', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagecustomreporttypes = models.BooleanField(db_column='PermissionsManageCustomReportTypes', verbose_name='Manage Custom Report Types', sf_read_only=models.NOT_CREATEABLE)
    permissionseditcasecomments = models.BooleanField(db_column='PermissionsEditCaseComments', verbose_name='Edit Case Comments', sf_read_only=models.NOT_CREATEABLE)
    permissionstransferanycase = models.BooleanField(db_column='PermissionsTransferAnyCase', verbose_name='Transfer Cases', sf_read_only=models.NOT_CREATEABLE)
    permissionscontentadministrator = models.BooleanField(db_column='PermissionsContentAdministrator', verbose_name='Manage Salesforce CRM Content', sf_read_only=models.NOT_CREATEABLE)
    permissionscreateworkspaces = models.BooleanField(db_column='PermissionsCreateWorkspaces', verbose_name='Create Libraries', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagecontentpermissions = models.BooleanField(db_column='PermissionsManageContentPermissions', verbose_name='Manage Content Permissions', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagecontentproperties = models.BooleanField(db_column='PermissionsManageContentProperties', verbose_name='Manage Content Properties', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagecontenttypes = models.BooleanField(db_column='PermissionsManageContentTypes', verbose_name='Manage Content Types', sf_read_only=models.NOT_CREATEABLE)
    permissionsschedulejob = models.BooleanField(db_column='PermissionsScheduleJob', verbose_name='Schedule Dashboards', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanageanalyticsnapshots = models.BooleanField(db_column='PermissionsManageAnalyticSnapshots', verbose_name='Manage Analytic Snapshots', sf_read_only=models.NOT_CREATEABLE)
    permissionsschedulereports = models.BooleanField(db_column='PermissionsScheduleReports', verbose_name='Schedule Reports', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagebusinesshourholidays = models.BooleanField(db_column='PermissionsManageBusinessHourHolidays', verbose_name='Manage Business Hours Holidays', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanageinteraction = models.BooleanField(db_column='PermissionsManageInteraction', verbose_name='Manage Force.com Flow', sf_read_only=models.NOT_CREATEABLE)
    permissionsviewmyteamsdashboards = models.BooleanField(db_column='PermissionsViewMyTeamsDashboards', verbose_name="View My Team's Dashboards", sf_read_only=models.NOT_CREATEABLE)
    permissionsmoderatechatter = models.BooleanField(db_column='PermissionsModerateChatter', verbose_name='Moderate Chatter', sf_read_only=models.NOT_CREATEABLE)
    permissionsresetpasswords = models.BooleanField(db_column='PermissionsResetPasswords', verbose_name='Reset User Passwords and Unlock Users', sf_read_only=models.NOT_CREATEABLE)
    permissionsflowuflrequired = models.BooleanField(db_column='PermissionsFlowUFLRequired', verbose_name='Require Force.com Flow User Feature License', sf_read_only=models.NOT_CREATEABLE)
    permissionscaninsertfeedsystemfields = models.BooleanField(db_column='PermissionsCanInsertFeedSystemFields', verbose_name='Insert System Field Values for Chatter Feeds', sf_read_only=models.NOT_CREATEABLE)
    permissionsemailtemplatemanagement = models.BooleanField(db_column='PermissionsEmailTemplateManagement', verbose_name='Manage Email Templates', sf_read_only=models.NOT_CREATEABLE)
    permissionsemailadministration = models.BooleanField(db_column='PermissionsEmailAdministration', verbose_name='Email Administration', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanagechattermessages = models.BooleanField(db_column='PermissionsManageChatterMessages', verbose_name='Manage Chatter Messages', sf_read_only=models.NOT_CREATEABLE)
    permissionsforcetwofactor = models.BooleanField(db_column='PermissionsForceTwoFactor', verbose_name='Two-Factor Authentication for User Interface Logins', sf_read_only=models.NOT_CREATEABLE)
    permissionsmanageauthproviders = models.BooleanField(db_column='PermissionsManageAuthProviders', verbose_name='Manage Auth. Providers', sf_read_only=models.NOT_CREATEABLE)
    permissionsrunflow = models.BooleanField(db_column='PermissionsRunFlow', verbose_name='Run Flows', sf_read_only=models.NOT_CREATEABLE)
    permissionsconnectorgtoenvironmenthub = models.BooleanField(db_column='PermissionsConnectOrgToEnvironmentHub', verbose_name='Connect Organization to Environment Hub', sf_read_only=models.NOT_CREATEABLE)
    permissionstwofactorapi = models.BooleanField(db_column='PermissionsTwoFactorApi', verbose_name='Two-Factor Authentication for API Logins', sf_read_only=models.NOT_CREATEABLE)
    permissionsdeletetopics = models.BooleanField(db_column='PermissionsDeleteTopics', verbose_name='Delete Topics', sf_read_only=models.NOT_CREATEABLE)
    permissionsedittopics = models.BooleanField(db_column='PermissionsEditTopics', verbose_name='Edit Topics', sf_read_only=models.NOT_CREATEABLE)
    permissionscreatetopics = models.BooleanField(db_column='PermissionsCreateTopics', verbose_name='Create Topics', sf_read_only=models.NOT_CREATEABLE)
    permissionsassigntopics = models.BooleanField(db_column='PermissionsAssignTopics', verbose_name='Assign Topics', sf_read_only=models.NOT_CREATEABLE)
    permissionsidentityenabled = models.BooleanField(db_column='PermissionsIdentityEnabled', verbose_name='Use Identity Features', sf_read_only=models.NOT_CREATEABLE)
    permissionsidentityconnect = models.BooleanField(db_column='PermissionsIdentityConnect', verbose_name='Use Identity Connect', sf_read_only=models.NOT_CREATEABLE)
    userlicense = models.ForeignKey('Userlicense', sf_read_only=models.READ_ONLY, db_column='UserLicenseId')
    usertype = models.CharField(db_column='UserType', max_length=40, verbose_name='User Type', sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='profile_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='profile_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', sf_read_only=models.NOT_CREATEABLE, blank=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Profile'
        verbose_name = 'Profile'
        verbose_name_plural = 'Profile'
        # keyPrefix = '00e'

class Pushtopic(models.Model):
    name = models.CharField(db_column='Name', max_length=25, verbose_name='Topic Name')
    query = models.CharField(db_column='Query', max_length=1300, verbose_name='SOQL Query')
    apiversion = models.DecimalField(db_column='ApiVersion', max_digits=18, decimal_places=1, verbose_name='API Version')
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Is Active')
    notifyforfields = models.CharField(db_column='NotifyForFields', max_length=40, verbose_name='Notify For Fields', choices=[('Select', None), ('Where', None), ('Referenced', None), ('All', None)])
    notifyforoperations = models.CharField(db_column='NotifyForOperations', max_length=40, verbose_name='Notify For Operations', sf_read_only=models.READ_ONLY, choices=[('Create', None), ('Update', None), ('All', None), ('Extended', None)])
    description = models.CharField(db_column='Description', max_length=400, verbose_name='Description', blank=True)
    notifyforoperationcreate = models.BooleanField(db_column='NotifyForOperationCreate', verbose_name='Create')
    notifyforoperationupdate = models.BooleanField(db_column='NotifyForOperationUpdate', verbose_name='Update')
    notifyforoperationdelete = models.BooleanField(db_column='NotifyForOperationDelete', verbose_name='Delete')
    notifyforoperationundelete = models.BooleanField(db_column='NotifyForOperationUndelete', verbose_name='Undelete')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='pushtopic_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='pushtopic_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'PushTopic'
        verbose_name = 'Push Topic'
        verbose_name_plural = 'Push Topics'
        # keyPrefix = '0IF'

class Queuesobject(models.Model):
    queue = models.ForeignKey(Group, sf_read_only=models.NOT_UPDATEABLE, db_column='QueueId')
    sobjecttype = models.CharField(db_column='SobjectType', max_length=40, verbose_name='Sobject Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('APXTConga4__Conga_Email_Staging__c', None), ('APXTConga4__Conga_Email_Template__c', None), ('APXTConga4__Conga_Template__c', None), ('bde__Batch__c', None), ('Case', None), ('Lead', None), ('MC4SF__MC_Campaign__c', None), ('MC4SF__MC_List__c', None), ('MC4SF__MC_Subscriber__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship_Error__c', None), ('npo02__Household__c', None), ('SFSSDupeCatcher__Application_Settings__c', None), ('SFSSDupeCatcher__DcIn__c', None), ('SFSSDupeCatcher__Override_Cache__c', None), ('SFSSDupeCatcher__RequiredFieldSupport__c', None), ('SFSSDupeCatcher__Scenario__c', None)])
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'QueueSobject'
        verbose_name = 'Queue Sobject'
        verbose_name_plural = 'Queue Sobjects'
        # keyPrefix = '03g'

class Recentlyviewed(models.Model):
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Name', sf_read_only=models.READ_ONLY, blank=True)
    lastname = models.CharField(db_column='LastName', max_length=80, verbose_name='Last Name', sf_read_only=models.READ_ONLY, blank=True)
    firstname = models.CharField(db_column='FirstName', max_length=40, verbose_name='First Name', sf_read_only=models.READ_ONLY, blank=True)
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Type', sf_read_only=models.READ_ONLY, choices=[('Account', None), ('APXTConga4__Conga_Email_Staging__c', None), ('APXTConga4__Conga_Email_Template__c', None), ('APXTConga4__Conga_Template__c', None), ('bde__Batch__c', None), ('Campaign', None), ('Case', None), ('CollaborationGroup', None), ('Contact', None), ('ContentDocument', None), ('Contract', None), ('Dashboard', None), ('Document', None), ('Idea', None), ('Lead', None), ('MC4SF__MC_Campaign__c', None), ('MC4SF__MC_Campaign_Hourly_Stats__c', None), ('MC4SF__MC_Interest_Group__c', None), ('MC4SF__MC_Interest_Grouping__c', None), ('MC4SF__MC_List__c', None), ('MC4SF__MC_Merge_Variable__c', None), ('MC4SF__MC_Query__c', None), ('MC4SF__MC_Query_Filter__c', None), ('MC4SF__MC_Static_Segment__c', None), ('MC4SF__MC_Subscriber__c', None), ('MC4SF__MC_Subscriber_Activity__c', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('Opportunity', None), ('Pricebook2', None), ('Profile', None), ('Report', None), ('SFSSDupeCatcher__Application_Settings__c', None), ('SFSSDupeCatcher__DcIn__c', None), ('SFSSDupeCatcher__Duplicate_Warning__c', None), ('SFSSDupeCatcher__Override_Cache__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c', None), ('SFSSDupeCatcher__RequiredFieldSupport__c', None), ('SFSSDupeCatcher__Scenario__c', None), ('SFSSDupeCatcher__Scenario_Rule__c', None), ('Solution', None), ('Topic', None), ('User', None)], blank=True)
    alias = models.CharField(db_column='Alias', max_length=8, verbose_name='Alias', sf_read_only=models.READ_ONLY, blank=True)
    userrole = models.ForeignKey('Userrole', sf_read_only=models.READ_ONLY, db_column='UserRoleId', blank=True, null=True)
    recordtype = models.ForeignKey('Recordtype', sf_read_only=models.READ_ONLY, db_column='RecordTypeId', blank=True, null=True)
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY)
    profile = models.ForeignKey(Profile, sf_read_only=models.READ_ONLY, db_column='ProfileId', blank=True, null=True)
    title = models.CharField(db_column='Title', max_length=80, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    email = models.EmailField(db_column='Email', verbose_name='E-mail', sf_read_only=models.READ_ONLY, blank=True, null=True)
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Phone', sf_read_only=models.READ_ONLY, blank=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.NOT_CREATEABLE, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'RecentlyViewed'
        verbose_name = 'Recently Viewed'
        verbose_name_plural = 'Recently Viewed'
        # keyPrefix = 'None'

class Recordtype(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name')
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Record Type Name')
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', blank=True)
    businessprocessid = models.ForeignKey(Businessprocess, db_column='BusinessProcessId', blank=True, null=True)
    sobjecttype = models.CharField(db_column='SobjectType', max_length=40, verbose_name='Sobject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Announcement', None), ('APXTConga4__Conga_Email_Staging__c', None), ('APXTConga4__Conga_Email_Template__c', None), ('APXTConga4__Conga_Template__c', None), ('bde__Batch__c', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('Contact', None), ('ContentVersion', None), ('Contract', None), ('Event', None), ('Idea', None), ('InboundSocialPost', None), ('Lead', None), ('MC4SF__MC_Campaign__c', None), ('MC4SF__MC_Campaign_Hourly_Stats__c', None), ('MC4SF__MC_Interest_Group__c', None), ('MC4SF__MC_Interest_Grouping__c', None), ('MC4SF__MC_List__c', None), ('MC4SF__MC_Merge_Variable__c', None), ('MC4SF__MC_Query__c', None), ('MC4SF__MC_Query_Filter__c', None), ('MC4SF__MC_Static_Segment__c', None), ('MC4SF__MC_Subscriber__c', None), ('MC4SF__MC_Subscriber_Activity__c', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('Opportunity', None), ('Pricebook2', None), ('Product2', None), ('SFSSDupeCatcher__Application_Settings__c', None), ('SFSSDupeCatcher__DcIn__c', None), ('SFSSDupeCatcher__Duplicate_Warning__c', None), ('SFSSDupeCatcher__Override_Cache__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c', None), ('SFSSDupeCatcher__RequiredFieldSupport__c', None), ('SFSSDupeCatcher__Scenario__c', None), ('SFSSDupeCatcher__Scenario_Rule__c', None), ('Solution', None), ('Task', None)])
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.NOT_CREATEABLE)
    createdby = models.ForeignKey('User', related_name='recordtype_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='recordtype_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'RecordType'
        verbose_name = 'Record Type'
        verbose_name_plural = 'Record Type'
        # keyPrefix = '012'

class Report(models.Model):
    ownerid = models.ForeignKey(Folder, sf_read_only=models.READ_ONLY, db_column='OwnerId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='report_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='report_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=40, verbose_name='Report Name', sf_read_only=models.READ_ONLY)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', sf_read_only=models.READ_ONLY, blank=True)
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Report Unique Name', sf_read_only=models.READ_ONLY)
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    lastrundate = models.DateTimeField(db_column='LastRunDate', verbose_name='Last Run', sf_read_only=models.READ_ONLY, blank=True, null=True)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    format = models.CharField(db_column='Format', max_length=40, verbose_name='Format', sf_read_only=models.READ_ONLY, choices=[('MultiBlock', 'Joined'), ('Matrix', 'Matrix'), ('Summary', 'Summary'), ('Tabular', 'Tabular')])
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Report'
        verbose_name = 'Report'
        verbose_name_plural = 'Reports'
        # keyPrefix = '00O'

class Reportfeed(models.Model):
    parent = models.ForeignKey(Report, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey('Selfserviceuser', related_name='reportfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey('Selfserviceuser', related_name='reportfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'ReportFeed'
        verbose_name = 'Report Feed'
        verbose_name_plural = 'Report Feed'
        # keyPrefix = 'None'

class SfssdupecatcherApplicationPropertiesC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='sfssdupecatcherapplicationpropertiesc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='sfssdupecatcherapplicationpropertiesc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    sfssdupecatcher_create_immediate_reminder_for_tasks_c = models.BooleanField(db_column='SFSSDupeCatcher__Create_Immediate_Reminder_For_Tasks__c', verbose_name='Create Immediate Reminder For Tasks')
    sfssdupecatcher_web_lead_sources_c = models.TextField(db_column='SFSSDupeCatcher__Web_Lead_Sources__c', verbose_name='Web Lead Sources', help_text='A list of Web based Lead Sources to that should generate Alerts instead of being blocked.  One Lead source on each line.', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__Application_Properties__c'
        verbose_name = 'Application Settings'
        verbose_name_plural = 'Application Settings'
        # keyPrefix = 'a0M'

class SfssdupecatcherApplicationSettingsHistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('SfssdupecatcherApplicationSettingsC', sf_read_only=models.READ_ONLY, db_column='ParentId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('Name', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('SFSSDupeCatcher__Admin_Email__c', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__Application_Settings__History'
        verbose_name = 'History: Obsolete - DupeCatcher Setting'
        verbose_name_plural = 'History: Obsolete - DupeCatcher Setting'
        # keyPrefix = 'None'

class SfssdupecatcherApplicationSettingsC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Application Settings Name', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='sfssdupecatcherapplicationsettingsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='sfssdupecatcherapplicationsettingsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sfssdupecatcher_admin_email_c = models.EmailField(db_column='SFSSDupeCatcher__Admin_Email__c', verbose_name='Admin Email', help_text='Enter the email address of the person or organization that you would like DupeCatcher to send emails to whenever it encounters an internal error or exception.', blank=True, null=True)
    sfssdupecatcher_customer_subdomain_url_c = models.CharField(db_column='SFSSDupeCatcher__Customer_Subdomain_URL__c', max_length=1300, verbose_name='Customer Subdomain URL', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__Application_Settings__c'
        verbose_name = 'Obsolete - DupeCatcher Setting'
        verbose_name_plural = 'Obsolete - DupeCatcher Settings'
        # keyPrefix = 'a0N'

class SfssdupecatcherDcinC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Custom Object Label Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='sfssdupecatcherdcinc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='sfssdupecatcherdcinc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    sfssdupecatcher_p1_c = models.TextField(db_column='SFSSDupeCatcher__P1__c', verbose_name='P1', blank=True)
    sfssdupecatcher_p2_c = models.TextField(db_column='SFSSDupeCatcher__P2__c', verbose_name='P2', blank=True)
    sfssdupecatcher_p3_c = models.TextField(db_column='SFSSDupeCatcher__P3__c', verbose_name='P3', blank=True)
    sfssdupecatcher_p4_c = models.TextField(db_column='SFSSDupeCatcher__P4__c', verbose_name='P4', blank=True)
    sfssdupecatcher_p5_c = models.TextField(db_column='SFSSDupeCatcher__P5__c', verbose_name='P5', blank=True)
    sfssdupecatcher_r1_c = models.TextField(db_column='SFSSDupeCatcher__R1__c', verbose_name='R1', blank=True)
    sfssdupecatcher_t1_c = models.CharField(db_column='SFSSDupeCatcher__T1__c', max_length=255, verbose_name='T1', blank=True)
    sfssdupecatcher_stat_c = models.DecimalField(db_column='SFSSDupeCatcher__stat__c', max_digits=18, decimal_places=0, verbose_name='stat', blank=True, null=True)
    sfssdupecatcher_wsm_c = models.DecimalField(db_column='SFSSDupeCatcher__wsm__c', max_digits=2, decimal_places=0, verbose_name='wsm')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__DcIn__c'
        verbose_name = 'DcIn'
        verbose_name_plural = 'DcIns'
        # keyPrefix = 'a0P'

class SfssdupecatcherDuplicateWarningC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Alert Number', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='sfssdupecatcherduplicatewarningc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='sfssdupecatcherduplicatewarningc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sfssdupecatcher_scenario_c = models.ForeignKey('SfssdupecatcherScenarioC', sf_read_only=models.NOT_UPDATEABLE, db_column='SFSSDupeCatcher__Scenario__c')
    sfssdupecatcher_scenario_type_c = models.CharField(db_column='SFSSDupeCatcher__Scenario_Type__c', max_length=255, verbose_name='Filter Type', help_text='The type of record matching that triggered the duplicate alert.  This value always matches the filter type of the parent filter.', choices=[('Lead', 'Lead'), ('Contact', 'Contact'), ('Account', 'Account'), ('Lead to Contact', 'Lead to Contact'), ('Lead to Account', 'Lead to Account')], blank=True)
    sfssdupecatcher_triggering_action_c = models.CharField(db_column='SFSSDupeCatcher__Triggering_Action__c', max_length=60, verbose_name='Triggering Action', help_text='Shows whether this warning was triggered on an insert or an update.')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__Duplicate_Warning__c'
        verbose_name = 'DupeCatcher Duplicate Alert'
        verbose_name_plural = 'DupeCatcher Duplicate Alerts'
        # keyPrefix = 'a0Q'

class SfssdupecatcherOverrideCacheC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Override Cache Number', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='sfssdupecatcheroverridecachec_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='sfssdupecatcheroverridecachec_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    sfssdupecatcher_session_id_c = models.TextField(db_column='SFSSDupeCatcher__Session_Id__c', verbose_name='Session Id')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__Override_Cache__c'
        verbose_name = 'Override Cache'
        verbose_name_plural = 'Override Cache'
        # keyPrefix = 'a0R'

class SfssdupecatcherPotentialDuplicateC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Duplicate Number', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='sfssdupecatcherpotentialduplicatec_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='sfssdupecatcherpotentialduplicatec_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sfssdupecatcher_scenario_c = models.ForeignKey('SfssdupecatcherScenarioC', sf_read_only=models.NOT_UPDATEABLE, db_column='SFSSDupeCatcher__Scenario__c')
    sfssdupecatcher_duplicate_warning_c = models.ForeignKey(SfssdupecatcherDuplicateWarningC, sf_read_only=models.NOT_UPDATEABLE, db_column='SFSSDupeCatcher__Duplicate_Warning__c')
    sfssdupecatcher_account_c = models.ForeignKey(Account, db_column='SFSSDupeCatcher__Account__c', blank=True, null=True)
    sfssdupecatcher_contact_display_c = models.CharField(db_column='SFSSDupeCatcher__Contact_Display__c', max_length=1300, verbose_name='Contact Record', sf_read_only=models.READ_ONLY, help_text='A link to the Contact record associated with this potential duplicate record.', blank=True)
    sfssdupecatcher_contact_c = models.ForeignKey(Contact, db_column='SFSSDupeCatcher__Contact__c', blank=True, null=True)
    sfssdupecatcher_criteria_c = models.CharField(db_column='SFSSDupeCatcher__Criteria__c', max_length=255, verbose_name='Criteria')
    sfssdupecatcher_email_c = models.CharField(db_column='SFSSDupeCatcher__Email__c', max_length=1300, verbose_name='Email', sf_read_only=models.READ_ONLY, help_text='The email address of the duplicate lead/contact/account.', blank=True)
    sfssdupecatcher_lead_display_c = models.CharField(db_column='SFSSDupeCatcher__Lead_Display__c', max_length=1300, verbose_name='Lead Record', sf_read_only=models.READ_ONLY, help_text='The Lead record associated with this potential duplicate record.', blank=True)
    sfssdupecatcher_lead_c = models.ForeignKey(Lead, db_column='SFSSDupeCatcher__Lead__c', blank=True, null=True)
    sfssdupecatcher_object_type_c = models.CharField(db_column='SFSSDupeCatcher__Object_Type__c', max_length=1300, verbose_name='Duplicate Type', sf_read_only=models.READ_ONLY, help_text='Indicator as to whether the duplicate is a lead, contact or account.', blank=True)
    sfssdupecatcher_phone_c = models.CharField(db_column='SFSSDupeCatcher__Phone__c', max_length=1300, verbose_name='Phone', sf_read_only=models.READ_ONLY, help_text='The phone number of the duplicate lead/contact/account.', blank=True)
    sfssdupecatcher_scenario_type_c = models.CharField(db_column='SFSSDupeCatcher__Scenario_Type__c', max_length=255, verbose_name='Filter Type', help_text='The type of records triggered the potential duplicate (e.g. Lead, Account, Lead to Contact, etc.) .   \n\nThis value always matches the Filter Type of the parent filter.', choices=[('Lead', 'Lead')], blank=True)
    sfssdupecatcher_warning_display_c = models.CharField(db_column='SFSSDupeCatcher__Warning_Display__c', max_length=1300, verbose_name='Duplicate Record', sf_read_only=models.READ_ONLY, help_text='A link to the duplicate contact/account/lead record associated with this potential duplicate record.', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__Potential_Duplicate__c'
        verbose_name = 'DupeCatcher Potential Duplicate'
        verbose_name_plural = 'DupeCatcher Potential Duplicates'
        # keyPrefix = 'a0S'

class SfssdupecatcherRequiredfieldsupportC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='DupeCatcher Required Field Support Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='sfssdupecatcherrequiredfieldsupportc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='sfssdupecatcherrequiredfieldsupportc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    sfssdupecatcher_reminder_date_c = models.DateField(db_column='SFSSDupeCatcher__Reminder_Date__c', verbose_name='Reminder Date')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__RequiredFieldSupport__c'
        verbose_name = 'DupeCatcher Required Field Support'
        verbose_name_plural = 'DupeCatcher Required Field Support'
        # keyPrefix = 'a0T'

class SfssdupecatcherScenarioRuleC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Rule Number', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='sfssdupecatcherscenariorulec_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='sfssdupecatcherscenariorulec_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    sfssdupecatcher_scenario_c = models.ForeignKey('SfssdupecatcherScenarioC', sf_read_only=models.NOT_UPDATEABLE, db_column='SFSSDupeCatcher__Scenario__c')
    sfssdupecatcher_first_n_letters_c = models.DecimalField(db_column='SFSSDupeCatcher__First_N_Letters__c', max_digits=5, decimal_places=0, verbose_name='First N Letters', help_text='The number of initial letters you would like to match in the chosen field(s).', blank=True, null=True)
    sfssdupecatcher_fuzzy_match_c = models.BooleanField(db_column='SFSSDupeCatcher__Fuzzy_Match__c', verbose_name='Fuzzy Match')
    sfssdupecatcher_mapping_approach_c = models.CharField(db_column='SFSSDupeCatcher__Mapping_Approach__c', max_length=255, verbose_name='Matching Technique', help_text='Indicates the type of matching that will be used on the chosen field(s).', choices=[('Exact', 'Exact'), ('Domain', 'Domain'), ('First N Letters', 'First N Letters'), ('Numeric Only', 'Numeric Only'), ('Relaxed NA Phone', 'Relaxed NA Phone'), ('First 5 Zip', 'First 5 Zip'), ('First Name', 'First Name'), ('Clean Name', 'Clean Name'), ('Country Match', 'Country Match'), ('Street Address Match', 'Street Address Match')], blank=True)
    sfssdupecatcher_match_blanks_c = models.BooleanField(db_column='SFSSDupeCatcher__Match_Blanks__c', verbose_name='Match Blanks', help_text='If checked, DupeCatcher will match fields left blank.')
    sfssdupecatcher_match_field_c = models.CharField(db_column='SFSSDupeCatcher__Match_field__c', max_length=255, verbose_name='Source Field', help_text='The field used by the rule to identify duplicates.', choices=[('Mobile Phone', 'Mobile Phone'), ('First Name', 'First Name'), ('Last Name', 'Last Name'), ('Email', 'Email'), ('Company', 'Company'), ('Account Name', 'Account Name'), ('Account ID', 'Account ID'), ('Account Number', 'Account Number'), ('Site', 'Site'), ('Billing Street', 'Billing Street'), ('Billing City', 'Billing City'), ('Billing State', 'Billing State'), ('Billing Postal Code', 'Billing Postal Code'), ('Billing Country', 'Billing Country'), ('Shipping Street', 'Shipping Street'), ('Shipping City', 'Shipping City'), ('Shipping State', 'Shipping State'), ('Shipping Postal', 'Shipping Postal'), ('Shipping Country', 'Shipping Country'), ('Street', 'Street'), ('City', 'City'), ('State', 'State'), ('Postal Code', 'Postal Code'), ('Country', 'Country'), ('Mailing Street', 'Mailing Street'), ('Mailing City', 'Mailing City'), ('Mailing State', 'Mailing State'), ('Mailing Postal', 'Mailing Postal'), ('Mailing Country', 'Mailing Country'), ('Other Street', 'Other Street'), ('Other City', 'Other City'), ('Other State', 'Other State'), ('Other Postal Code', 'Other Postal Code'), ('Other Country', 'Other Country'), ('Phone', 'Phone'), ('Home Phone', 'Home Phone'), ('Other Phone', 'Other Phone'), ('Fax', 'Fax'), ('Ticker Symbol', 'Ticker Symbol'), ('Owner ID', 'Owner ID'), ('Record Type', 'Record Type'), ('Website', 'Website')], blank=True)
    sfssdupecatcher_scenario_formula_c = models.CharField(db_column='SFSSDupeCatcher__Scenario_Formula__c', max_length=1300, verbose_name='Filter', sf_read_only=models.READ_ONLY, blank=True)
    sfssdupecatcher_scenario_type_formula_c = models.CharField(db_column='SFSSDupeCatcher__Scenario_Type_Formula__c', max_length=1300, verbose_name='Filter Type - From Filter', sf_read_only=models.READ_ONLY, blank=True)
    sfssdupecatcher_scenario_type_c = models.CharField(db_column='SFSSDupeCatcher__Scenario_Type__c', max_length=255, verbose_name='Filter Type', help_text='Read only field that shows the Filter Type of the parent filter for this rule.', choices=[('Lead to Contact', 'Lead to Contact'), ('Lead to Account', 'Lead to Account'), ('Lead', 'Lead'), ('Contact', 'Contact'), ('Account', 'Account')], blank=True)
    sfssdupecatcher_target_match_field_c = models.CharField(db_column='SFSSDupeCatcher__Target_Match_Field__c', max_length=255, verbose_name='Target Field', help_text='The field used by the rule to identify duplicates for Lead to Account or Lead to Contact scenarios.', choices=[('First Name', 'First Name'), ('Last Name', 'Last Name'), ('Email', 'Email'), ('Company', 'Company'), ('Account Name', 'Account Name'), ('Account ID', 'Account ID'), ('Account Number', 'Account Number'), ('Site', 'Site'), ('Billing Street', 'Billing Street'), ('Billing City', 'Billing City'), ('Billing State', 'Billing State'), ('Billing Postal Code', 'Billing Postal Code'), ('Billing Country', 'Billing Country'), ('Shipping Street', 'Shipping Street'), ('Shipping City', 'Shipping City'), ('Shipping State', 'Shipping State'), ('Shipping Postal', 'Shipping Postal'), ('Shipping Country', 'Shipping Country'), ('Street', 'Street'), ('City', 'City'), ('State', 'State'), ('Postal Code', 'Postal Code'), ('Country', 'Country'), ('Mailing Street', 'Mailing Street'), ('Mailing City', 'Mailing City'), ('Mailing State', 'Mailing State'), ('Mailing Postal', 'Mailing Postal'), ('Mailing Country', 'Mailing Country'), ('Other Street', 'Other Street'), ('Other City', 'Other City'), ('Other State', 'Other State'), ('Other Postal Code', 'Other Postal Code'), ('Other Country', 'Other Country'), ('Phone', 'Phone'), ('Mobile Phone', 'Mobile Phone'), ('Home Phone', 'Home Phone'), ('Other Phone', 'Other Phone'), ('Fax', 'Fax'), ('Ticker Symbol', 'Ticker Symbol'), ('Owner ID', 'Owner ID'), ('Record Type', 'Record Type'), ('Website', 'Website')], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__Scenario_Rule__c'
        verbose_name = 'DupeCatcher Filter Rule'
        verbose_name_plural = 'DupeCatcher Filter Rules'
        # keyPrefix = 'a0U'

class SfssdupecatcherScenarioHistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('SfssdupecatcherScenarioC', sf_read_only=models.READ_ONLY, db_column='ParentId')
    createdby = models.ForeignKey('Selfserviceuser', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('Name', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('SFSSDupeCatcher__Blocked_Duplicates__c', None), ('SFSSDupeCatcher__Bypass_Security__c', None), ('SFSSDupeCatcher__Converted_Duplicates__c', None), ('SFSSDupeCatcher__Create_Tasks_for_Warnings__c', None), ('SFSSDupeCatcher__Deployed__c', None), ('SFSSDupeCatcher__Error_Message__c', None), ('SFSSDupeCatcher__Match_On_Insert_Action__c', None), ('SFSSDupeCatcher__Match_On_Update_Action__c', None), ('SFSSDupeCatcher__Merged_Duplicates__c', None), ('SFSSDupeCatcher__Person_Account_Filter__c', None), ('SFSSDupeCatcher__Scenario_Type__c', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__Scenario__History'
        verbose_name = 'History: DupeCatcher Filter'
        verbose_name_plural = 'History: DupeCatcher Filter'
        # keyPrefix = 'None'

class SfssdupecatcherScenarioC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Filter Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='sfssdupecatcherscenarioc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='sfssdupecatcherscenarioc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    sfssdupecatcher_blocked_duplicates_c = models.DecimalField(db_column='SFSSDupeCatcher__Blocked_Duplicates__c', max_digits=18, decimal_places=0, verbose_name='Blocked Duplicates', help_text='The number of of duplicates that have been blocked by this filter through a "Do Not Insert", "Display Matching Records" or "Do not Update" action.', blank=True, null=True)
    sfssdupecatcher_bypass_security_c = models.BooleanField(db_column='SFSSDupeCatcher__Bypass_Security__c', verbose_name='Bypass Security', help_text='If checked, DupeCatcher checks all records, not just those the user has permissions to view.')
    sfssdupecatcher_converted_duplicates_c = models.DecimalField(db_column='SFSSDupeCatcher__Converted_Duplicates__c', max_digits=18, decimal_places=0, verbose_name='Converted Duplicates', help_text='The number of Duplicates that have been converted to a contact or account by this filter', blank=True, null=True)
    sfssdupecatcher_create_tasks_for_warnings_c = models.CharField(db_column='SFSSDupeCatcher__Create_Tasks_for_Warnings__c', max_length=255, verbose_name='Create Tasks for Alerts', help_text='Indicates whether a task is to be created and who it will be assigned to.', choices=[('No', 'No'), ('Yes - User', 'Yes - User'), ('Yes - Filter Owner', 'Yes - Filter Owner')], blank=True)
    sfssdupecatcher_deployed_c = models.BooleanField(db_column='SFSSDupeCatcher__Deployed__c', verbose_name='Active', help_text='Indicates if a DupeCatcher filter is active.')
    sfssdupecatcher_error_message_c = models.TextField(db_column='SFSSDupeCatcher__Error_Message__c', verbose_name='Error Message', help_text='The user-defined error message to display when a duplicate is identified.', blank=True)
    sfssdupecatcher_match_on_insert_action_c = models.CharField(db_column='SFSSDupeCatcher__Match_On_Insert_Action__c', max_length=255, verbose_name='Match on Insert Action', help_text='The action DupeCatcher takes on identifying a potential duplicate when a new record is inserted.', choices=[('Do Not Insert', 'Do Not Insert'), ('Display Matching Records', 'Display Matching Records'), ('Do Nothing', 'Do Nothing'), ('Report Duplicate', 'Report Duplicate')], blank=True)
    sfssdupecatcher_match_on_update_action_c = models.CharField(db_column='SFSSDupeCatcher__Match_On_Update_Action__c', max_length=255, verbose_name='Match On Update Action', help_text='The action DupeCatcher takes on identifying a potential duplicate when a new record is updated.', choices=[('Do Not Update', 'Do Not Update'), ('Report Duplicate', 'Report Duplicate'), ('Do Nothing', 'Do Nothing')], blank=True)
    sfssdupecatcher_merged_duplicates_c = models.DecimalField(db_column='SFSSDupeCatcher__Merged_Duplicates__c', max_digits=18, decimal_places=0, verbose_name='Merged Duplicates', help_text='The number of duplicates that have been merged using DupeCatcher', blank=True, null=True)
    sfssdupecatcher_person_account_filter_c = models.BooleanField(db_column='SFSSDupeCatcher__Person_Account_Filter__c', verbose_name='Person Account Filter', help_text='Filter is for Person Account matching.')
    sfssdupecatcher_scenario_type_c = models.CharField(db_column='SFSSDupeCatcher__Scenario_Type__c', max_length=255, verbose_name='FilterType', help_text='The record types to compare.', choices=[('Lead', 'Lead'), ('Lead to Contact', 'Lead to Contact'), ('Lead to Account', 'Lead to Account'), ('Contact', 'Contact'), ('Account', 'Account')], blank=True)
    sfssdupecatcher_duplicate_warning_count_c = models.DecimalField(db_column='SFSSDupeCatcher__Duplicate_Warning_Count__c', max_digits=18, decimal_places=0, verbose_name='Duplicate Alert Count', sf_read_only=models.READ_ONLY, help_text='The number of alerts generated by the filter.', blank=True, null=True)
    sfssdupecatcher_potential_duplicate_count_c = models.DecimalField(db_column='SFSSDupeCatcher__Potential_Duplicate_Count__c', max_digits=18, decimal_places=0, verbose_name='Potential Duplicate Count', sf_read_only=models.READ_ONLY, help_text='The number of potential duplicates that have been identified by this filter.', blank=True, null=True)
    sfssdupecatcher_scenario_rule_count_c = models.DecimalField(db_column='SFSSDupeCatcher__Scenario_Rule_Count__c', max_digits=18, decimal_places=0, verbose_name='Filter Rule Count', sf_read_only=models.READ_ONLY, help_text='The number of rules that are part of a the filter.', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__Scenario__c'
        verbose_name = 'DupeCatcher Filter'
        verbose_name_plural = 'DupeCatcher Filters'
        # keyPrefix = 'a0V'

class SfssdupecatcherWebToLeadSourcesC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='sfssdupecatcherwebtoleadsourcesc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='sfssdupecatcherwebtoleadsourcesc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SFSSDupeCatcher__Web_To_Lead_Sources__c'
        verbose_name = 'Web To Lead Sources - Obsolete'
        verbose_name_plural = 'Web To Lead Sources - Obsolete'
        # keyPrefix = 'a0W'

class Scontrol(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Label', sf_read_only=models.NOT_CREATEABLE)
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='S-Control Name', sf_read_only=models.NOT_CREATEABLE)
    description = models.CharField(db_column='Description', max_length=255, verbose_name='Description', sf_read_only=models.NOT_CREATEABLE, blank=True)
    encodingkey = models.CharField(db_column='EncodingKey', max_length=40, verbose_name='Encoding', sf_read_only=models.NOT_CREATEABLE, choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    htmlwrapper = models.TextField(db_column='HtmlWrapper', verbose_name='HTML Body', sf_read_only=models.NOT_CREATEABLE)
    filename = models.CharField(db_column='Filename', max_length=255, verbose_name='Filename', sf_read_only=models.NOT_CREATEABLE, blank=True)
    bodylength = models.IntegerField(db_column='BodyLength', verbose_name='Binary Length', sf_read_only=models.READ_ONLY)
    binary = models.TextField(db_column='Binary', verbose_name='Binary', sf_read_only=models.NOT_CREATEABLE, blank=True)
    contentsource = models.CharField(db_column='ContentSource', max_length=40, verbose_name='Type', sf_read_only=models.NOT_CREATEABLE, choices=[('HTML', 'HTML'), ('URL', 'URL'), ('Snippet', 'Snippet')], blank=True)
    supportscaching = models.BooleanField(db_column='SupportsCaching', verbose_name='Prebuild In Page', sf_read_only=models.NOT_CREATEABLE)
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='scontrol_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='scontrol_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Scontrol'
        verbose_name = 'Custom S-Control'
        verbose_name_plural = 'Custom S-Controls'
        # keyPrefix = '01N'

class Selfserviceuser(models.Model):
    lastname = models.CharField(db_column='LastName', max_length=80, verbose_name='Last Name')
    firstname = models.CharField(db_column='FirstName', max_length=40, verbose_name='First Name', blank=True)
    name = models.CharField(db_column='Name', max_length=121, verbose_name='Name', sf_read_only=models.READ_ONLY)
    username = models.CharField(db_column='Username', max_length=80, verbose_name='Username')
    email = models.EmailField(db_column='Email', verbose_name='Email')
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active')
    timezonesidkey = models.CharField(db_column='TimeZoneSidKey', max_length=40, verbose_name='TimeZoneSidKey', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Magadan Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Norfolk', '(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Yekaterinburg', '(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Baku', '(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Europe/Moscow', '(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Time (America/Santiago)'), ('America/Caracas', '(GMT-04:30) Venezuela Time (America/Caracas)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    localesidkey = models.CharField(db_column='LocaleSidKey', max_length=40, verbose_name='LocaleSidKey', choices=[('sq', 'Albanian'), ('sq_AL', 'Albanian (Albania)'), ('ar', 'Arabic'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('hy', 'Armenian'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('eu', 'Basque'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bn_BD', 'Bengali (Bangladesh)'), ('bs', 'Bosnian'), ('bs_BA', 'Bosnian (Bosnia and Herzegovina)'), ('bg', 'Bulgarian'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('ca', 'Catalan'), ('ca_ES_EURO', 'Catalan (Spain,Euro)'), ('ca_ES', 'Catalan (Spain)'), ('zh', 'Chinese'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macau SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr', 'Croatian'), ('hr_HR', 'Croatian (Croatia)'), ('cs', 'Czech'), ('cs_CZ', 'Czech (Czech Republic)'), ('da', 'Danish'), ('da_DK', 'Danish (Denmark)'), ('nl', 'Dutch'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('en_AU', 'English (Australia)'), ('en_BB', 'English (Barbados)'), ('en_BM', 'English (Bermuda)'), ('en_CA', 'English (Canada)'), ('en_GH', 'English (Ghana)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE_EURO', 'English (Ireland,Euro)'), ('en_IE', 'English (Ireland)'), ('en_MY', 'English (Malaysia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PH', 'English (Philippines)'), ('en_SG', 'English (Singapore)'), ('en_ZA', 'English (South Africa)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('et', 'Estonian'), ('et_EE', 'Estonian (Estonia)'), ('fi', 'Finnish'), ('fi_FI_EURO', 'Finnish (Finland,Euro)'), ('fi_FI', 'Finnish (Finland)'), ('fr', 'French'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_FR_EURO', 'French (France,Euro)'), ('fr_FR', 'French (France)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('ka', 'Georgian'), ('ka_GE', 'Georgian (Georgia)'), ('de', 'German'), ('de_AT_EURO', 'German (Austria,Euro)'), ('de_AT', 'German (Austria)'), ('de_DE_EURO', 'German (Germany,Euro)'), ('de_DE', 'German (Germany)'), ('de_LU_EURO', 'German (Luxembourg,Euro)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el', 'Greek'), ('el_GR', 'Greek (Greece)'), ('iw', 'Hebrew'), ('iw_IL', 'Hebrew (Israel)'), ('hi', 'Hindi'), ('hi_IN', 'Hindi (India)'), ('hu', 'Hungarian'), ('hu_HU', 'Hungarian (Hungary)'), ('is', 'Icelandic'), ('is_IS', 'Icelandic (Iceland)'), ('in', 'Indonesian'), ('in_ID', 'Indonesian (Indonesia)'), ('ga', 'Irish'), ('ga_IE', 'Irish (Ireland)'), ('it', 'Italian'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja', 'Japanese'), ('ja_JP', 'Japanese (Japan)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ky_KG', 'Kirghiz (Kyrgyzstan)'), ('ko', 'Korean'), ('ko_KR', 'Korean (South Korea)'), ('lv', 'Latvian'), ('lv_LV', 'Latvian (Latvia)'), ('lt', 'Lithuanian'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lb', 'Luxembourgish'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk', 'Macedonian'), ('mk_MK', 'Macedonian (Macedonia)'), ('ms', 'Malay'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('mt', 'Maltese'), ('mt_MT', 'Maltese (Malta)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('no', 'Norwegian'), ('no_NO', 'Norwegian (Norway)'), ('pl', 'Polish'), ('pl_PL', 'Polish (Poland)'), ('pt', 'Portuguese'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_PT', 'Portuguese (Portugal)'), ('ro', 'Romanian'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm', 'Romansh'), ('rm_CH', 'Romansh (Switzerland)'), ('ru', 'Russian'), ('ru_RU', 'Russian (Russia)'), ('sr', 'Serbian'), ('sr_BA', 'Serbian (Bosnia and Herzegovina)'), ('sh', 'Serbian (Latin)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_CS', 'Serbian (Serbia and Montenegro)'), ('sk', 'Slovak'), ('sk_SK', 'Slovak (Slovakia)'), ('sl', 'Slovenian'), ('sl_SI', 'Slovenian (Slovenia)'), ('es', 'Spanish'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES_EURO', 'Spanish (Spain,Euro)'), ('es_ES', 'Spanish (Spain)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sv', 'Swedish'), ('sv_SE', 'Swedish (Sweden)'), ('tl', 'Tagalog'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('th', 'Thai'), ('th_TH', 'Thai (Thailand)'), ('tr', 'Turkish'), ('tr_TR', 'Turkish (Turkey)'), ('uk', 'Ukrainian'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur', 'Urdu'), ('ur_PK', 'Urdu (Pakistan)'), ('vi', 'Vietnamese'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy', 'Welsh'), ('cy_GB', 'Welsh (United Kingdom)')])
    contactid = models.ForeignKey(Contact, sf_read_only=models.NOT_UPDATEABLE, db_column='ContactId')
    languagelocalekey = models.CharField(db_column='LanguageLocaleKey', max_length=40, verbose_name='LanguageLocaleKey', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazilian)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian')])
    superuser = models.BooleanField(db_column='SuperUser', verbose_name='Super User', sf_read_only=models.READ_ONLY)
    lastlogindate = models.DateTimeField(db_column='LastLoginDate', verbose_name='Last Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='selfserviceuser_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='selfserviceuser_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SelfServiceUser'
        verbose_name = 'CSS User'
        verbose_name_plural = 'CSS Users'
        # keyPrefix = '035'

class Setupentityaccess(models.Model):
    parent = models.ForeignKey(Permissionset, sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    setupentityid = models.ForeignKey(Apexclass, sf_read_only=models.NOT_UPDATEABLE, db_column='SetupEntityId')
    setupentitytype = models.CharField(db_column='SetupEntityType', max_length=40, verbose_name='Setup Entity Type', sf_read_only=models.READ_ONLY, choices=[('ApexClass', None), ('ApexPage', None), ('ConnectedApplication', None), ('ServiceProvider', None), ('TabSet', None)], blank=True)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SetupEntityAccess'
        verbose_name = 'Setup Entity Access'
        verbose_name_plural = 'Setup Entity Access'
        # keyPrefix = '0J0'

class Site(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Site Name', sf_read_only=models.READ_ONLY)
    subdomain = models.CharField(db_column='Subdomain', max_length=80, verbose_name='Site Subdomain Prefix', sf_read_only=models.READ_ONLY, blank=True)
    urlpathprefix = models.CharField(db_column='UrlPathPrefix', max_length=40, verbose_name='Default Web Address', sf_read_only=models.READ_ONLY, blank=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Site Status', sf_read_only=models.READ_ONLY, choices=[('Active', 'Active'), ('Inactive', 'In Maintenance')])
    admin = models.ForeignKey('User', related_name='site_admin_set', db_column='AdminId', sf_read_only=models.READ_ONLY)
    optionsenablefeeds = models.BooleanField(db_column='OptionsEnableFeeds', verbose_name='Enable Feeds', sf_read_only=models.READ_ONLY)
    optionsallowhomepage = models.BooleanField(db_column='OptionsAllowHomePage', verbose_name='Enable Standard Home Page', sf_read_only=models.READ_ONLY)
    optionsallowstandardideaspages = models.BooleanField(db_column='OptionsAllowStandardIdeasPages', verbose_name='Enable Standard Ideas Pages', sf_read_only=models.READ_ONLY)
    optionsallowstandardsearch = models.BooleanField(db_column='OptionsAllowStandardSearch', verbose_name='Enable Standard Lookup Pages', sf_read_only=models.READ_ONLY)
    optionsallowstandardlookups = models.BooleanField(db_column='OptionsAllowStandardLookups', verbose_name='Enable Standard Search Pages', sf_read_only=models.READ_ONLY)
    optionsallowstandardanswerspages = models.BooleanField(db_column='OptionsAllowStandardAnswersPages', verbose_name='Enable Standard Answers Pages', sf_read_only=models.READ_ONLY)
    description = models.TextField(db_column='Description', verbose_name='Site Description', sf_read_only=models.READ_ONLY, blank=True)
    masterlabel = models.CharField(db_column='MasterLabel', max_length=255, verbose_name='Site Label', sf_read_only=models.READ_ONLY)
    analyticstrackingcode = models.CharField(db_column='AnalyticsTrackingCode', max_length=40, verbose_name='Analytics Tracking Code', sf_read_only=models.READ_ONLY, blank=True)
    sitetype = models.CharField(db_column='SiteType', max_length=40, verbose_name='Site Type', sf_read_only=models.READ_ONLY, choices=[('Siteforce', 'Site.com'), ('Visualforce', 'Force.com'), ('User', 'User')])
    dailybandwidthlimit = models.IntegerField(db_column='DailyBandwidthLimit', verbose_name='Daily Bandwidth Limit (MB)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dailybandwidthused = models.IntegerField(db_column='DailyBandwidthUsed', verbose_name='Daily Bandwidth Used', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dailyrequesttimelimit = models.IntegerField(db_column='DailyRequestTimeLimit', verbose_name='Daily Request Time Limit (min)', sf_read_only=models.READ_ONLY, blank=True, null=True)
    dailyrequesttimeused = models.IntegerField(db_column='DailyRequestTimeUsed', verbose_name='Daily Request Time Used', sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthlypageviewsentitlement = models.IntegerField(db_column='MonthlyPageViewsEntitlement', verbose_name='Monthly Page Views Allowed', sf_read_only=models.READ_ONLY, blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='site_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='site_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Site'
        verbose_name = 'Site'
        verbose_name_plural = 'Sites'
        # keyPrefix = '0DM'

class Sitefeed(models.Model):
    parent = models.ForeignKey(Site, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey(Selfserviceuser, related_name='sitefeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey(Selfserviceuser, related_name='sitefeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SiteFeed'
        verbose_name = 'Site'
        verbose_name_plural = 'Site'
        # keyPrefix = 'None'

class Sitehistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    site = models.ForeignKey(Site, sf_read_only=models.READ_ONLY, db_column='SiteId')
    createdby = models.ForeignKey(Selfserviceuser, sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('siteActive', 'Active'), ('Admin', None), ('AnalyticsTrackingCode', None), ('siteOverride401', 'Authorization Required Page (401)'), ('siteOverrideChangePassword', 'Change Password Page'), ('ClickjackProtectionLevel', None), ('created', 'Created.'), ('SiteDeleteDomain', 'Custom Web Address'), ('siteNewDomain', 'Custom Web Address'), ('DefaultDomain', None), ('siteSetPrimaryDomain', 'Default Site Domain'), ('Description', None), ('siteBTDisabled', 'Disable Site'), ('siteEnableFeeds', 'Enable Feeds'), ('siteAllowStandardAnswersPages', 'Enable Standard Answers Pages'), ('siteAllowHomePage', 'Enable Standard Home Page'), ('siteAllowStandardIdeasPages', 'Enable Standard Ideas Pages'), ('siteAllowStandardSearch', 'Enable Standard Lookup Pages'), ('siteAllowStandardLookups', 'Enable Standard Search Pages'), ('FavoriteIcon', None), ('feedEvent', 'Feed event'), ('siteOverride500', 'Generic Error Page'), ('GuestUser', None), ('Guid', None), ('siteOverrideInactive', 'Inactive Site Home Page'), ('IndexPage', None), ('Language', None), ('siteOverride509', 'Limit Exceeded Page (509)'), ('siteOverride503', 'Maintenance Page(500/503)'), ('MasterLabel', None), ('sitePageLimitExceeded', 'Monthly page view limit exceeded for org'), ('siteOverrideMyProfile', 'My Profile Page'), ('Name', None), ('NewPassTemplate', None), ('NewUserTemplate', None), ('Options', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('siteOverride404', 'Page Not Found Page (404)'), ('Portal', None), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('siteNewRedirect', 'redirection mappings. Created a new mapping'), ('siteDeleteRedirect', 'redirection mappings. Deleted the mapping'), ('siteChangeRedirect', 'redirection mappings. The new mapping value is'), ('siteRequireInsecurePortalAccess', 'Require Non-Secure Connections (HTTP)'), ('ServerIsDown', None), ('siteOverrideRobotsTxt', 'Site Robots.txt'), ('siteOverrideTemplate', 'Site Template'), ('SiteType', None), ('Status', None), ('Subdomain', None), ('TopLevelDomain', None), ('UrlPathPrefix', None), ('UrlRewriterClass', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SiteHistory'
        verbose_name = 'Site History'
        verbose_name_plural = 'Site History'
        # keyPrefix = 'None'

class Solution(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    solutionnumber = models.CharField(db_column='SolutionNumber', max_length=30, verbose_name='Solution Number', sf_read_only=models.READ_ONLY)
    solutionname = models.CharField(db_column='SolutionName', max_length=255, verbose_name='Title')
    ispublished = models.BooleanField(db_column='IsPublished', verbose_name='Public')
    ispublishedinpublickb = models.BooleanField(db_column='IsPublishedInPublicKb', verbose_name='Visible in Public Knowledge Base')
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('Draft', 'Draft'), ('Reviewed', 'Reviewed'), ('Duplicate', 'Duplicate')])
    isreviewed = models.BooleanField(db_column='IsReviewed', verbose_name='Reviewed', sf_read_only=models.READ_ONLY)
    solutionnote = models.TextField(db_column='SolutionNote', verbose_name='Description', blank=True)
    owner = models.ForeignKey('User', related_name='solution_owner_set', db_column='OwnerId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='solution_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='solution_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    timesused = models.IntegerField(db_column='TimesUsed', verbose_name='Num Related Cases', sf_read_only=models.READ_ONLY)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    ishtml = models.BooleanField(db_column='IsHtml', verbose_name='Is Html', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Solution'
        verbose_name = 'Solution'
        verbose_name_plural = 'Solutions'
        # keyPrefix = '501'

class Solutionfeed(models.Model):
    parent = models.ForeignKey(Solution, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey(Selfserviceuser, related_name='solutionfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey(Selfserviceuser, related_name='solutionfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SolutionFeed'
        verbose_name = 'Solution Feed'
        verbose_name_plural = 'Solution Feed'
        # keyPrefix = 'None'

class Solutionhistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    solution = models.ForeignKey(Solution, sf_read_only=models.READ_ONLY, db_column='SolutionId')
    createdby = models.ForeignKey(Selfserviceuser, sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('IsPublished', None), ('IsPublishedInPublicKb', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.'), ('SolutionName', None), ('SolutionNote', None), ('Status', None)])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SolutionHistory'
        verbose_name = 'Solution History'
        verbose_name_plural = 'Solution History'
        # keyPrefix = 'None'

class Solutionstatus(models.Model):
    masterlabel = models.CharField(db_column='MasterLabel', max_length=255, verbose_name='Master Label', sf_read_only=models.READ_ONLY, blank=True)
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isdefault = models.BooleanField(db_column='IsDefault', verbose_name='Is Default', sf_read_only=models.READ_ONLY)
    isreviewed = models.BooleanField(db_column='IsReviewed', verbose_name='Is Reviewed', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='solutionstatus_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='solutionstatus_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'SolutionStatus'
        verbose_name = 'Solution Status Value'
        verbose_name_plural = 'Solution Status Value'
        # keyPrefix = 'None'

class Staticresource(models.Model):
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    name = models.CharField(db_column='Name', max_length=255, verbose_name='Name')
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='MIME Type')
    bodylength = models.IntegerField(db_column='BodyLength', verbose_name='Size', sf_read_only=models.READ_ONLY)
    body = models.TextField(db_column='Body', verbose_name='Body', blank=True)
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='staticresource_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='staticresource_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    cachecontrol = models.CharField(db_column='CacheControl', max_length=40, verbose_name='Cache Control', choices=[('Private', 'Private'), ('Public', 'Public')])
    class Meta(models.SalesforceModel.Meta):
        db_table = 'StaticResource'
        verbose_name = 'Static Resource'
        verbose_name_plural = 'Static Resources'
        # keyPrefix = '081'

class Task(models.Model):
    who = models.ForeignKey(Contact, db_column='WhoId', blank=True, null=True)
    what = models.ForeignKey(Apxtconga4CongaEmailStagingC, db_column='WhatId', blank=True, null=True)
    subject = models.CharField(db_column='Subject', max_length=255, verbose_name='Subject', choices=[('Call', 'Call'), ('Email', 'Email'), ('Send Letter', 'Send Letter'), ('Send Quote', 'Send Quote'), ('Other', 'Other')], blank=True)
    activitydate = models.DateField(db_column='ActivityDate', verbose_name='Due Date Only', blank=True, null=True)
    status = models.CharField(db_column='Status', max_length=40, verbose_name='Status', choices=[('Not Started', 'Not Started'), ('In Progress', 'In Progress'), ('Completed', 'Completed'), ('Waiting on someone else', 'Waiting on someone else'), ('Deferred', 'Deferred')])
    priority = models.CharField(db_column='Priority', max_length=40, verbose_name='Priority', choices=[('High', 'High'), ('Normal', 'Normal'), ('Low', 'Low')])
    owner = models.ForeignKey('User', related_name='task_owner_set', db_column='OwnerId')
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    account = models.ForeignKey(Account, sf_read_only=models.READ_ONLY, db_column='AccountId', blank=True, null=True)
    isclosed = models.BooleanField(db_column='IsClosed', verbose_name='Closed', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='task_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='task_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isarchived = models.BooleanField(db_column='IsArchived', verbose_name='Archived', sf_read_only=models.READ_ONLY)
    calldurationinseconds = models.IntegerField(db_column='CallDurationInSeconds', verbose_name='Call Duration', blank=True, null=True)
    calltype = models.CharField(db_column='CallType', max_length=40, verbose_name='Call Type', choices=[('Internal', 'Internal'), ('Inbound', 'Inbound'), ('Outbound', 'Outbound')], blank=True)
    calldisposition = models.CharField(db_column='CallDisposition', max_length=255, verbose_name='Call Result', blank=True)
    callobject = models.CharField(db_column='CallObject', max_length=255, verbose_name='Call Object Identifier', blank=True)
    reminderdatetime = models.DateTimeField(db_column='ReminderDateTime', verbose_name='Reminder Date/Time', blank=True, null=True)
    isreminderset = models.BooleanField(db_column='IsReminderSet', verbose_name='Reminder Set')
    recurrenceactivityid = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='RecurrenceActivityId', blank=True, null=True)
    isrecurrence = models.BooleanField(db_column='IsRecurrence', verbose_name='Create Recurring Series of Tasks', sf_read_only=models.NOT_UPDATEABLE)
    recurrencestartdateonly = models.DateField(db_column='RecurrenceStartDateOnly', verbose_name='Start Date', blank=True, null=True)
    recurrenceenddateonly = models.DateField(db_column='RecurrenceEndDateOnly', verbose_name='End Date', blank=True, null=True)
    recurrencetimezonesidkey = models.CharField(db_column='RecurrenceTimeZoneSidKey', max_length=40, verbose_name='Recurrence Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Magadan Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Norfolk', '(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Yekaterinburg', '(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Baku', '(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Europe/Moscow', '(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Time (America/Santiago)'), ('America/Caracas', '(GMT-04:30) Venezuela Time (America/Caracas)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')], blank=True)
    recurrencetype = models.CharField(db_column='RecurrenceType', max_length=40, verbose_name='Recurrence Type', choices=[('RecursDaily', 'Recurs Daily'), ('RecursEveryWeekday', 'Recurs Every Weekday'), ('RecursMonthly', 'Recurs Monthly'), ('RecursMonthlyNth', 'Recurs Monthy Nth'), ('RecursWeekly', 'Recurs Weekly'), ('RecursYearly', 'Recurs Yearly'), ('RecursYearlyNth', 'Recurs Yearly Nth')], blank=True)
    recurrenceinterval = models.IntegerField(db_column='RecurrenceInterval', verbose_name='Recurrence Interval', blank=True, null=True)
    recurrencedayofweekmask = models.IntegerField(db_column='RecurrenceDayOfWeekMask', verbose_name='Recurrence Day of Week Mask', blank=True, null=True)
    recurrencedayofmonth = models.IntegerField(db_column='RecurrenceDayOfMonth', verbose_name='Recurrence Day of Month', blank=True, null=True)
    recurrenceinstance = models.CharField(db_column='RecurrenceInstance', max_length=40, verbose_name='Recurrence Instance', choices=[('First', '1st'), ('Second', '2nd'), ('Third', '3rd'), ('Fourth', '4th'), ('Last', 'last')], blank=True)
    recurrencemonthofyear = models.CharField(db_column='RecurrenceMonthOfYear', max_length=40, verbose_name='Recurrence Month of Year', choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('April', 'April'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Task'
        verbose_name = 'Task'
        verbose_name_plural = 'Tasks'
        # keyPrefix = '00T'

class Taskfeed(models.Model):
    parent = models.ForeignKey(Task, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey(Selfserviceuser, related_name='taskfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey(Selfserviceuser, related_name='taskfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'TaskFeed'
        verbose_name = 'Task Feed'
        verbose_name_plural = 'Task Feed'
        # keyPrefix = 'None'

class Taskpriority(models.Model):
    masterlabel = models.CharField(db_column='MasterLabel', max_length=255, verbose_name='Master Label', sf_read_only=models.READ_ONLY, blank=True)
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isdefault = models.BooleanField(db_column='IsDefault', verbose_name='Is Default', sf_read_only=models.READ_ONLY)
    ishighpriority = models.BooleanField(db_column='IsHighPriority', verbose_name='Is High Priority', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='taskpriority_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='taskpriority_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'TaskPriority'
        verbose_name = 'Task Priority Value'
        verbose_name_plural = 'Task Priority Value'
        # keyPrefix = 'None'

class Taskstatus(models.Model):
    masterlabel = models.CharField(db_column='MasterLabel', max_length=255, verbose_name='Master Label', sf_read_only=models.READ_ONLY, blank=True)
    sortorder = models.IntegerField(db_column='SortOrder', verbose_name='Sort Order', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isdefault = models.BooleanField(db_column='IsDefault', verbose_name='Is Default', sf_read_only=models.READ_ONLY)
    isclosed = models.BooleanField(db_column='IsClosed', verbose_name='Is Closed', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='taskstatus_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='taskstatus_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'TaskStatus'
        verbose_name = 'Task Status Value'
        verbose_name_plural = 'Task Status Value'
        # keyPrefix = 'None'

class Topic(models.Model):
    name = models.CharField(db_column='Name', max_length=99, verbose_name='Name')
    description = models.CharField(db_column='Description', max_length=1000, verbose_name='Description', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    talkingabout = models.IntegerField(db_column='TalkingAbout', verbose_name='Talking About', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Topic'
        verbose_name = 'Topic'
        verbose_name_plural = 'Topics'
        # keyPrefix = '0TO'

class Topicassignment(models.Model):
    topic = models.ForeignKey(Topic, sf_read_only=models.NOT_UPDATEABLE, db_column='TopicId')
    entity = models.ForeignKey(Apxtconga4CongaComposerSettingsC, sf_read_only=models.NOT_UPDATEABLE, db_column='EntityId')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', sf_read_only=models.READ_ONLY, db_column='CreatedById')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'TopicAssignment'
        verbose_name = 'Entity'
        verbose_name_plural = 'Topic Assignments'
        # keyPrefix = '0FT'

class Topicfeed(models.Model):
    parent = models.ForeignKey(Topic, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey(Selfserviceuser, related_name='topicfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey(Selfserviceuser, related_name='topicfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'TopicFeed'
        verbose_name = 'Topic Feed'
        verbose_name_plural = 'Topic Feed'
        # keyPrefix = 'None'

class Undecidedeventrelation(models.Model):
    relation = models.ForeignKey(Contact, sf_read_only=models.READ_ONLY, db_column='RelationId', blank=True, null=True)
    event = models.ForeignKey(Event, sf_read_only=models.READ_ONLY, db_column='EventId', blank=True, null=True)
    respondeddate = models.DateTimeField(db_column='RespondedDate', verbose_name='Response Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    response = models.CharField(db_column='Response', max_length=255, verbose_name='Response', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('User', related_name='undecidedeventrelation_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('User', related_name='undecidedeventrelation_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    type = models.CharField(db_column='Type', max_length=50, verbose_name='Type', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'UndecidedEventRelation'
        verbose_name = 'Undecided Event Relation'
        verbose_name_plural = 'Undecided Event Relations'
        # keyPrefix = 'None'

class User(models.Model):
    username = models.CharField(db_column='Username', max_length=80, verbose_name='Username')
    lastname = models.CharField(db_column='LastName', max_length=80, verbose_name='Last Name')
    firstname = models.CharField(db_column='FirstName', max_length=40, verbose_name='First Name', blank=True)
    name = models.CharField(db_column='Name', max_length=121, verbose_name='Full Name', sf_read_only=models.READ_ONLY)
    companyname = models.CharField(db_column='CompanyName', max_length=80, verbose_name='Company Name', blank=True)
    division = models.CharField(db_column='Division', max_length=80, verbose_name='Division', blank=True)
    department = models.CharField(db_column='Department', max_length=80, verbose_name='Department', blank=True)
    title = models.CharField(db_column='Title', max_length=80, verbose_name='Title', blank=True)
    street = models.TextField(db_column='Street', verbose_name='Street', blank=True)
    city = models.CharField(db_column='City', max_length=40, verbose_name='City', blank=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', blank=True)
    postalcode = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', blank=True)
    country = models.CharField(db_column='Country', max_length=80, verbose_name='Country', blank=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, verbose_name='Latitude', blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, verbose_name='Longitude', blank=True, null=True)
    email = models.EmailField(db_column='Email', verbose_name='E-mail')
    emailpreferencesautobcc = models.BooleanField(db_column='EmailPreferencesAutoBcc', verbose_name='AutoBcc')
    emailpreferencesautobccstayintouch = models.BooleanField(db_column='EmailPreferencesAutoBccStayInTouch', verbose_name='AutoBccStayInTouch')
    emailpreferencesstayintouchreminder = models.BooleanField(db_column='EmailPreferencesStayInTouchReminder', verbose_name='StayInTouchReminder')
    senderemail = models.EmailField(db_column='SenderEmail', verbose_name='Email Sender Address', blank=True, null=True)
    sendername = models.CharField(db_column='SenderName', max_length=80, verbose_name='Email Sender Name', blank=True)
    signature = models.CharField(db_column='Signature', max_length=1333, verbose_name='Email Signature', blank=True)
    stayintouchsubject = models.CharField(db_column='StayInTouchSubject', max_length=80, verbose_name='Stay-in-Touch Email Subject', blank=True)
    stayintouchsignature = models.CharField(db_column='StayInTouchSignature', max_length=512, verbose_name='Stay-in-Touch Email Signature', blank=True)
    stayintouchnote = models.CharField(db_column='StayInTouchNote', max_length=512, verbose_name='Stay-in-Touch Email Note', blank=True)
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Phone', blank=True)
    fax = models.CharField(db_column='Fax', max_length=40, verbose_name='Fax', blank=True)
    mobilephone = models.CharField(db_column='MobilePhone', max_length=40, verbose_name='Cell', blank=True)
    alias = models.CharField(db_column='Alias', max_length=8, verbose_name='Alias')
    communitynickname = models.CharField(db_column='CommunityNickname', max_length=40, verbose_name='Nickname')
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active')
    timezonesidkey = models.CharField(db_column='TimeZoneSidKey', max_length=40, verbose_name='Time Zone', choices=[('Pacific/Kiritimati', '(GMT+14:00) Line Islands Time (Pacific/Kiritimati)'), ('Pacific/Enderbury', '(GMT+13:00) Phoenix Islands Time (Pacific/Enderbury)'), ('Pacific/Tongatapu', '(GMT+13:00) Tonga Time (Pacific/Tongatapu)'), ('Pacific/Chatham', '(GMT+12:45) Chatham Standard Time (Pacific/Chatham)'), ('Asia/Kamchatka', '(GMT+12:00) Magadan Time (Asia/Kamchatka)'), ('Pacific/Auckland', '(GMT+12:00) New Zealand Standard Time (Pacific/Auckland)'), ('Pacific/Fiji', '(GMT+12:00) Fiji Time (Pacific/Fiji)'), ('Pacific/Norfolk', '(GMT+11:30) Norfolk Islands Time (Pacific/Norfolk)'), ('Pacific/Guadalcanal', '(GMT+11:00) Solomon Islands Time (Pacific/Guadalcanal)'), ('Australia/Lord_Howe', '(GMT+10:30) Lord Howe Standard Time (Australia/Lord_Howe)'), ('Australia/Brisbane', '(GMT+10:00) Australian Eastern Standard Time (Australia/Brisbane)'), ('Australia/Sydney', '(GMT+10:00) Australian Eastern Standard Time (Australia/Sydney)'), ('Australia/Adelaide', '(GMT+09:30) Australian Central Standard Time (Australia/Adelaide)'), ('Australia/Darwin', '(GMT+09:30) Australian Central Standard Time (Australia/Darwin)'), ('Asia/Seoul', '(GMT+09:00) Korean Standard Time (Asia/Seoul)'), ('Asia/Tokyo', '(GMT+09:00) Japan Standard Time (Asia/Tokyo)'), ('Asia/Hong_Kong', '(GMT+08:00) Hong Kong Time (Asia/Hong_Kong)'), ('Asia/Kuala_Lumpur', '(GMT+08:00) Malaysia Time (Asia/Kuala_Lumpur)'), ('Asia/Manila', '(GMT+08:00) Philippine Time (Asia/Manila)'), ('Asia/Shanghai', '(GMT+08:00) China Standard Time (Asia/Shanghai)'), ('Asia/Singapore', '(GMT+08:00) Singapore Standard Time (Asia/Singapore)'), ('Asia/Taipei', '(GMT+08:00) Taipei Standard Time (Asia/Taipei)'), ('Australia/Perth', '(GMT+08:00) Australian Western Standard Time (Australia/Perth)'), ('Asia/Bangkok', '(GMT+07:00) Indochina Time (Asia/Bangkok)'), ('Asia/Ho_Chi_Minh', '(GMT+07:00) Indochina Time (Asia/Ho_Chi_Minh)'), ('Asia/Jakarta', '(GMT+07:00) Western Indonesia Time (Asia/Jakarta)'), ('Asia/Rangoon', '(GMT+06:30) Myanmar Time (Asia/Rangoon)'), ('Asia/Dhaka', '(GMT+06:00) Bangladesh Time (Asia/Dhaka)'), ('Asia/Yekaterinburg', '(GMT+06:00) Yekaterinburg Time (Asia/Yekaterinburg)'), ('Asia/Kathmandu', '(GMT+05:45) Nepal Time (Asia/Kathmandu)'), ('Asia/Colombo', '(GMT+05:30) India Standard Time (Asia/Colombo)'), ('Asia/Kolkata', '(GMT+05:30) India Standard Time (Asia/Kolkata)'), ('Asia/Baku', '(GMT+05:00) Azerbaijan Summer Time (Asia/Baku)'), ('Asia/Karachi', '(GMT+05:00) Pakistan Time (Asia/Karachi)'), ('Asia/Tashkent', '(GMT+05:00) Uzbekistan Time (Asia/Tashkent)'), ('Asia/Kabul', '(GMT+04:30) Afghanistan Time (Asia/Kabul)'), ('Asia/Tehran', '(GMT+04:30) Iran Daylight Time (Asia/Tehran)'), ('Asia/Dubai', '(GMT+04:00) Gulf Standard Time (Asia/Dubai)'), ('Asia/Tbilisi', '(GMT+04:00) Georgia Time (Asia/Tbilisi)'), ('Asia/Yerevan', '(GMT+04:00) Armenia Time (Asia/Yerevan)'), ('Europe/Moscow', '(GMT+04:00) Moscow Standard Time (Europe/Moscow)'), ('Africa/Nairobi', '(GMT+03:00) East Africa Time (Africa/Nairobi)'), ('Asia/Baghdad', '(GMT+03:00) Arabian Standard Time (Asia/Baghdad)'), ('Asia/Beirut', '(GMT+03:00) Eastern European Summer Time (Asia/Beirut)'), ('Asia/Jerusalem', '(GMT+03:00) Israel Daylight Time (Asia/Jerusalem)'), ('Asia/Kuwait', '(GMT+03:00) Arabian Standard Time (Asia/Kuwait)'), ('Asia/Riyadh', '(GMT+03:00) Arabian Standard Time (Asia/Riyadh)'), ('Europe/Athens', '(GMT+03:00) Eastern European Summer Time (Europe/Athens)'), ('Europe/Bucharest', '(GMT+03:00) Eastern European Summer Time (Europe/Bucharest)'), ('Europe/Helsinki', '(GMT+03:00) Eastern European Summer Time (Europe/Helsinki)'), ('Europe/Istanbul', '(GMT+03:00) Eastern European Summer Time (Europe/Istanbul)'), ('Europe/Minsk', '(GMT+03:00) Further-eastern European Time (Europe/Minsk)'), ('Africa/Cairo', '(GMT+02:00) Eastern European Time (Africa/Cairo)'), ('Africa/Johannesburg', '(GMT+02:00) South Africa Standard Time (Africa/Johannesburg)'), ('Europe/Amsterdam', '(GMT+02:00) Central European Summer Time (Europe/Amsterdam)'), ('Europe/Berlin', '(GMT+02:00) Central European Summer Time (Europe/Berlin)'), ('Europe/Brussels', '(GMT+02:00) Central European Summer Time (Europe/Brussels)'), ('Europe/Paris', '(GMT+02:00) Central European Summer Time (Europe/Paris)'), ('Europe/Prague', '(GMT+02:00) Central European Summer Time (Europe/Prague)'), ('Europe/Rome', '(GMT+02:00) Central European Summer Time (Europe/Rome)'), ('Africa/Algiers', '(GMT+01:00) Central European Time (Africa/Algiers)'), ('Africa/Casablanca', '(GMT+01:00) Western European Summer Time (Africa/Casablanca)'), ('Europe/Dublin', '(GMT+01:00) Irish Summer Time (Europe/Dublin)'), ('Europe/Lisbon', '(GMT+01:00) Western European Summer Time (Europe/Lisbon)'), ('Europe/London', '(GMT+01:00) British Summer Time (Europe/London)'), ('America/Scoresbysund', '(GMT+00:00) East Greenland Summer Time (America/Scoresbysund)'), ('Atlantic/Azores', '(GMT+00:00) Azores Summer Time (Atlantic/Azores)'), ('GMT', '(GMT+00:00) Greenwich Mean Time (GMT)'), ('Atlantic/Cape_Verde', '(GMT-01:00) Cape Verde Time (Atlantic/Cape_Verde)'), ('Atlantic/South_Georgia', '(GMT-02:00) South Georgia Time (Atlantic/South_Georgia)'), ('America/St_Johns', '(GMT-02:30) Newfoundland Daylight Time (America/St_Johns)'), ('America/Argentina/Buenos_Aires', '(GMT-03:00) Argentina Time (America/Argentina/Buenos_Aires)'), ('America/Halifax', '(GMT-03:00) Atlantic Daylight Time (America/Halifax)'), ('America/Sao_Paulo', '(GMT-03:00) Brasilia Time (America/Sao_Paulo)'), ('Atlantic/Bermuda', '(GMT-03:00) Atlantic Daylight Time (Atlantic/Bermuda)'), ('America/Indiana/Indianapolis', '(GMT-04:00) Eastern Daylight Time (America/Indiana/Indianapolis)'), ('America/New_York', '(GMT-04:00) Eastern Daylight Time (America/New_York)'), ('America/Puerto_Rico', '(GMT-04:00) Atlantic Standard Time (America/Puerto_Rico)'), ('America/Santiago', '(GMT-04:00) Chile Time (America/Santiago)'), ('America/Caracas', '(GMT-04:30) Venezuela Time (America/Caracas)'), ('America/Bogota', '(GMT-05:00) Colombia Time (America/Bogota)'), ('America/Chicago', '(GMT-05:00) Central Daylight Time (America/Chicago)'), ('America/Lima', '(GMT-05:00) Peru Time (America/Lima)'), ('America/Mexico_City', '(GMT-05:00) Central Daylight Time (America/Mexico_City)'), ('America/Panama', '(GMT-05:00) Eastern Standard Time (America/Panama)'), ('America/Denver', '(GMT-06:00) Mountain Daylight Time (America/Denver)'), ('America/El_Salvador', '(GMT-06:00) Central Standard Time (America/El_Salvador)'), ('America/Mazatlan', '(GMT-06:00) Mountain Daylight Time (America/Mazatlan)'), ('America/Los_Angeles', '(GMT-07:00) Pacific Daylight Time (America/Los_Angeles)'), ('America/Phoenix', '(GMT-07:00) Mountain Standard Time (America/Phoenix)'), ('America/Tijuana', '(GMT-07:00) Pacific Daylight Time (America/Tijuana)'), ('America/Anchorage', '(GMT-08:00) Alaska Daylight Time (America/Anchorage)'), ('Pacific/Pitcairn', '(GMT-08:00) Pitcairn Time (Pacific/Pitcairn)'), ('America/Adak', '(GMT-09:00) Hawaii-Aleutian Standard Time (America/Adak)'), ('Pacific/Gambier', '(GMT-09:00) Gambier Time (Pacific/Gambier)'), ('Pacific/Marquesas', '(GMT-09:30) Marquesas Time (Pacific/Marquesas)'), ('Pacific/Honolulu', '(GMT-10:00) Hawaii-Aleutian Standard Time (Pacific/Honolulu)'), ('Pacific/Niue', '(GMT-11:00) Niue Time (Pacific/Niue)'), ('Pacific/Pago_Pago', '(GMT-11:00) Samoa Standard Time (Pacific/Pago_Pago)')])
    userrole = models.ForeignKey('Userrole', db_column='UserRoleId', blank=True, null=True)
    localesidkey = models.CharField(db_column='LocaleSidKey', max_length=40, verbose_name='Locale', choices=[('sq', 'Albanian'), ('sq_AL', 'Albanian (Albania)'), ('ar', 'Arabic'), ('ar_BH', 'Arabic (Bahrain)'), ('ar_EG', 'Arabic (Egypt)'), ('ar_JO', 'Arabic (Jordan)'), ('ar_KW', 'Arabic (Kuwait)'), ('ar_LB', 'Arabic (Lebanon)'), ('ar_QA', 'Arabic (Qatar)'), ('ar_SA', 'Arabic (Saudi Arabia)'), ('ar_AE', 'Arabic (United Arab Emirates)'), ('hy', 'Armenian'), ('hy_AM', 'Armenian (Armenia)'), ('az_AZ', 'Azerbaijani (Azerbaijan)'), ('eu', 'Basque'), ('eu_ES', 'Basque (Spain)'), ('be_BY', 'Belarusian (Belarus)'), ('bn_BD', 'Bengali (Bangladesh)'), ('bs', 'Bosnian'), ('bs_BA', 'Bosnian (Bosnia and Herzegovina)'), ('bg', 'Bulgarian'), ('bg_BG', 'Bulgarian (Bulgaria)'), ('ca', 'Catalan'), ('ca_ES_EURO', 'Catalan (Spain,Euro)'), ('ca_ES', 'Catalan (Spain)'), ('zh', 'Chinese'), ('zh_CN_PINYIN', 'Chinese (China, Pinyin Ordering)'), ('zh_CN_STROKE', 'Chinese (China, Stroke Ordering)'), ('zh_CN', 'Chinese (China)'), ('zh_HK_STROKE', 'Chinese (Hong Kong SAR China, Stroke Ordering)'), ('zh_HK', 'Chinese (Hong Kong SAR China)'), ('zh_MO', 'Chinese (Macau SAR China)'), ('zh_SG', 'Chinese (Singapore)'), ('zh_TW_STROKE', 'Chinese (Taiwan, Stroke Ordering)'), ('zh_TW', 'Chinese (Taiwan)'), ('hr', 'Croatian'), ('hr_HR', 'Croatian (Croatia)'), ('cs', 'Czech'), ('cs_CZ', 'Czech (Czech Republic)'), ('da', 'Danish'), ('da_DK', 'Danish (Denmark)'), ('nl', 'Dutch'), ('nl_BE', 'Dutch (Belgium)'), ('nl_NL', 'Dutch (Netherlands)'), ('nl_SR', 'Dutch (Suriname)'), ('en_AU', 'English (Australia)'), ('en_BB', 'English (Barbados)'), ('en_BM', 'English (Bermuda)'), ('en_CA', 'English (Canada)'), ('en_GH', 'English (Ghana)'), ('en_IN', 'English (India)'), ('en_ID', 'English (Indonesia)'), ('en_IE_EURO', 'English (Ireland,Euro)'), ('en_IE', 'English (Ireland)'), ('en_MY', 'English (Malaysia)'), ('en_NZ', 'English (New Zealand)'), ('en_NG', 'English (Nigeria)'), ('en_PK', 'English (Pakistan)'), ('en_PH', 'English (Philippines)'), ('en_SG', 'English (Singapore)'), ('en_ZA', 'English (South Africa)'), ('en_GB', 'English (United Kingdom)'), ('en_US', 'English (United States)'), ('et', 'Estonian'), ('et_EE', 'Estonian (Estonia)'), ('fi', 'Finnish'), ('fi_FI_EURO', 'Finnish (Finland,Euro)'), ('fi_FI', 'Finnish (Finland)'), ('fr', 'French'), ('fr_BE', 'French (Belgium)'), ('fr_CA', 'French (Canada)'), ('fr_FR_EURO', 'French (France,Euro)'), ('fr_FR', 'French (France)'), ('fr_LU', 'French (Luxembourg)'), ('fr_MC', 'French (Monaco)'), ('fr_CH', 'French (Switzerland)'), ('ka', 'Georgian'), ('ka_GE', 'Georgian (Georgia)'), ('de', 'German'), ('de_AT_EURO', 'German (Austria,Euro)'), ('de_AT', 'German (Austria)'), ('de_DE_EURO', 'German (Germany,Euro)'), ('de_DE', 'German (Germany)'), ('de_LU_EURO', 'German (Luxembourg,Euro)'), ('de_LU', 'German (Luxembourg)'), ('de_CH', 'German (Switzerland)'), ('el', 'Greek'), ('el_GR', 'Greek (Greece)'), ('iw', 'Hebrew'), ('iw_IL', 'Hebrew (Israel)'), ('hi', 'Hindi'), ('hi_IN', 'Hindi (India)'), ('hu', 'Hungarian'), ('hu_HU', 'Hungarian (Hungary)'), ('is', 'Icelandic'), ('is_IS', 'Icelandic (Iceland)'), ('in', 'Indonesian'), ('in_ID', 'Indonesian (Indonesia)'), ('ga', 'Irish'), ('ga_IE', 'Irish (Ireland)'), ('it', 'Italian'), ('it_IT', 'Italian (Italy)'), ('it_CH', 'Italian (Switzerland)'), ('ja', 'Japanese'), ('ja_JP', 'Japanese (Japan)'), ('kk_KZ', 'Kazakh (Kazakhstan)'), ('km_KH', 'Khmer (Cambodia)'), ('ky_KG', 'Kirghiz (Kyrgyzstan)'), ('ko', 'Korean'), ('ko_KR', 'Korean (South Korea)'), ('lv', 'Latvian'), ('lv_LV', 'Latvian (Latvia)'), ('lt', 'Lithuanian'), ('lt_LT', 'Lithuanian (Lithuania)'), ('lb', 'Luxembourgish'), ('lb_LU', 'Luxembourgish (Luxembourg)'), ('mk', 'Macedonian'), ('mk_MK', 'Macedonian (Macedonia)'), ('ms', 'Malay'), ('ms_BN', 'Malay (Brunei)'), ('ms_MY', 'Malay (Malaysia)'), ('mt', 'Maltese'), ('mt_MT', 'Maltese (Malta)'), ('sh_ME', 'Montenegrin (Montenegro)'), ('no', 'Norwegian'), ('no_NO', 'Norwegian (Norway)'), ('pl', 'Polish'), ('pl_PL', 'Polish (Poland)'), ('pt', 'Portuguese'), ('pt_AO', 'Portuguese (Angola)'), ('pt_BR', 'Portuguese (Brazil)'), ('pt_PT', 'Portuguese (Portugal)'), ('ro', 'Romanian'), ('ro_MD', 'Romanian (Moldova)'), ('ro_RO', 'Romanian (Romania)'), ('rm', 'Romansh'), ('rm_CH', 'Romansh (Switzerland)'), ('ru', 'Russian'), ('ru_RU', 'Russian (Russia)'), ('sr', 'Serbian'), ('sr_BA', 'Serbian (Bosnia and Herzegovina)'), ('sh', 'Serbian (Latin)'), ('sh_BA', 'Serbian (Latin) (Bosnia and Herzegovina)'), ('sh_CS', 'Serbian (Latin) (Serbia)'), ('sr_CS', 'Serbian (Serbia and Montenegro)'), ('sk', 'Slovak'), ('sk_SK', 'Slovak (Slovakia)'), ('sl', 'Slovenian'), ('sl_SI', 'Slovenian (Slovenia)'), ('es', 'Spanish'), ('es_AR', 'Spanish (Argentina)'), ('es_BO', 'Spanish (Bolivia)'), ('es_CL', 'Spanish (Chile)'), ('es_CO', 'Spanish (Colombia)'), ('es_CR', 'Spanish (Costa Rica)'), ('es_DO', 'Spanish (Dominican Republic)'), ('es_EC', 'Spanish (Ecuador)'), ('es_SV', 'Spanish (El Salvador)'), ('es_GT', 'Spanish (Guatemala)'), ('es_HN', 'Spanish (Honduras)'), ('es_MX', 'Spanish (Mexico)'), ('es_PA', 'Spanish (Panama)'), ('es_PY', 'Spanish (Paraguay)'), ('es_PE', 'Spanish (Peru)'), ('es_PR', 'Spanish (Puerto Rico)'), ('es_ES_EURO', 'Spanish (Spain,Euro)'), ('es_ES', 'Spanish (Spain)'), ('es_UY', 'Spanish (Uruguay)'), ('es_VE', 'Spanish (Venezuela)'), ('sv', 'Swedish'), ('sv_SE', 'Swedish (Sweden)'), ('tl', 'Tagalog'), ('tl_PH', 'Tagalog (Philippines)'), ('tg_TJ', 'Tajik (Tajikistan)'), ('th', 'Thai'), ('th_TH', 'Thai (Thailand)'), ('tr', 'Turkish'), ('tr_TR', 'Turkish (Turkey)'), ('uk', 'Ukrainian'), ('uk_UA', 'Ukrainian (Ukraine)'), ('ur', 'Urdu'), ('ur_PK', 'Urdu (Pakistan)'), ('vi', 'Vietnamese'), ('vi_VN', 'Vietnamese (Vietnam)'), ('cy', 'Welsh'), ('cy_GB', 'Welsh (United Kingdom)')])
    receivesinfoemails = models.BooleanField(db_column='ReceivesInfoEmails', verbose_name='Info Emails')
    receivesadmininfoemails = models.BooleanField(db_column='ReceivesAdminInfoEmails', verbose_name='Admin Info Emails')
    emailencodingkey = models.CharField(db_column='EmailEncodingKey', max_length=40, verbose_name='Email Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    profile = models.ForeignKey(Profile, db_column='ProfileId')
    usertype = models.CharField(db_column='UserType', max_length=40, verbose_name='User Type', sf_read_only=models.READ_ONLY, choices=[('Standard', 'Standard'), ('PowerPartner', 'Partner'), ('PowerCustomerSuccess', 'Customer Portal Manager'), ('CustomerSuccess', 'Customer Portal User'), ('Guest', 'Guest'), ('CspLitePortal', 'High Volume Portal'), ('CsnOnly', 'CSN Only'), ('SelfService', 'Self Service')], blank=True)
    languagelocalekey = models.CharField(db_column='LanguageLocaleKey', max_length=40, verbose_name='Language', choices=[('en_US', 'English'), ('de', 'German'), ('es', 'Spanish'), ('fr', 'French'), ('it', 'Italian'), ('ja', 'Japanese'), ('sv', 'Swedish'), ('ko', 'Korean'), ('zh_TW', 'Chinese (Traditional)'), ('zh_CN', 'Chinese (Simplified)'), ('pt_BR', 'Portuguese (Brazilian)'), ('nl_NL', 'Dutch'), ('da', 'Danish'), ('th', 'Thai'), ('fi', 'Finnish'), ('ru', 'Russian')])
    employeenumber = models.CharField(db_column='EmployeeNumber', max_length=20, verbose_name='Employee Number', blank=True)
    delegatedapproverid = models.ForeignKey(Group, db_column='DelegatedApproverId', blank=True, null=True)
    manager = models.ForeignKey('self', related_name='user_manager_set', db_column='ManagerId', blank=True, null=True)
    lastlogindate = models.DateTimeField(db_column='LastLoginDate', verbose_name='Last Login', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastpasswordchangedate = models.DateTimeField(db_column='LastPasswordChangeDate', verbose_name='Last Password Change or Reset', sf_read_only=models.READ_ONLY, blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey('self', related_name='user_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey('self', related_name='user_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    offlinetrialexpirationdate = models.DateTimeField(db_column='OfflineTrialExpirationDate', verbose_name='Offline Edition Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    offlinepdatrialexpirationdate = models.DateTimeField(db_column='OfflinePdaTrialExpirationDate', verbose_name='Sales Anywhere Trial Expiration Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    userpermissionsmarketinguser = models.BooleanField(db_column='UserPermissionsMarketingUser', verbose_name='Marketing User')
    userpermissionsofflineuser = models.BooleanField(db_column='UserPermissionsOfflineUser', verbose_name='Offline User')
    userpermissionsavantgouser = models.BooleanField(db_column='UserPermissionsAvantgoUser', verbose_name='AvantGo User')
    userpermissionscallcenterautologin = models.BooleanField(db_column='UserPermissionsCallCenterAutoLogin', verbose_name='Auto-login To Call Center')
    userpermissionsmobileuser = models.BooleanField(db_column='UserPermissionsMobileUser', verbose_name='Apex Mobile User')
    userpermissionssfcontentuser = models.BooleanField(db_column='UserPermissionsSFContentUser', verbose_name='Salesforce CRM Content User')
    userpermissionsinteractionuser = models.BooleanField(db_column='UserPermissionsInteractionUser', verbose_name='Force.com Flow User')
    userpermissionschatteranswersuser = models.BooleanField(db_column='UserPermissionsChatterAnswersUser', verbose_name='Chatter Answers User')
    forecastenabled = models.BooleanField(db_column='ForecastEnabled', verbose_name='Allow Forecasting')
    userpreferencesactivityreminderspopup = models.BooleanField(db_column='UserPreferencesActivityRemindersPopup', verbose_name='ActivityRemindersPopup')
    userpreferenceseventreminderscheckboxdefault = models.BooleanField(db_column='UserPreferencesEventRemindersCheckboxDefault', verbose_name='EventRemindersCheckboxDefault')
    userpreferencestaskreminderscheckboxdefault = models.BooleanField(db_column='UserPreferencesTaskRemindersCheckboxDefault', verbose_name='TaskRemindersCheckboxDefault')
    userpreferencesremindersoundoff = models.BooleanField(db_column='UserPreferencesReminderSoundOff', verbose_name='ReminderSoundOff')
    userpreferencesdisableallfeedsemail = models.BooleanField(db_column='UserPreferencesDisableAllFeedsEmail', verbose_name='DisableAllFeedsEmail')
    userpreferencesdisablefollowersemail = models.BooleanField(db_column='UserPreferencesDisableFollowersEmail', verbose_name='DisableFollowersEmail')
    userpreferencesdisableprofilepostemail = models.BooleanField(db_column='UserPreferencesDisableProfilePostEmail', verbose_name='DisableProfilePostEmail')
    userpreferencesdisablechangecommentemail = models.BooleanField(db_column='UserPreferencesDisableChangeCommentEmail', verbose_name='DisableChangeCommentEmail')
    userpreferencesdisablelatercommentemail = models.BooleanField(db_column='UserPreferencesDisableLaterCommentEmail', verbose_name='DisableLaterCommentEmail')
    userpreferencesdisprofpostcommentemail = models.BooleanField(db_column='UserPreferencesDisProfPostCommentEmail', verbose_name='DisProfPostCommentEmail')
    userpreferencesapexpagesdevelopermode = models.BooleanField(db_column='UserPreferencesApexPagesDeveloperMode', verbose_name='ApexPagesDeveloperMode')
    userpreferenceshidecsngetchattermobiletask = models.BooleanField(db_column='UserPreferencesHideCSNGetChatterMobileTask', verbose_name='HideCSNGetChatterMobileTask')
    userpreferencesdisablementionspostemail = models.BooleanField(db_column='UserPreferencesDisableMentionsPostEmail', verbose_name='DisableMentionsPostEmail')
    userpreferencesdismentionscommentemail = models.BooleanField(db_column='UserPreferencesDisMentionsCommentEmail', verbose_name='DisMentionsCommentEmail')
    userpreferenceshidecsndesktoptask = models.BooleanField(db_column='UserPreferencesHideCSNDesktopTask', verbose_name='HideCSNDesktopTask')
    userpreferenceshidechatteronboardingsplash = models.BooleanField(db_column='UserPreferencesHideChatterOnboardingSplash', verbose_name='HideChatterOnboardingSplash')
    userpreferenceshidesecondchatteronboardingsplash = models.BooleanField(db_column='UserPreferencesHideSecondChatterOnboardingSplash', verbose_name='HideSecondChatterOnboardingSplash')
    userpreferencesdiscommentafterlikeemail = models.BooleanField(db_column='UserPreferencesDisCommentAfterLikeEmail', verbose_name='DisCommentAfterLikeEmail')
    userpreferencesdisablelikeemail = models.BooleanField(db_column='UserPreferencesDisableLikeEmail', verbose_name='DisableLikeEmail')
    userpreferencesdisablemessageemail = models.BooleanField(db_column='UserPreferencesDisableMessageEmail', verbose_name='DisableMessageEmail')
    userpreferencesoptoutoftouch = models.BooleanField(db_column='UserPreferencesOptOutOfTouch', verbose_name='OptOutOfTouch')
    userpreferencesdisablebookmarkemail = models.BooleanField(db_column='UserPreferencesDisableBookmarkEmail', verbose_name='DisableBookmarkEmail')
    userpreferencesdisablesharepostemail = models.BooleanField(db_column='UserPreferencesDisableSharePostEmail', verbose_name='DisableSharePostEmail')
    userpreferencesenableautosubforfeeds = models.BooleanField(db_column='UserPreferencesEnableAutoSubForFeeds', verbose_name='EnableAutoSubForFeeds')
    userpreferencesdisablefilesharenotificationsforapi = models.BooleanField(db_column='UserPreferencesDisableFileShareNotificationsForApi', verbose_name='DisableFileShareNotificationsForApi')
    userpreferencesshowtitletoexternalusers = models.BooleanField(db_column='UserPreferencesShowTitleToExternalUsers', verbose_name='ShowTitleToExternalUsers')
    userpreferencesshowmanagertoexternalusers = models.BooleanField(db_column='UserPreferencesShowManagerToExternalUsers', verbose_name='ShowManagerToExternalUsers')
    userpreferencesshowemailtoexternalusers = models.BooleanField(db_column='UserPreferencesShowEmailToExternalUsers', verbose_name='ShowEmailToExternalUsers')
    userpreferencesshowworkphonetoexternalusers = models.BooleanField(db_column='UserPreferencesShowWorkPhoneToExternalUsers', verbose_name='ShowWorkPhoneToExternalUsers')
    userpreferencesshowmobilephonetoexternalusers = models.BooleanField(db_column='UserPreferencesShowMobilePhoneToExternalUsers', verbose_name='ShowMobilePhoneToExternalUsers')
    userpreferencesshowfaxtoexternalusers = models.BooleanField(db_column='UserPreferencesShowFaxToExternalUsers', verbose_name='ShowFaxToExternalUsers')
    userpreferencesshowstreetaddresstoexternalusers = models.BooleanField(db_column='UserPreferencesShowStreetAddressToExternalUsers', verbose_name='ShowStreetAddressToExternalUsers')
    userpreferencesshowcitytoexternalusers = models.BooleanField(db_column='UserPreferencesShowCityToExternalUsers', verbose_name='ShowCityToExternalUsers')
    userpreferencesshowstatetoexternalusers = models.BooleanField(db_column='UserPreferencesShowStateToExternalUsers', verbose_name='ShowStateToExternalUsers')
    userpreferencesshowpostalcodetoexternalusers = models.BooleanField(db_column='UserPreferencesShowPostalCodeToExternalUsers', verbose_name='ShowPostalCodeToExternalUsers')
    userpreferencesshowcountrytoexternalusers = models.BooleanField(db_column='UserPreferencesShowCountryToExternalUsers', verbose_name='ShowCountryToExternalUsers')
    userpreferencesshowprofilepictoguestusers = models.BooleanField(db_column='UserPreferencesShowProfilePicToGuestUsers', verbose_name='ShowProfilePicToGuestUsers')
    userpreferencesshowtitletoguestusers = models.BooleanField(db_column='UserPreferencesShowTitleToGuestUsers', verbose_name='ShowTitleToGuestUsers')
    userpreferencesshowcitytoguestusers = models.BooleanField(db_column='UserPreferencesShowCityToGuestUsers', verbose_name='ShowCityToGuestUsers')
    userpreferencesshowstatetoguestusers = models.BooleanField(db_column='UserPreferencesShowStateToGuestUsers', verbose_name='ShowStateToGuestUsers')
    userpreferencesshowpostalcodetoguestusers = models.BooleanField(db_column='UserPreferencesShowPostalCodeToGuestUsers', verbose_name='ShowPostalCodeToGuestUsers')
    userpreferencesshowcountrytoguestusers = models.BooleanField(db_column='UserPreferencesShowCountryToGuestUsers', verbose_name='ShowCountryToGuestUsers')
    userpreferenceshides1browserui = models.BooleanField(db_column='UserPreferencesHideS1BrowserUI', verbose_name='HideS1BrowserUI')
    contact = models.ForeignKey(Contact, sf_read_only=models.NOT_UPDATEABLE, db_column='ContactId', blank=True, null=True)
    accountid = models.ForeignKey(Account, sf_read_only=models.READ_ONLY, db_column='AccountId', blank=True, null=True)
    callcenterid = models.ForeignKey(Callcenter, db_column='CallCenterId', blank=True, null=True)
    extension = models.CharField(db_column='Extension', max_length=40, verbose_name='Extension', blank=True)
    federationidentifier = models.CharField(db_column='FederationIdentifier', max_length=512, verbose_name='SAML Federation ID', blank=True)
    aboutme = models.TextField(db_column='AboutMe', verbose_name='About Me', blank=True)
    fullphotourl = models.URLField(db_column='FullPhotoUrl', verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    smallphotourl = models.URLField(db_column='SmallPhotoUrl', verbose_name='Url for Thumbnail sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    digestfrequency = models.CharField(db_column='DigestFrequency', max_length=40, verbose_name='Chatter Email Highlights Frequency', choices=[('D', 'Daily'), ('W', 'Weekly'), ('N', 'Never')])
    defaultgroupnotificationfrequency = models.CharField(db_column='DefaultGroupNotificationFrequency', max_length=40, verbose_name='Default Notification Frequency when Joining Groups', choices=[('P', 'Email on Each Post'), ('D', 'Daily Digests'), ('W', 'Weekly Digests'), ('N', 'Never')])
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'User'
        verbose_name = 'User'
        verbose_name_plural = 'Users'
        # keyPrefix = '005'

class Userfeed(models.Model):
    parent = models.ForeignKey(User, sf_read_only=models.READ_ONLY, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Feed Item Type', sf_read_only=models.READ_ONLY, choices=[('TrackedChange', 'Tracked Change'), ('UserStatus', 'User Status'), ('TextPost', 'Text Post'), ('LinkPost', 'Link Post'), ('ContentPost', 'Content Post'), ('PollPost', 'Poll'), ('RypplePost', 'Work.com Thanks'), ('DashboardComponentSnapshot', 'Dashboard Component Snapshot'), ('ApprovalPost', 'Approval Post'), ('CaseCommentPost', 'Case Comment Feed'), ('ReplyPost', 'Reply Post'), ('EmailMessageEvent', 'Email Message Feed'), ('CallLogPost', 'Call Log Feed'), ('ChangeStatusPost', 'Change Status Feed'), ('AttachArticleEvent', 'Attached Article'), ('MilestoneEvent', 'Milestone Event'), ('ActivityEvent', 'Activity Change'), ('ChatTranscriptPost', 'Chat Transcript Post'), ('CollaborationGroupCreated', 'Collaboration Group Created'), ('CollaborationGroupUnarchived', 'Collaboration Group Reactivated'), ('SocialPost', 'Social Post'), ('QuestionPost', 'Question Post'), ('FacebookPost', 'Facebook Post'), ('BasicTemplateFeedItem', 'Basic Template Post'), ('CreateRecordEvent', 'Created Record'), ('CanvasPost', 'Canvas'), ('AnnouncementPost', 'a')], blank=True)
    createdby = models.ForeignKey(Selfserviceuser, related_name='userfeed_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    commentcount = models.IntegerField(db_column='CommentCount', verbose_name='Comment Count', sf_read_only=models.READ_ONLY)
    likecount = models.IntegerField(db_column='LikeCount', verbose_name='Like Count', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=255, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    body = models.TextField(db_column='Body', verbose_name='Body', sf_read_only=models.READ_ONLY, blank=True)
    linkurl = models.URLField(db_column='LinkUrl', verbose_name='Link Url', sf_read_only=models.READ_ONLY, blank=True, null=True)
    relatedrecordid = models.ForeignKey(Contentversion, sf_read_only=models.READ_ONLY, db_column='RelatedRecordId', blank=True, null=True)
    contentdata = models.TextField(db_column='ContentData', verbose_name='Content Data', sf_read_only=models.READ_ONLY, blank=True)
    contentfilename = models.CharField(db_column='ContentFileName', max_length=255, verbose_name='Content File Name', sf_read_only=models.READ_ONLY, blank=True)
    contentdescription = models.TextField(db_column='ContentDescription', verbose_name='Content Description', sf_read_only=models.READ_ONLY, blank=True)
    contenttype = models.CharField(db_column='ContentType', max_length=120, verbose_name='Content File Type', sf_read_only=models.READ_ONLY, blank=True)
    contentsize = models.IntegerField(db_column='ContentSize', verbose_name='Content Size', sf_read_only=models.READ_ONLY, blank=True, null=True)
    insertedby = models.ForeignKey(Selfserviceuser, related_name='userfeed_insertedby_set', db_column='InsertedById', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'UserFeed'
        verbose_name = 'User Feed'
        verbose_name_plural = 'User Feed'
        # keyPrefix = 'None'

class Userlicense(models.Model):
    licensedefinitionkey = models.CharField(db_column='LicenseDefinitionKey', max_length=40, verbose_name='License Def. ID', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=40, verbose_name='Name', sf_read_only=models.READ_ONLY)
    monthlyloginsused = models.IntegerField(db_column='MonthlyLoginsUsed', verbose_name='Monthly Logins Used', sf_read_only=models.READ_ONLY, blank=True, null=True)
    monthlyloginsentitlement = models.IntegerField(db_column='MonthlyLoginsEntitlement', verbose_name='Monthly Logins Allotted', sf_read_only=models.READ_ONLY, blank=True, null=True)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'UserLicense'
        verbose_name = 'User License'
        verbose_name_plural = 'User Licenses'
        # keyPrefix = '100'

class Userlogin(models.Model):
    userid = models.ForeignKey(User, related_name='userlogin_userid_set', db_column='UserId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isfrozen = models.BooleanField(db_column='IsFrozen', verbose_name='Is Frozen', sf_read_only=models.NOT_CREATEABLE)
    ispasswordlocked = models.BooleanField(db_column='IsPasswordLocked', verbose_name='Is Password Locked', sf_read_only=models.NOT_CREATEABLE)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='userlogin_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'UserLogin'
        verbose_name = 'User Login'
        verbose_name_plural = 'User Login'
        # keyPrefix = '0Yw'

class Userpreference(models.Model):
    userid = models.ForeignKey(User, sf_read_only=models.READ_ONLY, db_column='UserId')
    preference = models.CharField(db_column='Preference', max_length=40, verbose_name='Preference', sf_read_only=models.READ_ONLY, choices=[('57', 'Event Reminder Default Lead Time'), ('58', 'Task Reminder Default Time'), ('91', 'Prevent Logs on Load'), ('92', 'Autocomplete Apex After Key Press'), ('93', 'Visualforce Viewstate Inspector'), ('94', 'Forecasting Displayed Type'), ('96', 'Editor Theme'), ('97', 'Editor Font Size')])
    value = models.CharField(db_column='Value', max_length=1333, verbose_name='Value', sf_read_only=models.READ_ONLY, blank=True)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'UserPreference'
        verbose_name = 'User Preference'
        verbose_name_plural = 'User Preferences'
        # keyPrefix = '03u'

class Userprofile(models.Model):
    lastname = models.CharField(db_column='LastName', max_length=80, verbose_name='Last Name', sf_read_only=models.READ_ONLY)
    firstname = models.CharField(db_column='FirstName', max_length=40, verbose_name='First Name', sf_read_only=models.READ_ONLY, blank=True)
    name = models.CharField(db_column='Name', max_length=121, verbose_name='Name', sf_read_only=models.READ_ONLY)
    title = models.CharField(db_column='Title', max_length=80, verbose_name='Title', sf_read_only=models.READ_ONLY, blank=True)
    manager = models.ForeignKey('self', sf_read_only=models.READ_ONLY, db_column='ManagerId', blank=True, null=True)
    companyname = models.CharField(db_column='CompanyName', max_length=80, verbose_name='Company Name', sf_read_only=models.READ_ONLY, blank=True)
    aboutme = models.TextField(db_column='AboutMe', verbose_name='About Me', sf_read_only=models.READ_ONLY, blank=True)
    email = models.EmailField(db_column='Email', verbose_name='E-mail', sf_read_only=models.READ_ONLY)
    phone = models.CharField(db_column='Phone', max_length=40, verbose_name='Phone', sf_read_only=models.READ_ONLY, blank=True)
    mobilephone = models.CharField(db_column='MobilePhone', max_length=40, verbose_name='Cell', sf_read_only=models.READ_ONLY, blank=True)
    fax = models.CharField(db_column='Fax', max_length=40, verbose_name='Fax', sf_read_only=models.READ_ONLY, blank=True)
    street = models.TextField(db_column='Street', verbose_name='Street', sf_read_only=models.READ_ONLY, blank=True)
    city = models.CharField(db_column='City', max_length=40, verbose_name='City', sf_read_only=models.READ_ONLY, blank=True)
    state = models.CharField(db_column='State', max_length=80, verbose_name='State/Province', sf_read_only=models.READ_ONLY, blank=True)
    postalcode = models.CharField(db_column='PostalCode', max_length=20, verbose_name='Zip/Postal Code', sf_read_only=models.READ_ONLY, blank=True)
    country = models.CharField(db_column='Country', max_length=80, verbose_name='Country', sf_read_only=models.READ_ONLY, blank=True)
    latitude = models.DecimalField(db_column='Latitude', max_digits=18, decimal_places=15, verbose_name='Latitude', sf_read_only=models.READ_ONLY, blank=True, null=True)
    longitude = models.DecimalField(db_column='Longitude', max_digits=18, decimal_places=15, verbose_name='Longitude', sf_read_only=models.READ_ONLY, blank=True, null=True)
    isbadged = models.BooleanField(db_column='IsBadged', verbose_name='User Photo has a badge overlay', sf_read_only=models.READ_ONLY)
    isactive = models.BooleanField(db_column='IsActive', verbose_name='Active', sf_read_only=models.READ_ONLY)
    userpreferencesactivityreminderspopup = models.BooleanField(db_column='UserPreferencesActivityRemindersPopup', verbose_name='ActivityRemindersPopup', sf_read_only=models.READ_ONLY)
    userpreferenceseventreminderscheckboxdefault = models.BooleanField(db_column='UserPreferencesEventRemindersCheckboxDefault', verbose_name='EventRemindersCheckboxDefault', sf_read_only=models.READ_ONLY)
    userpreferencestaskreminderscheckboxdefault = models.BooleanField(db_column='UserPreferencesTaskRemindersCheckboxDefault', verbose_name='TaskRemindersCheckboxDefault', sf_read_only=models.READ_ONLY)
    userpreferencesremindersoundoff = models.BooleanField(db_column='UserPreferencesReminderSoundOff', verbose_name='ReminderSoundOff', sf_read_only=models.READ_ONLY)
    userpreferencesdisableallfeedsemail = models.BooleanField(db_column='UserPreferencesDisableAllFeedsEmail', verbose_name='DisableAllFeedsEmail', sf_read_only=models.READ_ONLY)
    userpreferencesdisablefollowersemail = models.BooleanField(db_column='UserPreferencesDisableFollowersEmail', verbose_name='DisableFollowersEmail', sf_read_only=models.READ_ONLY)
    userpreferencesdisableprofilepostemail = models.BooleanField(db_column='UserPreferencesDisableProfilePostEmail', verbose_name='DisableProfilePostEmail', sf_read_only=models.READ_ONLY)
    userpreferencesdisablechangecommentemail = models.BooleanField(db_column='UserPreferencesDisableChangeCommentEmail', verbose_name='DisableChangeCommentEmail', sf_read_only=models.READ_ONLY)
    userpreferencesdisablelatercommentemail = models.BooleanField(db_column='UserPreferencesDisableLaterCommentEmail', verbose_name='DisableLaterCommentEmail', sf_read_only=models.READ_ONLY)
    userpreferencesdisprofpostcommentemail = models.BooleanField(db_column='UserPreferencesDisProfPostCommentEmail', verbose_name='DisProfPostCommentEmail', sf_read_only=models.READ_ONLY)
    userpreferencesapexpagesdevelopermode = models.BooleanField(db_column='UserPreferencesApexPagesDeveloperMode', verbose_name='ApexPagesDeveloperMode', sf_read_only=models.READ_ONLY)
    userpreferenceshidecsngetchattermobiletask = models.BooleanField(db_column='UserPreferencesHideCSNGetChatterMobileTask', verbose_name='HideCSNGetChatterMobileTask', sf_read_only=models.READ_ONLY)
    userpreferencesdisablementionspostemail = models.BooleanField(db_column='UserPreferencesDisableMentionsPostEmail', verbose_name='DisableMentionsPostEmail', sf_read_only=models.READ_ONLY)
    userpreferencesdismentionscommentemail = models.BooleanField(db_column='UserPreferencesDisMentionsCommentEmail', verbose_name='DisMentionsCommentEmail', sf_read_only=models.READ_ONLY)
    userpreferenceshidecsndesktoptask = models.BooleanField(db_column='UserPreferencesHideCSNDesktopTask', verbose_name='HideCSNDesktopTask', sf_read_only=models.READ_ONLY)
    userpreferenceshidechatteronboardingsplash = models.BooleanField(db_column='UserPreferencesHideChatterOnboardingSplash', verbose_name='HideChatterOnboardingSplash', sf_read_only=models.READ_ONLY)
    userpreferenceshidesecondchatteronboardingsplash = models.BooleanField(db_column='UserPreferencesHideSecondChatterOnboardingSplash', verbose_name='HideSecondChatterOnboardingSplash', sf_read_only=models.READ_ONLY)
    userpreferencesdiscommentafterlikeemail = models.BooleanField(db_column='UserPreferencesDisCommentAfterLikeEmail', verbose_name='DisCommentAfterLikeEmail', sf_read_only=models.READ_ONLY)
    userpreferencesdisablelikeemail = models.BooleanField(db_column='UserPreferencesDisableLikeEmail', verbose_name='DisableLikeEmail', sf_read_only=models.READ_ONLY)
    userpreferencesdisablemessageemail = models.BooleanField(db_column='UserPreferencesDisableMessageEmail', verbose_name='DisableMessageEmail', sf_read_only=models.READ_ONLY)
    userpreferencesoptoutoftouch = models.BooleanField(db_column='UserPreferencesOptOutOfTouch', verbose_name='OptOutOfTouch', sf_read_only=models.READ_ONLY)
    userpreferencesdisablebookmarkemail = models.BooleanField(db_column='UserPreferencesDisableBookmarkEmail', verbose_name='DisableBookmarkEmail', sf_read_only=models.READ_ONLY)
    userpreferencesdisablesharepostemail = models.BooleanField(db_column='UserPreferencesDisableSharePostEmail', verbose_name='DisableSharePostEmail', sf_read_only=models.READ_ONLY)
    userpreferencesenableautosubforfeeds = models.BooleanField(db_column='UserPreferencesEnableAutoSubForFeeds', verbose_name='EnableAutoSubForFeeds', sf_read_only=models.READ_ONLY)
    userpreferencesdisablefilesharenotificationsforapi = models.BooleanField(db_column='UserPreferencesDisableFileShareNotificationsForApi', verbose_name='DisableFileShareNotificationsForApi', sf_read_only=models.READ_ONLY)
    userpreferencesshowtitletoexternalusers = models.BooleanField(db_column='UserPreferencesShowTitleToExternalUsers', verbose_name='ShowTitleToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowmanagertoexternalusers = models.BooleanField(db_column='UserPreferencesShowManagerToExternalUsers', verbose_name='ShowManagerToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowemailtoexternalusers = models.BooleanField(db_column='UserPreferencesShowEmailToExternalUsers', verbose_name='ShowEmailToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowworkphonetoexternalusers = models.BooleanField(db_column='UserPreferencesShowWorkPhoneToExternalUsers', verbose_name='ShowWorkPhoneToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowmobilephonetoexternalusers = models.BooleanField(db_column='UserPreferencesShowMobilePhoneToExternalUsers', verbose_name='ShowMobilePhoneToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowfaxtoexternalusers = models.BooleanField(db_column='UserPreferencesShowFaxToExternalUsers', verbose_name='ShowFaxToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowstreetaddresstoexternalusers = models.BooleanField(db_column='UserPreferencesShowStreetAddressToExternalUsers', verbose_name='ShowStreetAddressToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowcitytoexternalusers = models.BooleanField(db_column='UserPreferencesShowCityToExternalUsers', verbose_name='ShowCityToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowstatetoexternalusers = models.BooleanField(db_column='UserPreferencesShowStateToExternalUsers', verbose_name='ShowStateToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowpostalcodetoexternalusers = models.BooleanField(db_column='UserPreferencesShowPostalCodeToExternalUsers', verbose_name='ShowPostalCodeToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowcountrytoexternalusers = models.BooleanField(db_column='UserPreferencesShowCountryToExternalUsers', verbose_name='ShowCountryToExternalUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowprofilepictoguestusers = models.BooleanField(db_column='UserPreferencesShowProfilePicToGuestUsers', verbose_name='ShowProfilePicToGuestUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowtitletoguestusers = models.BooleanField(db_column='UserPreferencesShowTitleToGuestUsers', verbose_name='ShowTitleToGuestUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowcitytoguestusers = models.BooleanField(db_column='UserPreferencesShowCityToGuestUsers', verbose_name='ShowCityToGuestUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowstatetoguestusers = models.BooleanField(db_column='UserPreferencesShowStateToGuestUsers', verbose_name='ShowStateToGuestUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowpostalcodetoguestusers = models.BooleanField(db_column='UserPreferencesShowPostalCodeToGuestUsers', verbose_name='ShowPostalCodeToGuestUsers', sf_read_only=models.READ_ONLY)
    userpreferencesshowcountrytoguestusers = models.BooleanField(db_column='UserPreferencesShowCountryToGuestUsers', verbose_name='ShowCountryToGuestUsers', sf_read_only=models.READ_ONLY)
    userpreferenceshides1browserui = models.BooleanField(db_column='UserPreferencesHideS1BrowserUI', verbose_name='HideS1BrowserUI', sf_read_only=models.READ_ONLY)
    fullphotourl = models.URLField(db_column='FullPhotoUrl', verbose_name='Url for full-sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    smallphotourl = models.URLField(db_column='SmallPhotoUrl', verbose_name='Url for Thumbnail sized Photo', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, sf_read_only=models.READ_ONLY, db_column='LastModifiedById')
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'UserProfile'
        verbose_name = 'User Profile'
        verbose_name_plural = 'User Profiles'
        # keyPrefix = 'None'

class Userrecordaccess(models.Model):
    userid = models.ForeignKey(User, sf_read_only=models.READ_ONLY, db_column='UserId')
    recordid = models.CharField(db_column='RecordId', max_length=40, verbose_name='Record ID', sf_read_only=models.READ_ONLY)
    hasreadaccess = models.BooleanField(db_column='HasReadAccess', verbose_name='Has Read Access', sf_read_only=models.READ_ONLY)
    haseditaccess = models.BooleanField(db_column='HasEditAccess', verbose_name='Has Edit Access', sf_read_only=models.READ_ONLY)
    hasdeleteaccess = models.BooleanField(db_column='HasDeleteAccess', verbose_name='Has Delete Access', sf_read_only=models.READ_ONLY)
    hastransferaccess = models.BooleanField(db_column='HasTransferAccess', verbose_name='Has Transfer Access', sf_read_only=models.READ_ONLY)
    hasallaccess = models.BooleanField(db_column='HasAllAccess', verbose_name='Has All Access', sf_read_only=models.READ_ONLY)
    maxaccesslevel = models.CharField(db_column='MaxAccessLevel', max_length=40, verbose_name='Maximum Access Level', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write'), ('Delete', 'Delete'), ('Transfer', 'Read/Write/Transfer'), ('All', 'Owner')], blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'UserRecordAccess'
        verbose_name = 'User Record Access'
        verbose_name_plural = 'User Record Access'
        # keyPrefix = 'None'

class Userrole(models.Model):
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name')
    parentroleid = models.ForeignKey('self', db_column='ParentRoleId', blank=True, null=True)
    rollupdescription = models.CharField(db_column='RollupDescription', max_length=80, verbose_name='Description', blank=True)
    opportunityaccessforaccountowner = models.CharField(db_column='OpportunityAccessForAccountOwner', max_length=40, verbose_name='Opportunity Access Level for Account Owner', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')])
    caseaccessforaccountowner = models.CharField(db_column='CaseAccessForAccountOwner', max_length=40, verbose_name='Case Access Level for Account Owner', choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True)
    contactaccessforaccountowner = models.CharField(db_column='ContactAccessForAccountOwner', max_length=40, verbose_name='Contact Access Level for Account Owner', sf_read_only=models.READ_ONLY, choices=[('None', 'Private'), ('Read', 'Read Only'), ('Edit', 'Read/Write')], blank=True)
    forecastuserid = models.ForeignKey(User, related_name='userrole_forecastuserid_set', db_column='ForecastUserId', blank=True, null=True)
    mayforecastmanagershare = models.BooleanField(db_column='MayForecastManagerShare', verbose_name='May Forecast Manager Share', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='userrole_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    developername = models.CharField(db_column='DeveloperName', max_length=80, verbose_name='Developer Name', blank=True)
    portalaccountid = models.ForeignKey(Account, sf_read_only=models.NOT_UPDATEABLE, db_column='PortalAccountId', blank=True, null=True)
    portaltype = models.CharField(db_column='PortalType', max_length=40, verbose_name='Portal Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('None', 'None'), ('CustomerPortal', 'Customer Portal'), ('Partner', 'Partner Portal')], blank=True)
    portalaccountownerid = models.ForeignKey(User, related_name='userrole_portalaccountownerid_set', db_column='PortalAccountOwnerId', sf_read_only=models.READ_ONLY, blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'UserRole'
        verbose_name = 'Role'
        verbose_name_plural = 'Role'
        # keyPrefix = '00E'

class Vote(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey(Idea, sf_read_only=models.NOT_UPDATEABLE, db_column='ParentId')
    type = models.CharField(db_column='Type', max_length=40, verbose_name='Vote Type', sf_read_only=models.NOT_UPDATEABLE, choices=[('Up', None), ('Down', None), ('1', None), ('2', None), ('3', None), ('4', None), ('5', None)])
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, sf_read_only=models.READ_ONLY, db_column='CreatedById')
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'Vote'
        verbose_name = 'Vote'
        verbose_name_plural = 'Votes'
        # keyPrefix = '083'

class Weblink(models.Model):
    pageorsobjecttype = models.CharField(db_column='PageOrSobjectType', max_length=40, verbose_name='Page Or sObject Type Name', sf_read_only=models.NOT_UPDATEABLE, choices=[('Account', None), ('Activity', None), ('APXTConga4__Conga_Email_Staging__c', None), ('APXTConga4__Conga_Email_Template__c', None), ('APXTConga4__Conga_Template__c', None), ('Asset', None), ('bde__Batch__c', None), ('Campaign', None), ('CampaignMember', None), ('Case', None), ('Contact', None), ('ContentVersion', None), ('Contract', None), ('CustomPageItem', None), ('DashboardComponent', None), ('Event', None), ('Idea', None), ('Lead', None), ('MC4SF__MC_Campaign__c', None), ('MC4SF__MC_Campaign_Hourly_Stats__c', None), ('MC4SF__MC_Interest_Group__c', None), ('MC4SF__MC_Interest_Grouping__c', None), ('MC4SF__MC_List__c', None), ('MC4SF__MC_Merge_Variable__c', None), ('MC4SF__MC_Query__c', None), ('MC4SF__MC_Query_Filter__c', None), ('MC4SF__MC_Static_Segment__c', None), ('MC4SF__MC_Subscriber__c', None), ('MC4SF__MC_Subscriber_Activity__c', None), ('npe01__OppPayment__c', None), ('npe03__Recurring_Donation__c', None), ('npe4__Relationship__c', None), ('npe4__Relationship_Error__c', None), ('npe5__Affiliation__c', None), ('npo02__Household__c', None), ('Opportunity', None), ('OpportunityLineItem', None), ('Product2', None), ('SFSSDupeCatcher__Application_Settings__c', None), ('SFSSDupeCatcher__DcIn__c', None), ('SFSSDupeCatcher__Duplicate_Warning__c', None), ('SFSSDupeCatcher__Override_Cache__c', None), ('SFSSDupeCatcher__Potential_Duplicate__c', None), ('SFSSDupeCatcher__RequiredFieldSupport__c', None), ('SFSSDupeCatcher__Scenario__c', None), ('SFSSDupeCatcher__Scenario_Rule__c', None), ('Solution', None), ('Task', None), ('User', None)])
    name = models.CharField(db_column='Name', max_length=240, verbose_name='Name')
    isprotected = models.BooleanField(db_column='IsProtected', verbose_name='Protected Component')
    url = models.TextField(db_column='Url', verbose_name='URL', blank=True)
    encodingkey = models.CharField(db_column='EncodingKey', max_length=40, verbose_name='Link Encoding', choices=[('UTF-8', 'Unicode (UTF-8)'), ('ISO-8859-1', 'General US & Western Europe (ISO-8859-1, ISO-LATIN-1)'), ('Shift_JIS', 'Japanese (Shift-JIS)'), ('ISO-2022-JP', 'Japanese (JIS)'), ('EUC-JP', 'Japanese (EUC)'), ('ks_c_5601-1987', 'Korean (ks_c_5601-1987)'), ('Big5', 'Traditional Chinese (Big5)'), ('GB2312', 'Simplified Chinese (GB2312)'), ('Big5-HKSCS', 'Traditional Chinese Hong Kong (Big5-HKSCS)'), ('x-SJIS_0213', 'Japanese (Shift-JIS_2004)')])
    linktype = models.CharField(db_column='LinkType', max_length=40, verbose_name='Content Source', choices=[('url', 'URL'), ('sControl', 'Custom S-Control'), ('javascript', 'OnClick JavaScript'), ('page', 'Visualforce Page'), ('flow', 'Flow')])
    opentype = models.CharField(db_column='OpenType', max_length=40, verbose_name='Behavior', choices=[('newWindow', 'Display in new window'), ('sidebar', 'Display in existing window with sidebar'), ('noSidebar', 'Display in existing window without sidebar'), ('replace', 'Display in existing window without sidebar or header'), ('onClickJavaScript', 'Execute JavaScript')])
    height = models.IntegerField(db_column='Height', verbose_name='Height (in pixels)', blank=True, null=True)
    width = models.IntegerField(db_column='Width', verbose_name='Width (in pixels)', blank=True, null=True)
    showslocation = models.BooleanField(db_column='ShowsLocation', verbose_name='Show Address Bar')
    hasscrollbars = models.BooleanField(db_column='HasScrollbars', verbose_name='Show Scrollbars')
    hastoolbar = models.BooleanField(db_column='HasToolbar', verbose_name='Show Toolbars')
    hasmenubar = models.BooleanField(db_column='HasMenubar', verbose_name='Show Menu Bar')
    showsstatus = models.BooleanField(db_column='ShowsStatus', verbose_name='Show Status Bar')
    isresizable = models.BooleanField(db_column='IsResizable', verbose_name='Resizeable')
    position = models.CharField(db_column='Position', max_length=40, verbose_name='Window Position', choices=[('fullScreen', None), ('none', None), ('topLeft', None)], blank=True)
    scontrolid = models.ForeignKey(Apexpage, db_column='ScontrolId', blank=True, null=True)
    masterlabel = models.CharField(db_column='MasterLabel', max_length=240, verbose_name='Label', blank=True)
    description = models.TextField(db_column='Description', verbose_name='Description', blank=True)
    displaytype = models.CharField(db_column='DisplayType', max_length=40, verbose_name='Display Type', choices=[('L', 'Detail Page Link'), ('B', 'Detail Page Button'), ('M', 'List Button')])
    requirerowselection = models.BooleanField(db_column='RequireRowSelection', verbose_name='Require Row Selection')
    namespaceprefix = models.CharField(db_column='NamespacePrefix', max_length=15, verbose_name='Namespace Prefix', sf_read_only=models.READ_ONLY, blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='weblink_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='weblink_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'WebLink'
        verbose_name = 'Custom Button or Link'
        verbose_name_plural = 'Custom Buttons or Links'
        # keyPrefix = '00b'

class BdeBatchDataEntryConfigC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name', blank=True)
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='bdebatchdataentryconfigc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='bdebatchdataentryconfigc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    bde_has_npsp_c = models.BooleanField(db_column='bde__Has_NPSP__c', verbose_name='Has NPSP', help_text='This value is automatically created, and automatically configures the Batch Entry tool to work with the Nonprofit Starter Pack for donation entries.')
    bde_opportunity_naming_c = models.BooleanField(db_column='bde__Opportunity_Naming__c', verbose_name='Opportunity Naming', help_text='This setting automatically generates the record name for batch entered Opportunity records based on the value of the entered fields.')
    bde_allow_blank_opportunity_names_c = models.BooleanField(db_column='bde__Allow_Blank_Opportunity_Names__c', verbose_name='Allow Blank Opportunity Names', help_text='If set, then Batch Data Entry will never name Opportunities, even if they are blank (not included on page).')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'bde__Batch_Data_Entry_Config__c'
        verbose_name = 'Batch Data Entry Config'
        verbose_name_plural = 'Batch Data Entry Config'
        # keyPrefix = 'a07'

class BdeBatchHistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('BdeBatchC', sf_read_only=models.READ_ONLY, db_column='ParentId')
    createdby = models.ForeignKey(Selfserviceuser, sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('bde__Batch_Status__c', None), ('bde__Description__c', None), ('bde__Number_of_Items__c', None), ('bde__Object_Name__c', None), ('created', 'Created.'), ('feedEvent', 'Feed event'), ('Name', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'bde__Batch__History'
        verbose_name = 'History: Batch'
        verbose_name_plural = 'History: Batch'
        # keyPrefix = 'None'

class BdeBatchC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Batch Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='bdebatchc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='bdebatchc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    bde_batch_status_c = models.CharField(db_column='bde__Batch_Status__c', max_length=255, verbose_name='Batch Status', choices=[('In Progress', 'In Progress'), ('Complete', 'Complete')], blank=True)
    bde_description_c = models.TextField(db_column='bde__Description__c', verbose_name='Description', blank=True)
    bde_number_of_items_c = models.DecimalField(db_column='bde__Number_of_Items__c', max_digits=4, decimal_places=0, verbose_name='Number of Items', blank=True, null=True)
    bde_object_name_c = models.CharField(db_column='bde__Object_Name__c', max_length=100, verbose_name='Object Name', help_text='API Name of the object of which this is a batch.')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'bde__Batch__c'
        verbose_name = 'Batch'
        verbose_name_plural = 'Batches'
        # keyPrefix = 'a09'

class BdeBulkdataentryC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='bdebulkdataentryc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='bdebulkdataentryc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    bde_object_entry_field_set_c = models.CharField(db_column='bde__Object_Entry_Field_Set__c', max_length=255, verbose_name='Object Entry Field Set', blank=True)
    bde_object_list_field_set_c = models.CharField(db_column='bde__Object_List_Field_Set__c', max_length=255, verbose_name='Object List Field Set', blank=True)
    bde_save_batch_c = models.BooleanField(db_column='bde__Save_Batch__c', verbose_name='Save Batch')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'bde__BulkDataEntry__c'
        verbose_name = 'BulkDataEntry'
        verbose_name_plural = 'BulkDataEntry'
        # keyPrefix = 'a0A'

class Npe01ContactsAndOrgsSettingsC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name', blank=True)
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe01contactsandorgssettingsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe01contactsandorgssettingsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe01_account_processor_c = models.CharField(db_column='npe01__Account_Processor__c', max_length=255, verbose_name='Account Processor', help_text='Setting for the Account model. Should be "One-to-one" or "Individual". Replaces the custom field Contact.SystemAccountProcessor__c', blank=True)
    npe01_disable_account_model_trigger_c = models.BooleanField(db_column='npe01__Disable_Account_Model_Trigger__c', verbose_name='Disable Account Model Trigger', help_text='Check this to turn off the Account Model trigger. Accounts will no longer be automatically created for Contacts. Only use this if you understand the ramifications. Turning off the account model could get your data into an inconsistent state.')
    npe01_enable_opportunity_contact_role_trigger_c = models.BooleanField(db_column='npe01__Enable_Opportunity_Contact_Role_Trigger__c', verbose_name='Enable Opportunity Contact Role Trigger', help_text='Check this to turn on the automatic creation of Opportunity Contact Roles for newly created Opportunities in the One-to-One model.')
    npe01_opportunity_contact_role_default_role_c = models.CharField(db_column='npe01__Opportunity_Contact_Role_Default_role__c', max_length=255, verbose_name='Opportunity Contact Role Default role', help_text='Default role for the primary Opportunity Contact Role', blank=True)
    npe01_disable_individualaccounts_trigger_c = models.BooleanField(db_column='npe01__DISABLE_IndividualAccounts_trigger__c', verbose_name='DISABLE_IndividualAccounts_trigger', help_text='!!WARNING!!\nDISABLES the IndividualAccounts.trigger (Contact, before i/u, after i/u/d)\n- checking this box will disable a trigger. This can cause erratic and unpredictable behavior in your NPSP. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npe01_disable_opportunityaccount_trigger_c = models.BooleanField(db_column='npe01__DISABLE_OpportunityAccount_trigger__c', verbose_name='DISABLE_OpportunityAccount_trigger', help_text='!!WARNING!!\nDISABLES the OpportunityAccount.trigger (Opportunity, before insert)\n- checking this box will disable a trigger. This can cause erratic and unpredictable behavior in your NPSP. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npe01_disable_opportunitycontactroles_trigger_c = models.BooleanField(db_column='npe01__DISABLE_OpportunityContactRoles_trigger__c', verbose_name='DISABLE_OpportunityContactRoles_trigger', help_text='!!WARNING!!\nDISABLES the OpportunityContactRoles.trigger (Opportunity, after insert)\n- checking this box will disable a trigger. This can cause erratic and unpredictable behavior in your NPSP. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npe01_disable_opportunitypayments_trigger_c = models.BooleanField(db_column='npe01__DISABLE_OpportunityPayments_trigger__c', verbose_name='DISABLE_OpportunityPayments_trigger', help_text='!!WARNING!!\nDISABLES the OpportunityPayments.trigger (Opportunity, after insert, after update)\n- checking this box will disable a trigger. This can cause erratic and unpredictable behavior in your NPSP. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npe01_default_opp_on_convert_c = models.BooleanField(db_column='npe01__Default_Opp_on_Convert__c', verbose_name='Default Opp on Convert')
    npe01_enable_update_check_c = models.BooleanField(db_column='npe01__Enable_Update_Check__c', verbose_name='Enable Update Check', help_text='Controls if the package automatically checks for new updates and versions.')
    npe01_has_package_update_c = models.CharField(db_column='npe01__Has_Package_Update__c', max_length=40, verbose_name='Has Package Update', blank=True)
    npe01_last_update_check_c = models.DateTimeField(db_column='npe01__Last_Update_Check__c', verbose_name='Last Update Check', help_text='The date/time of the last callout to check for new versions of the NPSP packages.', blank=True, null=True)
    npe01_max_package_version_c = models.CharField(db_column='npe01__Max_Package_Version__c', max_length=10, verbose_name='Max Package Version', blank=True)
    npe01_one_to_one_recordtypeid_c = models.CharField(db_column='npe01__One_to_One_RecordTypeID__c', max_length=18, verbose_name='One-to-One RecordTypeID', help_text="The ID of the record type to be used for 1x1 accounts. If none is selected, the account will default to the user's default account selection.", blank=True)
    npe01_package_update_url_c = models.URLField(db_column='npe01__Package_Update_URL__c', verbose_name='Package Update URL', blank=True, null=True)
    npe01_payments_enabled_c = models.BooleanField(db_column='npe01__Payments_Enabled__c', verbose_name='Payments Enabled', help_text='Enables automatic payments for new Opportunities/Donations.')
    npe01_update_check_interval_c = models.DecimalField(db_column='npe01__Update_Check_Interval__c', max_digits=18, decimal_places=0, verbose_name='Update Check Interval', help_text='The number of days between NPSP callouts to check for new versions of this package. The default value is 90 days.', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe01__Contacts_And_Orgs_Settings__c'
        verbose_name = 'Contacts And Orgs Settings'
        verbose_name_plural = 'Contacts And Orgs Settings'
        # keyPrefix = 'a01'

class Npe01OpppaymentC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Payment Number', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe01opppaymentc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe01opppaymentc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe01_opportunity_c = models.ForeignKey(Opportunity, sf_read_only=models.NOT_UPDATEABLE, db_column='npe01__Opportunity__c')
    npe01_check_reference_number_c = models.CharField(db_column='npe01__Check_Reference_Number__c', max_length=255, verbose_name='Check/Reference Number', blank=True)
    npe01_custom_payment_field_c = models.CharField(db_column='npe01__Custom_Payment_Field__c', max_length=15, verbose_name='Custom Payment Field', blank=True)
    npe01_paid_c = models.BooleanField(db_column='npe01__Paid__c', verbose_name='Paid')
    npe01_payment_amount_c = models.DecimalField(db_column='npe01__Payment_Amount__c', max_digits=14, decimal_places=2, verbose_name='Payment Amount', blank=True, null=True)
    npe01_payment_date_c = models.DateField(db_column='npe01__Payment_Date__c', verbose_name='Payment Date', blank=True, null=True)
    npe01_payment_method_c = models.CharField(db_column='npe01__Payment_Method__c', max_length=255, verbose_name='Payment Method', choices=[('Cash', 'Cash'), ('Check', 'Check'), ('Credit Card', 'Credit Card')], blank=True)
    npe01_scheduled_date_c = models.DateField(db_column='npe01__Scheduled_Date__c', verbose_name='Scheduled Date', blank=True, null=True)
    npe01_written_off_c = models.BooleanField(db_column='npe01__Written_Off__c', verbose_name='Written Off')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe01__OppPayment__c'
        verbose_name = 'Payment'
        verbose_name_plural = 'Payments'
        # keyPrefix = 'a05'

class Npe01PaymentFieldMappingSettingsC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe01paymentfieldmappingsettingsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe01paymentfieldmappingsettingsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe01_opportunity_field_c = models.CharField(db_column='npe01__Opportunity_Field__c', max_length=255, verbose_name='Opportunity Field')
    npe01_payment_field_c = models.CharField(db_column='npe01__Payment_Field__c', max_length=255, verbose_name='Payment Field')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe01__Payment_Field_Mapping_Settings__c'
        verbose_name = 'Payment Field Mapping Settings'
        verbose_name_plural = 'Payment Field Mapping Settings'
        # keyPrefix = 'a06'

class Npe03CustomFieldMappingC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe03customfieldmappingc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe03customfieldmappingc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe03_opportunity_field_c = models.CharField(db_column='npe03__Opportunity_Field__c', max_length=255, verbose_name='Opportunity Field', blank=True)
    npe03_recurring_donation_field_c = models.CharField(db_column='npe03__Recurring_Donation_Field__c', max_length=255, verbose_name='Recurring Donation Field', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe03__Custom_Field_Mapping__c'
        verbose_name = 'Custom Field Mapping'
        verbose_name_plural = 'Custom Field Mapping'
        # keyPrefix = 'a0D'

class Npe03CustomInstallmentSettingsC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe03custominstallmentsettingsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe03custominstallmentsettingsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe03_increment_c = models.CharField(db_column='npe03__Increment__c', max_length=50, verbose_name='Increment')
    npe03_value_c = models.DecimalField(db_column='npe03__Value__c', max_digits=18, decimal_places=0, verbose_name='Value')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe03__Custom_Installment_Settings__c'
        verbose_name = 'Custom Installment Settings'
        verbose_name_plural = 'Custom Installment Settings'
        # keyPrefix = 'a0E'

class Npe03RecurringDonationHistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('Npe03RecurringDonationC', sf_read_only=models.READ_ONLY, db_column='ParentId')
    createdby = models.ForeignKey(Selfserviceuser, sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('Name', None), ('npe03__Amount__c', None), ('npe03__Contact__c', None), ('npe03__Date_Established__c', None), ('npe03__Installment_Period__c', None), ('npe03__Installments__c', None), ('npe03__Last_Payment_Date__c', None), ('npe03__Next_Payment_Date__c', None), ('npe03__Open_Ended_Status__c', None), ('npe03__Organization__c', None), ('npe03__Paid_Amount__c', None), ('npe03__Recurring_Donation_Campaign__c', None), ('npe03__Schedule_Type__c', None), ('npe03__Total_Paid_Installments__c', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe03__Recurring_Donation__History'
        verbose_name = 'History: Recurring Donations'
        verbose_name_plural = 'History: Recurring Donations'
        # keyPrefix = 'None'

class Npe03RecurringDonationC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Recurring Donation Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe03recurringdonationc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe03recurringdonationc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe03_amount_c = models.DecimalField(db_column='npe03__Amount__c', max_digits=18, decimal_places=2, verbose_name='Amount', blank=True, null=True)
    npe03_contact_c = models.ForeignKey(Contact, db_column='npe03__Contact__c', blank=True, null=True)
    npe03_date_established_c = models.DateField(db_column='npe03__Date_Established__c', verbose_name='Date Established', blank=True, null=True)
    npe03_installment_amount_c = models.DecimalField(db_column='npe03__Installment_Amount__c', max_digits=18, decimal_places=2, verbose_name='Installment Amount', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe03_installment_period_c = models.CharField(db_column='npe03__Installment_Period__c', max_length=255, verbose_name='Installment Period', choices=[('Monthly', 'Monthly'), ('Quarterly', 'Quarterly'), ('Yearly', 'Yearly'), ('Weekly', 'Weekly'), ('1st and 15th', '1st and 15th')], blank=True)
    npe03_installments_c = models.DecimalField(db_column='npe03__Installments__c', max_digits=18, decimal_places=0, verbose_name='Installments', blank=True, null=True)
    npe03_organization_c = models.ForeignKey(Account, db_column='npe03__Organization__c', blank=True, null=True)
    npe03_schedule_type_c = models.CharField(db_column='npe03__Schedule_Type__c', max_length=255, verbose_name='Schedule Type', choices=[('Multiply By', 'Multiply By'), ('Divide By', 'Divide By')], blank=True)
    npe03_total_c = models.DecimalField(db_column='npe03__Total__c', max_digits=18, decimal_places=2, verbose_name='Total', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npe03_donor_name_c = models.CharField(db_column='npe03__Donor_Name__c', max_length=1300, verbose_name='Donor Name', sf_read_only=models.READ_ONLY, blank=True)
    npe03_recurring_donation_campaign_c = models.ForeignKey(Campaign, db_column='npe03__Recurring_Donation_Campaign__c', blank=True, null=True)
    npe03_last_payment_date_c = models.DateField(db_column='npe03__Last_Payment_Date__c', verbose_name='Last Donation Date', help_text='Date of the last payment for this Recurring Donation', blank=True, null=True)
    npe03_next_payment_date_c = models.DateField(db_column='npe03__Next_Payment_Date__c', verbose_name='Next Donation Date', help_text="Holds the date of the next recurring payment.  Manually editing this field will recalculate all future opportunity's close dates based on the scheduled defined.", blank=True, null=True)
    npe03_open_ended_status_c = models.CharField(db_column='npe03__Open_Ended_Status__c', max_length=255, verbose_name='Open Ended Status', choices=[('Open', 'Open'), ('Closed', 'Closed'), ('None', 'None')], blank=True)
    npe03_paid_amount_c = models.DecimalField(db_column='npe03__Paid_Amount__c', max_digits=18, decimal_places=2, verbose_name='Paid Amount', help_text='Total Amount paid on this Recurring Donation', blank=True, null=True)
    npe03_total_paid_installments_c = models.DecimalField(db_column='npe03__Total_Paid_Installments__c', max_digits=18, decimal_places=0, verbose_name='Total Paid Installments', help_text='Total number of installments paid on this open-ended recurring donation.', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe03__Recurring_Donation__c'
        verbose_name = 'Recurring Donations'
        verbose_name_plural = 'Recurring Donations'
        # keyPrefix = 'a08'

class Npe03RecurringDonationsErrorQueueC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe03recurringdonationserrorqueuec_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe03recurringdonationserrorqueuec_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe03_error_message_c = models.CharField(db_column='npe03__Error_Message__c', max_length=255, verbose_name='Error Message', help_text='Error message for the operation on the associated Recurring Donation record')
    npe03_recurring_donation_id_c = models.CharField(db_column='npe03__Recurring_Donation_ID__c', max_length=18, verbose_name='Recurring_Donation_ID', help_text='ID of the affected Recurring Donation record')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe03__Recurring_Donations_Error_Queue__c'
        verbose_name = 'Recurring Donations Error Queue'
        verbose_name_plural = 'Recurring Donations Error Queue'
        # keyPrefix = 'a0F'

class Npe03RecurringDonationsSettingsC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name', blank=True)
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe03recurringdonationssettingsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe03recurringdonationssettingsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe03_add_campaign_to_all_opportunites_c = models.BooleanField(db_column='npe03__Add_Campaign_to_All_Opportunites__c', verbose_name='Add Campaign to All Opportunites', help_text='If selected, all Opportunities for Recurring Donations will use the Campaign on the Recurring Donation. Otherwise, only the first Opportunity will have the Campaign.')
    npe03_disable_donations_trigger_c = models.BooleanField(db_column='npe03__DISABLE_Donations_trigger__c', verbose_name='DISABLE_Donations_trigger', help_text='!!WARNING!!\nDISABLES the Donations.trigger  (Opportunity, before insert, before update, \n- checking this box will disable a trigger.  This can cause erratic and unpredictable behavior in your NPSP. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npe03_disable_recurringdonations_trigger_c = models.BooleanField(db_column='npe03__DISABLE_RecurringDonations_trigger__c', verbose_name='DISABLE_RecurringDonations_trigger', help_text='!!WARNING!!\nDISABLES the RecurringDonations.trigger (Recurring_Donations__c, ALL).\n- checking this box will disable a trigger.  This can cause erratic and unpredictable behavior in your NPSP. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npe03_disable_nightly_job_c = models.BooleanField(db_column='npe03__Disable_Nightly_Job__c', verbose_name='Disable Nightly Job', help_text='Prevents the scheduling of the nightly update to Recurring Donations. Any existing scheduled job will need to be removed through Setup->Monitoring->Scheduled Jobs')
    npe03_enable_update_check_c = models.BooleanField(db_column='npe03__Enable_Update_Check__c', verbose_name='Enable Update Check', help_text='Controls if the package automatically checks for new updates and versions.')
    npe03_error_email_notifications_c = models.CharField(db_column='npe03__Error_Email_Notifications__c', max_length=255, verbose_name='Error Email Notifications', help_text='The system administrator or public group all error notification emails are sent to.', blank=True)
    npe03_has_package_update_c = models.CharField(db_column='npe03__Has_Package_Update__c', max_length=40, verbose_name='Has Package Update', blank=True)
    npe03_last_batch_run_c = models.DateTimeField(db_column='npe03__Last_Batch_Run__c', verbose_name='Last Batch Run', help_text='The date and time of the last batch update of Recurring Donations.', blank=True, null=True)
    npe03_last_update_check_c = models.DateTimeField(db_column='npe03__Last_Update_Check__c', verbose_name='Last Update Check', blank=True, null=True)
    npe03_max_package_version_c = models.CharField(db_column='npe03__Max_Package_Version__c', max_length=12, verbose_name='Max Package Version', blank=True)
    npe03_maximum_donations_c = models.DecimalField(db_column='npe03__Maximum_Donations__c', max_digits=18, decimal_places=0, verbose_name='Maximum Donations', help_text='Restricts the total number of donations created for non-open-ended Recurring Donations. Default is 50.  Larger values may result in DML errors.', blank=True, null=True)
    npe03_nightly_update_id_c = models.CharField(db_column='npe03__Nightly_Update_ID__c', max_length=18, verbose_name='Nightly Update ID', blank=True)
    npe03_number_of_failures_c = models.DecimalField(db_column='npe03__Number_of_Failures__c', max_digits=18, decimal_places=0, verbose_name='Number of Failures', help_text='Number of Recurring Donations unsuccessfully updated in the last batch operation.', blank=True, null=True)
    npe03_number_of_successes_c = models.DecimalField(db_column='npe03__Number_of_Successes__c', max_digits=18, decimal_places=0, verbose_name='Number of Successes', help_text='Number of Recurring Donations successfully updated in the last batch run.', blank=True, null=True)
    npe03_open_opportunity_behavior_c = models.CharField(db_column='npe03__Open_Opportunity_Behavior__c', max_length=50, verbose_name='Open Opportunity Behavior', help_text='Determines the behavior of any remaining open Opportunities when an open-ended Recurring Donation is moved to a closed status.', blank=True)
    npe03_opportunity_forecast_months_c = models.DecimalField(db_column='npe03__Opportunity_Forecast_Months__c', max_digits=18, decimal_places=0, verbose_name='Opportunity Forecast Months', help_text='Number of months from today worth of open Opportunities to be created when using open-ended Recurring Donations. WARNING: Reducing this value will result in extra Opportunities being deleted.  Increasing it will launch a batch process to add Opportunities', blank=True, null=True)
    npe03_package_update_url_c = models.URLField(db_column='npe03__Package_Update_URL__c', verbose_name='Package Update URL', blank=True, null=True)
    npe03_record_type_c = models.CharField(db_column='npe03__Record_Type__c', max_length=18, verbose_name='Record Type', help_text='Record type used when Recurring Donation Opportunities are created.', blank=True)
    npe03_update_check_interval_c = models.DecimalField(db_column='npe03__Update_Check_Interval__c', max_digits=18, decimal_places=0, verbose_name='Update Check Interval', help_text='The number of days between NPSP callouts to check for new versions of this package. The default value is 90 days.', blank=True, null=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe03__Recurring_Donations_Settings__c'
        verbose_name = 'Recurring Donations Settings'
        verbose_name_plural = 'Recurring Donations Settings'
        # keyPrefix = 'a0G'

class Npe4RelationshipAutoCreateC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe4relationshipautocreatec_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe4relationshipautocreatec_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe4_campaign_types_c = models.TextField(db_column='npe4__Campaign_Types__c', verbose_name='Campaign Types', help_text='Eligible Campaign types for this Campaign Member auto-create. (Will be blank for Contact auto-create)', blank=True)
    npe4_field_c = models.CharField(db_column='npe4__Field__c', max_length=255, verbose_name='Field', help_text='The field insert or update that triggers the creation of this Relationship', blank=True)
    npe4_object_c = models.CharField(db_column='npe4__Object__c', max_length=50, verbose_name='Object', help_text='The object this Auto-Relationship is associated with', blank=True)
    npe4_relationship_type_c = models.CharField(db_column='npe4__Relationship_Type__c', max_length=255, verbose_name='Relationship Type', help_text='The Relationship type to be created between the base object and the lookup object.  The lookup object will receive the reciprocal Relationship, if one is available.', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe4__Relationship_Auto_Create__c'
        verbose_name = 'Relationship Auto-Create'
        verbose_name_plural = 'Relationship Auto-Create'
        # keyPrefix = 'a0I'

class Npe4RelationshipErrorC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Relationship Error Name', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe4relationshiperrorc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe4relationshiperrorc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe4_error_date_time_c = models.DateTimeField(db_column='npe4__Error_Date_Time__c', verbose_name='Error Date/Time', help_text='Date & time the error occurred', blank=True, null=True)
    npe4_error_record_link_c = models.URLField(db_column='npe4__Error_Record_Link__c', verbose_name='Error Record Link', help_text='A link to the record which caused the error, if available.', blank=True, null=True)
    npe4_error_stack_trace_c = models.TextField(db_column='npe4__Error_Stack_Trace__c', verbose_name='Error Stack Trace', help_text='Stack trace for the thrown error, if available at run time.', blank=True)
    npe4_error_type_c = models.TextField(db_column='npe4__Error_Type__c', verbose_name='Error Type', help_text='Type of error that occurred', blank=True)
    npe4_full_error_message_c = models.TextField(db_column='npe4__Full_Error_Message__c', verbose_name='Full Error Message', help_text='Full text of the error message', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe4__Relationship_Error__c'
        verbose_name = 'Relationship Error'
        verbose_name_plural = 'Relationship Errors'
        # keyPrefix = 'a0J'

class Npe4RelationshipLookupC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe4relationshiplookupc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe4relationshiplookupc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe4_active_c = models.BooleanField(db_column='npe4__Active__c', verbose_name='Active', help_text='Indicates if this reciprocal lookup is active.')
    npe4_female_c = models.CharField(db_column='npe4__Female__c', max_length=255, verbose_name='Female', help_text="The value used if the Contact's gender field matches the values in the Female Custom Label or the Contact's salutation indicates gender.", blank=True)
    npe4_male_c = models.CharField(db_column='npe4__Male__c', max_length=255, verbose_name='Male', help_text="The value used if the Contact's gender field matches the values in the Male Custom Label or the Contact's salutation indicates gender.", blank=True)
    npe4_neutral_c = models.CharField(db_column='npe4__Neutral__c', max_length=255, verbose_name='Neutral', help_text="The value used if the Contact's gender field does not match either the Male or Female Custom Labels, and the Contact's salutation does not infer gender.", blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe4__Relationship_Lookup__c'
        verbose_name = 'Relationship Lookup'
        verbose_name_plural = 'Relationship Lookup'
        # keyPrefix = 'a0K'

class Npe4RelationshipSettingsC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name', blank=True)
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe4relationshipsettingsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe4relationshipsettingsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe4_allow_autocreated_duplicates_c = models.BooleanField(db_column='npe4__Allow_AutoCreated_Duplicates__c', verbose_name='Allow Auto-Created Duplicates', help_text='Auto-created Relationships are auto-deduplicated to prevent duplicate Relationship records from being created between two Contacts.  Check this box to disable this behavior & allow multiple Relationships of the same Type to be created between two Contacts')
    npe4_disable_relationshipcm_trigger_c = models.BooleanField(db_column='npe4__DISABLE_RelationshipCM_trigger__c', verbose_name='DISABLE_RelationshipCM_trigger', help_text='DISABLES the RelationshipCampaignMembers.trigger (CampaignMember, after insert, after update) \n- checking this box will disable a trigger. This can cause erratic and unpredictable behavior in your NPSP. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npe4_disable_relationshipcontacts_trigger_c = models.BooleanField(db_column='npe4__DISABLE_RelationshipContacts_trigger__c', verbose_name='DISABLE_RelationshipContacts_trigger', help_text='DISABLES the RelationshipContacts.trigger (Contact, after delete)\n- checking this box will disable a trigger.  This can cause erratic and unpredictable behavior in your NPSP.  FOR ADVANCED CONSULTANT AND DEVELOPERS ONLY.')
    npe4_disable_relationships_trigger_c = models.BooleanField(db_column='npe4__DISABLE_Relationships_trigger__c', verbose_name='DISABLE_Relationships_trigger', help_text='DISABLES the Relationships.trigger (Relationship__c, before insert, before update, before delete, after insert, after update, after delete, after undelete)\n- checking this box will disable a trigger. This can cause erratic and unpredictable behavior in y')
    npe4_force_synchronous_auto_create_c = models.BooleanField(db_column='npe4__Force_Synchronous_Auto_Create__c', verbose_name='Force Synchronous Auto Create', help_text='Forces the Relationships package to synchronously process the auto creation of relationships for auto-create functionality')
    npe4_gender_field_c = models.CharField(db_column='npe4__Gender_Field__c', max_length=255, verbose_name='Gender Field', help_text='The custom field used to define the gender of a Contact for determining reciprocal relationships', blank=True)
    npe4_reciprocal_method_c = models.CharField(db_column='npe4__Reciprocal_Method__c', max_length=255, verbose_name='Reciprocal Method', help_text='Determines method used to generate the reciprocal relationship.  Either List Setting which uses custom settings by gender (see Reciprocal Relationships tab), or Value Inversion, which inverts the type if appropriate ("Parent-Child" to "Child-Parent")', blank=True)
    npe4_relationship_name_field_id_c = models.CharField(db_column='npe4__Relationship_Name_Field_Id__c', max_length=25, verbose_name='Relationship Name Field Id', help_text='Populating this value will allow the field to pre-populate when creating new Relationships from the Relationship Viewer (see description for more information)', blank=True)
    npe4_relationship_name_id_field_id_c = models.CharField(db_column='npe4__Relationship_Name_Id_Field_Id__c', max_length=25, verbose_name='Relationship Name Id Field Id', help_text='Populating this value will allow the field to pre-populate when creating new Relationships from the Relationship Viewer (see description for more information)', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe4__Relationship_Settings__c'
        verbose_name = 'Relationship Settings'
        verbose_name_plural = 'Relationship Settings'
        # keyPrefix = 'a0L'

class Npe4RelationshipHistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('Npe4RelationshipC', sf_read_only=models.READ_ONLY, db_column='ParentId')
    createdby = models.ForeignKey(Selfserviceuser, sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('Name', None), ('npe4__Contact__c', None), ('npe4__Description__c', None), ('npe4__ReciprocalRelationship__c', None), ('npe4__RelatedContact__c', None), ('npe4__Status__c', None), ('npe4__SYSTEM_SystemCreated__c', None), ('npe4__Type__c', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe4__Relationship__History'
        verbose_name = 'History: Relationship'
        verbose_name_plural = 'History: Relationship'
        # keyPrefix = 'None'

class Npe4RelationshipC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Relationship Number', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe4relationshipc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe4relationshipc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe4_contact_c = models.ForeignKey(Contact, related_name='npe4relationshipc_npe4contactc_set', db_column='npe4__Contact__c', sf_read_only=models.NOT_UPDATEABLE)
    npe4_description_c = models.TextField(db_column='npe4__Description__c', verbose_name='Description', blank=True)
    npe4_reciprocalrelationship_c = models.ForeignKey('self', db_column='npe4__ReciprocalRelationship__c', blank=True, null=True)
    npe4_relatedcontact_c = models.ForeignKey(Contact, related_name='npe4relationshipc_npe4relatedcontactc_set', db_column='npe4__RelatedContact__c', blank=True, null=True)
    npe4_status_c = models.CharField(db_column='npe4__Status__c', max_length=255, verbose_name='Status', choices=[('Current', 'Current'), ('Former', 'Former')], blank=True)
    npe4_type_c = models.CharField(db_column='npe4__Type__c', max_length=255, verbose_name='Type', choices=[('Friend', 'Friend'), ('Family', 'Family'), ('Coworker', 'Coworker'), ('Acquaintance', 'Acquaintance')], blank=True)
    npe4_relationship_explanation_c = models.CharField(db_column='npe4__Relationship_Explanation__c', max_length=1300, verbose_name='Relationship Explanation', sf_read_only=models.READ_ONLY, help_text='Text formula that constructs a sentence explaining the relationship between the two Contacts', blank=True)
    npe4_system_systemcreated_c = models.BooleanField(db_column='npe4__SYSTEM_SystemCreated__c', verbose_name='_SYSTEM: SystemCreated', help_text='System field that indicates if this Relationship was created automatically as the reciprocal to another Relationships.')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe4__Relationship__c'
        verbose_name = 'Relationship'
        verbose_name_plural = 'Relationships'
        # keyPrefix = 'a0B'

class Npe5AffiliationHistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('Npe5AffiliationC', sf_read_only=models.READ_ONLY, db_column='ParentId')
    createdby = models.ForeignKey(Selfserviceuser, sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('Name', None), ('npe5__Contact__c', None), ('npe5__Description__c', None), ('npe5__EndDate__c', None), ('npe5__Organization__c', None), ('npe5__Role__c', None), ('npe5__StartDate__c', None), ('npe5__Status__c', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('Primary_Group__c', None), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe5__Affiliation__History'
        verbose_name = 'History: Affiliation'
        verbose_name_plural = 'History: Affiliation'
        # keyPrefix = 'None'

class Npe5AffiliationC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Affiliation Name', sf_read_only=models.READ_ONLY)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe5affiliationc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe5affiliationc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe5_organization_c = models.ForeignKey(Account, sf_read_only=models.NOT_UPDATEABLE, db_column='npe5__Organization__c')
    npe5_contact_c = models.ForeignKey(Contact, sf_read_only=models.NOT_UPDATEABLE, db_column='npe5__Contact__c')
    npe5_description_c = models.TextField(db_column='npe5__Description__c', verbose_name='Description', blank=True)
    npe5_enddate_c = models.DateField(db_column='npe5__EndDate__c', verbose_name='End Date', blank=True, null=True)
    npe5_role_c = models.CharField(db_column='npe5__Role__c', max_length=255, verbose_name='Role', blank=True)
    npe5_startdate_c = models.DateField(db_column='npe5__StartDate__c', verbose_name='Start Date', blank=True, null=True)
    npe5_status_c = models.CharField(db_column='npe5__Status__c', max_length=255, verbose_name='Status', choices=[('Current', 'Current'), ('Former', 'Former')], blank=True)
    primary_group_c = models.BooleanField(db_column='Primary_Group__c', verbose_name='Primary Group')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe5__Affiliation__c'
        verbose_name = 'Affiliation'
        verbose_name_plural = 'Affiliations'
        # keyPrefix = 'a0C'

class Npe5AffiliationsSettingsC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name', blank=True)
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npe5affiliationssettingsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npe5affiliationssettingsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npe5_automatic_affiliation_creation_turned_on_c = models.BooleanField(db_column='npe5__Automatic_Affiliation_Creation_Turned_On__c', verbose_name='Automatic Affiliation Creation Turned On', help_text='Create Affiliations for all Contacts connected to Accounts')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npe5__Affiliations_Settings__c'
        verbose_name = 'Affiliations Settings'
        verbose_name_plural = 'Affiliations Settings'
        # keyPrefix = 'a03'

class Npo02HouseholdHistory(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    parent = models.ForeignKey('Npo02HouseholdC', sf_read_only=models.READ_ONLY, db_column='ParentId')
    createdby = models.ForeignKey(Selfserviceuser, sf_read_only=models.READ_ONLY, db_column='CreatedById')
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    field = models.CharField(db_column='Field', max_length=255, verbose_name='Changed Field', sf_read_only=models.READ_ONLY, choices=[('created', 'Created.'), ('feedEvent', 'Feed event'), ('Name', None), ('npo02__Addressee__c', None), ('npo02__Always_Anonymous__c', None), ('npo02__AverageAmount__c', None), ('npo02__Best_Gift_Year__c', None), ('npo02__Best_Gift_Year_Total__c', None), ('npo02__FirstCloseDate__c', None), ('npo02__Formal_Greeting__c', None), ('npo02__Household_ID__c', None), ('npo02__HouseholdEmail__c', None), ('npo02__HouseholdPhone__c', None), ('npo02__Informal_Greeting__c', None), ('npo02__LargestAmount__c', None), ('npo02__LastCloseDate__c', None), ('npo02__LastMembershipAmount__c', None), ('npo02__LastMembershipDate__c', None), ('npo02__LastMembershipLevel__c', None), ('npo02__LastMembershipOrigin__c', None), ('npo02__LastOppAmount__c', None), ('npo02__MailingCity__c', None), ('npo02__MailingCountry__c', None), ('npo02__MailingPostalCode__c', None), ('npo02__MailingState__c', None), ('npo02__MailingStreet__c', None), ('npo02__MembershipEndDate__c', None), ('npo02__MembershipJoinDate__c', None), ('npo02__NumberOfClosedOpps__c', None), ('npo02__NumberOfMembershipOpps__c', None), ('npo02__OppAmount2YearsAgo__c', None), ('npo02__OppAmountLastNDays__c', None), ('npo02__OppAmountLastYear__c', None), ('npo02__OppAmountThisYear__c', None), ('npo02__OppsClosed2YearsAgo__c', None), ('npo02__OppsClosedLastNDays__c', None), ('npo02__OppsClosedLastYear__c', None), ('npo02__OppsClosedThisYear__c', None), ('npo02__SmallestAmount__c', None), ('npo02__SYSTEM_CUSTOM_NAMING__c', None), ('npo02__TotalMembershipOppAmount__c', None), ('npo02__TotalOppAmount__c', None), ('Owner', None), ('ownerAccepted', 'Owner (Accepted)'), ('ownerAssignment', 'Owner (Assignment)'), ('locked', 'Record locked.'), ('unlocked', 'Record unlocked.')])
    oldvalue = models.CharField(db_column='OldValue', max_length=255, verbose_name='Old Value', sf_read_only=models.READ_ONLY, blank=True)
    newvalue = models.CharField(db_column='NewValue', max_length=255, verbose_name='New Value', sf_read_only=models.READ_ONLY, blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npo02__Household__History'
        verbose_name = 'History: Household'
        verbose_name_plural = 'History: Household'
        # keyPrefix = 'None'

class Npo02HouseholdC(models.Model):
    owner = models.ForeignKey(Group, db_column='OwnerId')
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Household Name', blank=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npo02householdc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npo02householdc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    lastactivitydate = models.DateField(db_column='LastActivityDate', verbose_name='Last Activity Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastvieweddate = models.DateTimeField(db_column='LastViewedDate', verbose_name='Last Viewed Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    lastreferenceddate = models.DateTimeField(db_column='LastReferencedDate', verbose_name='Last Referenced Date', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_addressee_c = models.CharField(db_column='npo02__Addressee__c', max_length=255, verbose_name='Addressee', blank=True)
    npo02_always_anonymous_c = models.BooleanField(db_column='npo02__Always_Anonymous__c', verbose_name='Always Anonymous')
    npo02_formula_mailingaddress_c = models.CharField(db_column='npo02__Formula_MailingAddress__c', max_length=1300, verbose_name='Mailing Address', sf_read_only=models.READ_ONLY, blank=True)
    npo02_householdemail_c = models.EmailField(db_column='npo02__HouseholdEmail__c', verbose_name='Household Email', blank=True, null=True)
    npo02_householdphone_c = models.CharField(db_column='npo02__HouseholdPhone__c', max_length=40, verbose_name='Household Phone', blank=True)
    npo02_household_id_c = models.DecimalField(db_column='npo02__Household_ID__c', max_digits=7, decimal_places=0, verbose_name='Household ID', blank=True, null=True)
    npo02_mailingcity_c = models.CharField(db_column='npo02__MailingCity__c', max_length=255, verbose_name='Mailing City', blank=True)
    npo02_mailingcountry_c = models.CharField(db_column='npo02__MailingCountry__c', max_length=255, verbose_name='Mailing Country', blank=True)
    npo02_mailingpostalcode_c = models.CharField(db_column='npo02__MailingPostalCode__c', max_length=10, verbose_name='Mailing Zip/Postal Code', blank=True)
    npo02_mailingstate_c = models.CharField(db_column='npo02__MailingState__c', max_length=255, verbose_name='Mailing State/Province', blank=True)
    npo02_mailingstreet_c = models.CharField(db_column='npo02__MailingStreet__c', max_length=255, verbose_name='Mailing Street', blank=True)
    npo02_averageamount_c = models.DecimalField(db_column='npo02__AverageAmount__c', max_digits=16, decimal_places=2, verbose_name='Average Gift', blank=True, null=True)
    npo02_firstclosedate_c = models.DateField(db_column='npo02__FirstCloseDate__c', verbose_name='First Gift Date', blank=True, null=True)
    npo02_largestamount_c = models.DecimalField(db_column='npo02__LargestAmount__c', max_digits=16, decimal_places=2, verbose_name='Largest Gift', blank=True, null=True)
    npo02_lastclosedate_c = models.DateField(db_column='npo02__LastCloseDate__c', verbose_name='Last Gift Date', blank=True, null=True)
    npo02_lastmembershipamount_c = models.DecimalField(db_column='npo02__LastMembershipAmount__c', max_digits=16, decimal_places=2, verbose_name='Last Membership Amount', blank=True, null=True)
    npo02_lastmembershipdate_c = models.DateField(db_column='npo02__LastMembershipDate__c', verbose_name='Last Membership Date', blank=True, null=True)
    npo02_lastmembershiplevel_c = models.CharField(db_column='npo02__LastMembershipLevel__c', max_length=255, verbose_name='Last Membership Level', blank=True)
    npo02_lastmembershiporigin_c = models.CharField(db_column='npo02__LastMembershipOrigin__c', max_length=255, verbose_name='Last Membership Origin', blank=True)
    npo02_lastoppamount_c = models.DecimalField(db_column='npo02__LastOppAmount__c', max_digits=16, decimal_places=2, verbose_name='Last Gift Amount', blank=True, null=True)
    npo02_membershipenddate_c = models.DateField(db_column='npo02__MembershipEndDate__c', verbose_name='Membership End Date', blank=True, null=True)
    npo02_membershipjoindate_c = models.DateField(db_column='npo02__MembershipJoinDate__c', verbose_name='Membership Join Date', blank=True, null=True)
    npo02_membership_span_c = models.DecimalField(db_column='npo02__Membership_Span__c', max_digits=18, decimal_places=0, verbose_name='Membership Span', sf_read_only=models.READ_ONLY, blank=True, null=True)
    npo02_membership_status_c = models.CharField(db_column='npo02__Membership_Status__c', max_length=1300, verbose_name='Membership Status', sf_read_only=models.READ_ONLY, help_text='Current, expired, or grace period', blank=True)
    npo02_numberofclosedopps_c = models.DecimalField(db_column='npo02__NumberOfClosedOpps__c', max_digits=18, decimal_places=0, verbose_name='Total Number of Gifts', blank=True, null=True)
    npo02_numberofmembershipopps_c = models.DecimalField(db_column='npo02__NumberOfMembershipOpps__c', max_digits=18, decimal_places=0, verbose_name='Number of Memberships', blank=True, null=True)
    npo02_oppamount2yearsago_c = models.DecimalField(db_column='npo02__OppAmount2YearsAgo__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts Two Years Ago', blank=True, null=True)
    npo02_oppamountlastndays_c = models.DecimalField(db_column='npo02__OppAmountLastNDays__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts Last N Days', blank=True, null=True)
    npo02_oppamountlastyear_c = models.DecimalField(db_column='npo02__OppAmountLastYear__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts Last Year', blank=True, null=True)
    npo02_oppamountthisyear_c = models.DecimalField(db_column='npo02__OppAmountThisYear__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts This Year', blank=True, null=True)
    npo02_oppsclosed2yearsago_c = models.DecimalField(db_column='npo02__OppsClosed2YearsAgo__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts Two Years Ago', blank=True, null=True)
    npo02_oppsclosedlastndays_c = models.DecimalField(db_column='npo02__OppsClosedLastNDays__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last N Days', blank=True, null=True)
    npo02_oppsclosedlastyear_c = models.DecimalField(db_column='npo02__OppsClosedLastYear__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts Last Year', blank=True, null=True)
    npo02_oppsclosedthisyear_c = models.DecimalField(db_column='npo02__OppsClosedThisYear__c', max_digits=18, decimal_places=0, verbose_name='Number of Gifts This Year', blank=True, null=True)
    npo02_smallestamount_c = models.DecimalField(db_column='npo02__SmallestAmount__c', max_digits=16, decimal_places=2, verbose_name='Smallest Gift', blank=True, null=True)
    npo02_totalmembershipoppamount_c = models.DecimalField(db_column='npo02__TotalMembershipOppAmount__c', max_digits=16, decimal_places=2, verbose_name='Total Membership Amount', blank=True, null=True)
    npo02_totaloppamount_c = models.DecimalField(db_column='npo02__TotalOppAmount__c', max_digits=16, decimal_places=2, verbose_name='Total Gifts', blank=True, null=True)
    npo02_formal_greeting_c = models.TextField(db_column='npo02__Formal_Greeting__c', verbose_name='Formal Greeting', blank=True)
    npo02_informal_greeting_c = models.TextField(db_column='npo02__Informal_Greeting__c', verbose_name='Informal Greeting', blank=True)
    npo02_system_custom_naming_c = models.CharField(db_column='npo02__SYSTEM_CUSTOM_NAMING__c', max_length=4099, verbose_name='_SYSTEM: CUSTOM NAMING', choices=[('Name', 'Name'), ('Formal_Greeting__c', 'Formal_Greeting__c'), ('Informal_Greeting__c', 'Informal_Greeting__c')], blank=True)
    npo02_best_gift_year_total_c = models.DecimalField(db_column='npo02__Best_Gift_Year_Total__c', max_digits=18, decimal_places=2, verbose_name='Best Gift Year Total', blank=True, null=True)
    npo02_best_gift_year_c = models.CharField(db_column='npo02__Best_Gift_Year__c', max_length=4, verbose_name='Best Gift Year', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npo02__Household__c'
        verbose_name = 'Household'
        verbose_name_plural = 'Households'
        # keyPrefix = 'a00'

class Npo02HouseholdsSettingsC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=80, verbose_name='Name', blank=True)
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npo02householdssettingsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npo02householdssettingsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npo02_always_rollup_to_primary_contact_c = models.BooleanField(db_column='npo02__Always_Rollup_to_Primary_Contact__c', verbose_name='Always Rollup to Primary Contact', help_text='Always rollup to the primary contact, and corresponding household, on an opp. even if the opportunity is not from an individual (i.e. from a company, foundation, etc.)')
    npo02_enable_opp_rollup_triggers_c = models.BooleanField(db_column='npo02__Enable_Opp_Rollup_Triggers__c', verbose_name='Roll Up Opps in Triggers', help_text='Check this box to update opportunity totals whenever opportunities are inserted or updated (as long as capacity allows).')
    npo02_excluded_account_opp_rectypes_c = models.CharField(db_column='npo02__Excluded_Account_Opp_Rectypes__c', max_length=255, verbose_name='Opp Rectypes Excluded for Account Rollup', help_text='Names of opportunity record types to exclude when rolling up account opportunities. Separate record type names with semicolons.', blank=True)
    npo02_excluded_account_opp_types_c = models.CharField(db_column='npo02__Excluded_Account_Opp_Types__c', max_length=255, verbose_name='Opp Types Excluded for Account Rollup', help_text='Values for the opportunity Type field to exclude when rolling up account opportunities. Separate types with semicolons.', blank=True)
    npo02_excluded_contact_opp_rectypes_c = models.CharField(db_column='npo02__Excluded_Contact_Opp_Rectypes__c', max_length=255, verbose_name='Opp Rectypes Excluded for Contact Rollup', help_text='Names of opportunity record types to exclude when rolling up contact opportunities. Separate record type names with semicolons.', blank=True)
    npo02_excluded_contact_opp_types_c = models.CharField(db_column='npo02__Excluded_Contact_Opp_Types__c', max_length=255, verbose_name='Opp Types Excluded for Contact Rollup', help_text='Values for the opportunity Type field to exclude when rolling up contact opportunities. Separate types with semicolons.', blank=True)
    npo02_household_contact_roles_on_c = models.BooleanField(db_column='npo02__Household_Contact_Roles_On__c', verbose_name='Household Contact Roles On', help_text='Check this field to create automatic Contact Roles for Household members of the Primary Contact')
    npo02_household_member_contact_role_c = models.CharField(db_column='npo02__Household_Member_Contact_Role__c', max_length=255, verbose_name='Household Member Contact Role', help_text='Select the Contact Role for Household Members', blank=True)
    npo02_household_rules_c = models.CharField(db_column='npo02__Household_Rules__c', max_length=255, verbose_name='Household Rules', help_text='Select which Contacts get Households: All, only those related to an Individual Account, or none.', blank=True)
    npo02_membership_record_types_c = models.CharField(db_column='npo02__Membership_Record_Types__c', max_length=100, verbose_name='Membership Record Type Names', help_text='Name of record types, such as Membership, that you want to roll up separately from other types. Separate record type names with semicolons.', blank=True)
    npo02_opp_rollup_scheduled_job_id_c = models.CharField(db_column='npo02__Opp_Rollup_Scheduled_Job_Id__c', max_length=255, verbose_name='Opp Rollup Scheduled Job Id', help_text='Id for the currently scheduled Opportunity Rollup Job', blank=True)
    npo02_advanced_household_naming_c = models.BooleanField(db_column='npo02__Advanced_Household_Naming__c', verbose_name='Advanced Household Naming', help_text='Activate advanced household naming functionality in version 2.1+.  This will provide dynamic naming for Household Names, Informal and Formal Greetings.')
    npo02_async_household_naming_c = models.BooleanField(db_column='npo02__Async_Household_Naming__c', verbose_name='Async Household Naming', help_text='This is a non-exposed setting to toggle household naming code to use an asynchronous version instead of the standard version.')
    npo02_disable_householdafter_trigger_c = models.BooleanField(db_column='npo02__DISABLE_HouseholdAfter_trigger__c', verbose_name='DISABLE_HouseholdAfter_trigger', help_text='!!WARNING!!\nDISABLES the HouseholdAfter.trigger (Household__c, after update)\n- checking this box will disable a trigger.  This can cause erratic and unpredictable behavior in your NPSP.  FOR ADVANCED CONSULTANT AND DEVELOPERS ONLY.')
    npo02_disable_householdbefore_trigger_c = models.BooleanField(db_column='npo02__DISABLE_HouseholdBefore_trigger__c', verbose_name='DISABLE_HouseholdBefore_trigger', help_text='!!WARNING!!\nDISABLES the HouseholdBefore.trigger (Household__c, before update)\n- checking this box will disable a trigger.  This can cause erratic and unpredictable behavior in your NPSP. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npo02_disable_household_opportunity_trigger_c = models.BooleanField(db_column='npo02__DISABLE_Household_Opportunity_trigger__c', verbose_name='DISABLE_Household_Opportunity_trigger', help_text='!!WARNING!!\nDISABLES the Household_Opportunity.trigger (Opportunity, after insert)\n- checking this box will disable a trigger.  This can cause erratic and unpredictable behavior in your NPSP. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npo02_disable_households_trigger_c = models.BooleanField(db_column='npo02__DISABLE_Households_trigger__c', verbose_name='DISABLE_Households_trigger', help_text='!!WARNING!!\nDISABLES the Households.trigger (Contact, after insert, after update, after delete)\n- checking this box will disable a trigger.  This can cause erratic and unpredictable behavior in your NPSP. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npo02_disable_opportunityrollup_trigger_c = models.BooleanField(db_column='npo02__DISABLE_OpportunityRollup_trigger__c', verbose_name='DISABLE_OpportunityRollup_trigger', help_text='!!WARNING!!\nDISABLES the OpportunityRollup.trigger (Opportunity, after insert, after update, after delete)\n- checking this box will disable a trigger.  This can cause erratic and unpredictable behavior. FOR ADVANCED CONSULTANTS AND DEVELOPERS ONLY.')
    npo02_enable_update_check_c = models.BooleanField(db_column='npo02__Enable_Update_Check__c', verbose_name='Enable Update Check', help_text='Controls if the package automatically checks for new updates and versions.')
    npo02_has_package_update_c = models.CharField(db_column='npo02__Has_Package_Update__c', max_length=40, verbose_name='Has Package Update', blank=True)
    npo02_household_mailing_list_id_c = models.CharField(db_column='npo02__Household_Mailing_List_ID__c', max_length=18, verbose_name='Household Mailing List ID', help_text="The report ID of the Household Mailing List Report used for Household-deduplicated Campaign mailing lists.  Report should be of Campaigns with Contacts, where Member Status does not contain 'Duplicate'", blank=True)
    npo02_last_update_check_c = models.DateTimeField(db_column='npo02__Last_Update_Check__c', verbose_name='Last Update Check', blank=True, null=True)
    npo02_max_package_version_c = models.CharField(db_column='npo02__Max_Package_Version__c', max_length=12, verbose_name='Max Package Version', blank=True)
    npo02_membership_grace_period_c = models.DecimalField(db_column='npo02__Membership_Grace_Period__c', max_digits=18, decimal_places=0, verbose_name='Membership Grace Period', help_text="The length of the grace period (in days) after a membership expires (last end date) before the status moves from 'Grace Period' to 'Expired'.  Defaults to 30 days.", blank=True, null=True)
    npo02_package_update_url_c = models.URLField(db_column='npo02__Package_Update_URL__c', verbose_name='Package Update URL', blank=True, null=True)
    npo02_rollup_n_day_value_c = models.DecimalField(db_column='npo02__Rollup_N_Day_Value__c', max_digits=18, decimal_places=0, verbose_name='Rollup N Day Value', help_text="Provide a value for 'N day' rollups, where 'N' is the number of days from today into the past.  This value defaults to rollup over the past 365 days.", blank=True, null=True)
    npo02_update_check_interval_c = models.DecimalField(db_column='npo02__Update_Check_Interval__c', max_digits=18, decimal_places=0, verbose_name='Update Check Interval', help_text='The number of days between NPSP callouts to check for new versions of this package. The default value is 90 days.', blank=True, null=True)
    npo02_use_fiscal_year_for_rollups_c = models.BooleanField(db_column='npo02__Use_Fiscal_Year_for_Rollups__c', verbose_name='Use Fiscal Year for Rollups', help_text='Checking this box will cause opportunity rollup totals to respect fiscal year, instead of calendar years settings. To set Fiscal Year information, go to Setup->Company Profile->Fiscal Year.  NOTE: Custom Fiscal Year Settings are NOT supported.')
    npo02_batch_size_c = models.DecimalField(db_column='npo02__Batch_Size__c', max_digits=18, decimal_places=0, verbose_name='Batch Size', blank=True, null=True)
    npo02_enable_soft_credit_rollups_c = models.BooleanField(db_column='npo02__Enable_Soft_Credit_Rollups__c', verbose_name='Enable Soft Credit Rollups', help_text='Allows you to rollup closed Opportunity totals based on Opportunity Contact Role Roles.  Soft credit rollups happen only in the nightly batch job, and not on triggers.  They can be manually run using the Opportunity Rollups tab.')
    npo02_force_fiscal_year_c = models.BooleanField(db_column='npo02__Force_Fiscal_Year__c', verbose_name='Force Fiscal Year', help_text="The NPSP automatically checks for the presence of custom fiscal years, and disabled FY settings if they're found to avoid errors.  This setting overrides that safety-check for users who have accidentally enabled custom fiscal years.")
    npo02_household_creation_excluded_recordtypes_c = models.CharField(db_column='npo02__Household_Creation_Excluded_Recordtypes__c', max_length=255, verbose_name='Household Creation Excluded Recordtypes', help_text='Contact recordtypes excluded from Household creation', blank=True)
    npo02_household_ocr_excluded_recordtypes_c = models.CharField(db_column='npo02__Household_OCR_Excluded_Recordtypes__c', max_length=255, verbose_name='Household OCR Excluded Recordtypes', help_text='Contact recordtypes excluded from Household Opportunity Contact Role creation', blank=True)
    npo02_schedule_job_limit_c = models.DecimalField(db_column='npo02__Schedule_Job_Limit__c', max_digits=18, decimal_places=0, verbose_name='Schedule Job Limit', help_text='The scheduled job limit used when auto-scheduling nightly rollups.', blank=True, null=True)
    npo02_soft_credit_roles_c = models.CharField(db_column='npo02__Soft_Credit_Roles__c', max_length=255, verbose_name='Soft Credit Roles', help_text='List of roles to include in soft credit rollups.', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npo02__Households_Settings__c'
        verbose_name = 'Households Settings'
        verbose_name_plural = 'Households Settings'
        # keyPrefix = 'a02'

class Npo02OpportunityRollupErrorC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npo02opportunityrolluperrorc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npo02opportunityrolluperrorc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npo02_error_datetime_c = models.DateTimeField(db_column='npo02__Error_Datetime__c', verbose_name='Error Datetime', help_text='Datetime of the error', blank=True, null=True)
    npo02_error_message_c = models.CharField(db_column='npo02__Error_Message__c', max_length=255, verbose_name='Error Message', help_text='Full text of the error message', blank=True)
    npo02_error_object_type_c = models.CharField(db_column='npo02__Error_Object_Type__c', max_length=50, verbose_name='Error Object Type', help_text='The object type to which this error refers', blank=True)
    npo02_error_record_link_c = models.CharField(db_column='npo02__Error_Record_Link__c', max_length=255, verbose_name='Error Record Link', help_text='Link to the record on which the error occurred', blank=True)
    npo02_error_type_c = models.CharField(db_column='npo02__Error_Type__c', max_length=255, verbose_name='Error Type', help_text='Type of error that occurred', blank=True)
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npo02__Opportunity_Rollup_Error__c'
        verbose_name = 'Opportunity Rollup Errors'
        verbose_name_plural = 'Opportunity Rollup Errors'
        # keyPrefix = 'a0H'

class Npo02UserRollupFieldSettingsC(models.Model):
    isdeleted = models.BooleanField(db_column='IsDeleted', verbose_name='Deleted', sf_read_only=models.READ_ONLY)
    name = models.CharField(db_column='Name', max_length=38, verbose_name='Name')
    setupowner = models.ForeignKey(Organization, db_column='SetupOwnerId', blank=True, null=True)
    createddate = models.DateTimeField(db_column='CreatedDate', verbose_name='Created Date', sf_read_only=models.READ_ONLY)
    createdby = models.ForeignKey(User, related_name='npo02userrollupfieldsettingsc_createdby_set', db_column='CreatedById', sf_read_only=models.READ_ONLY)
    lastmodifieddate = models.DateTimeField(db_column='LastModifiedDate', verbose_name='Last Modified Date', sf_read_only=models.READ_ONLY)
    lastmodifiedby = models.ForeignKey(User, related_name='npo02userrollupfieldsettingsc_lastmodifiedby_set', db_column='LastModifiedById', sf_read_only=models.READ_ONLY)
    systemmodstamp = models.DateTimeField(db_column='SystemModstamp', verbose_name='System Modstamp', sf_read_only=models.READ_ONLY)
    npo02_field_action_c = models.CharField(db_column='npo02__Field_Action__c', max_length=50, verbose_name='Field Action', help_text='The rollup action (MIN, MAX, SUM, COUNT) to be performed on the source field')
    npo02_object_name_c = models.CharField(db_column='npo02__Object_Name__c', max_length=50, verbose_name='Object Name', help_text='The object this user rollup is mapped to')
    npo02_source_field_c = models.CharField(db_column='npo02__Source_Field__c', max_length=50, verbose_name='Source Field', help_text='The source field and action from the object for this user rollup')
    npo02_target_field_c = models.CharField(db_column='npo02__Target_Field__c', max_length=50, verbose_name='Target Field', help_text='The target field for placing the rolled-up value for this user defined rollup')
    class Meta(models.SalesforceModel.Meta):
        db_table = 'npo02__User_Rollup_Field_Settings__c'
        verbose_name = 'User Rollup Field Settings'
        verbose_name_plural = 'User Rollup Field Settings'
        # keyPrefix = 'a04'

