upstream taikonetwork_app_server {
  # fail_timeout=0 means we always retry and upstream even if it failed to
  # return a good HTTP response (in case the Gunicorn master nukes a single
  # worker for timing out).

  server unix:/webapps/taiko_django/run/gunicorn.sock fail_timeout=0;
}

server {
  listen 80 default;
  server_name localhost;

  client_max_body_size 4G;

  access_log /webapps/taiko_django/logs/nginx-access.log;
  error_log /webapps/taiko_django/logs/nginx-error.log;

  location /static/ {
      alias /webapps/taiko_django/static/;
  }

  location /media/ {
      alias /webapps/taiko_django/media/;
  }

  location / {
      # An HTTP header important enough to have its own Wikipedia entry:
      #    http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # Enable this if and only if you use HTTPS, this helps Rack
      # set the proper protocol for doing redirects:
      # proxy_set_header X-Forwarded-Proto https;

      # Pass the Host: jeader from the client right along so redirects
      # can be set properly within the Rack application.
      proxy_set_header Host $http_host;

      # We do not want nginx trying to do something clever with redirects,
      # we set the Host: header above already.
      proxy_redirect off;

      # Set "proxy_buffering off" *only* for Rainbows! when doing
      # Comet/long-poll stuff. It's also safe if you are serving fast
      # clients with Gunicorn + nginx. Otherwise you _want_ nginx to buffer
      # responses to slow clients, really.
      # proxy_buffering off;

      # Try to serve static files from nginx, no point in making an
      # *application* server like Gunicorn serve static files.
      if (!-f $request_filename) {
          proxy_pass http://taikonetwork_app_server;
          break;
      }
  }

  # Error pages
  error_page 500 502 503 504 /500.html;
  location = /500.html {
      root /webapps/taiko_django/static/;
  }
}